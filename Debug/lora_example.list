
lora_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800b0b8  0800b0b8  0001b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b398  0800b398  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b398  0800b398  0001b398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a0  0800b3a0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a0  0800b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000094  0800b43c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000057c  0800b43c  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ee4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c40  00000000  00000000  00040fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00045be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001028  00000000  00000000  00046de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ee7  00000000  00000000  00047e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000182a6  00000000  00000000  00068cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9f55  00000000  00000000  00080f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0012aef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  0012af70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b0a0 	.word	0x0800b0a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	0800b0a0 	.word	0x0800b0a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f813 	bl	8001430 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ff6d 	bl	80012f4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f805 	bl	8001430 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fffb 	bl	8001430 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff8d 	bl	8001368 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff83 	bl	8001368 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f824 	bl	80004ec <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_d2uiz>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	2200      	movs	r2, #0
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <__aeabi_d2uiz+0x38>)
 80004b6:	0004      	movs	r4, r0
 80004b8:	000d      	movs	r5, r1
 80004ba:	f7ff ffcf 	bl	800045c <__aeabi_dcmpge>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d104      	bne.n	80004cc <__aeabi_d2uiz+0x1c>
 80004c2:	0020      	movs	r0, r4
 80004c4:	0029      	movs	r1, r5
 80004c6:	f001 fdab 	bl	8002020 <__aeabi_d2iz>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <__aeabi_d2uiz+0x38>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	0020      	movs	r0, r4
 80004d2:	0029      	movs	r1, r5
 80004d4:	f001 fa8e 	bl	80019f4 <__aeabi_dsub>
 80004d8:	f001 fda2 	bl	8002020 <__aeabi_d2iz>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	061b      	lsls	r3, r3, #24
 80004e0:	469c      	mov	ip, r3
 80004e2:	4460      	add	r0, ip
 80004e4:	e7f1      	b.n	80004ca <__aeabi_d2uiz+0x1a>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	41e00000 	.word	0x41e00000

080004ec <__udivmoddi4>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	4657      	mov	r7, sl
 80004f0:	464e      	mov	r6, r9
 80004f2:	4645      	mov	r5, r8
 80004f4:	46de      	mov	lr, fp
 80004f6:	b5e0      	push	{r5, r6, r7, lr}
 80004f8:	0004      	movs	r4, r0
 80004fa:	b083      	sub	sp, #12
 80004fc:	000d      	movs	r5, r1
 80004fe:	4692      	mov	sl, r2
 8000500:	4699      	mov	r9, r3
 8000502:	428b      	cmp	r3, r1
 8000504:	d82f      	bhi.n	8000566 <__udivmoddi4+0x7a>
 8000506:	d02c      	beq.n	8000562 <__udivmoddi4+0x76>
 8000508:	4649      	mov	r1, r9
 800050a:	4650      	mov	r0, sl
 800050c:	f001 fe54 	bl	80021b8 <__clzdi2>
 8000510:	0029      	movs	r1, r5
 8000512:	0006      	movs	r6, r0
 8000514:	0020      	movs	r0, r4
 8000516:	f001 fe4f 	bl	80021b8 <__clzdi2>
 800051a:	1a33      	subs	r3, r6, r0
 800051c:	4698      	mov	r8, r3
 800051e:	3b20      	subs	r3, #32
 8000520:	469b      	mov	fp, r3
 8000522:	d500      	bpl.n	8000526 <__udivmoddi4+0x3a>
 8000524:	e074      	b.n	8000610 <__udivmoddi4+0x124>
 8000526:	4653      	mov	r3, sl
 8000528:	465a      	mov	r2, fp
 800052a:	4093      	lsls	r3, r2
 800052c:	001f      	movs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4642      	mov	r2, r8
 8000532:	4093      	lsls	r3, r2
 8000534:	001e      	movs	r6, r3
 8000536:	42af      	cmp	r7, r5
 8000538:	d829      	bhi.n	800058e <__udivmoddi4+0xa2>
 800053a:	d026      	beq.n	800058a <__udivmoddi4+0x9e>
 800053c:	465b      	mov	r3, fp
 800053e:	1ba4      	subs	r4, r4, r6
 8000540:	41bd      	sbcs	r5, r7
 8000542:	2b00      	cmp	r3, #0
 8000544:	da00      	bge.n	8000548 <__udivmoddi4+0x5c>
 8000546:	e079      	b.n	800063c <__udivmoddi4+0x150>
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2301      	movs	r3, #1
 8000552:	465a      	mov	r2, fp
 8000554:	4093      	lsls	r3, r2
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2301      	movs	r3, #1
 800055a:	4642      	mov	r2, r8
 800055c:	4093      	lsls	r3, r2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	e019      	b.n	8000596 <__udivmoddi4+0xaa>
 8000562:	4282      	cmp	r2, r0
 8000564:	d9d0      	bls.n	8000508 <__udivmoddi4+0x1c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <__udivmoddi4+0x8c>
 8000574:	601c      	str	r4, [r3, #0]
 8000576:	605d      	str	r5, [r3, #4]
 8000578:	9800      	ldr	r0, [sp, #0]
 800057a:	9901      	ldr	r1, [sp, #4]
 800057c:	b003      	add	sp, #12
 800057e:	bc3c      	pop	{r2, r3, r4, r5}
 8000580:	4690      	mov	r8, r2
 8000582:	4699      	mov	r9, r3
 8000584:	46a2      	mov	sl, r4
 8000586:	46ab      	mov	fp, r5
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058a:	42a3      	cmp	r3, r4
 800058c:	d9d6      	bls.n	800053c <__udivmoddi4+0x50>
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	4643      	mov	r3, r8
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0e8      	beq.n	800056e <__udivmoddi4+0x82>
 800059c:	07fb      	lsls	r3, r7, #31
 800059e:	0872      	lsrs	r2, r6, #1
 80005a0:	431a      	orrs	r2, r3
 80005a2:	4646      	mov	r6, r8
 80005a4:	087b      	lsrs	r3, r7, #1
 80005a6:	e00e      	b.n	80005c6 <__udivmoddi4+0xda>
 80005a8:	42ab      	cmp	r3, r5
 80005aa:	d101      	bne.n	80005b0 <__udivmoddi4+0xc4>
 80005ac:	42a2      	cmp	r2, r4
 80005ae:	d80c      	bhi.n	80005ca <__udivmoddi4+0xde>
 80005b0:	1aa4      	subs	r4, r4, r2
 80005b2:	419d      	sbcs	r5, r3
 80005b4:	2001      	movs	r0, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2100      	movs	r1, #0
 80005bc:	3e01      	subs	r6, #1
 80005be:	1824      	adds	r4, r4, r0
 80005c0:	414d      	adcs	r5, r1
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d006      	beq.n	80005d4 <__udivmoddi4+0xe8>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d9ee      	bls.n	80005a8 <__udivmoddi4+0xbc>
 80005ca:	3e01      	subs	r6, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d1f8      	bne.n	80005c6 <__udivmoddi4+0xda>
 80005d4:	465b      	mov	r3, fp
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	1900      	adds	r0, r0, r4
 80005dc:	4169      	adcs	r1, r5
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db22      	blt.n	8000628 <__udivmoddi4+0x13c>
 80005e2:	002b      	movs	r3, r5
 80005e4:	465a      	mov	r2, fp
 80005e6:	40d3      	lsrs	r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	4644      	mov	r4, r8
 80005ec:	40e2      	lsrs	r2, r4
 80005ee:	001c      	movs	r4, r3
 80005f0:	465b      	mov	r3, fp
 80005f2:	0015      	movs	r5, r2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db2c      	blt.n	8000652 <__udivmoddi4+0x166>
 80005f8:	0026      	movs	r6, r4
 80005fa:	409e      	lsls	r6, r3
 80005fc:	0033      	movs	r3, r6
 80005fe:	0026      	movs	r6, r4
 8000600:	4647      	mov	r7, r8
 8000602:	40be      	lsls	r6, r7
 8000604:	0032      	movs	r2, r6
 8000606:	1a80      	subs	r0, r0, r2
 8000608:	4199      	sbcs	r1, r3
 800060a:	9000      	str	r0, [sp, #0]
 800060c:	9101      	str	r1, [sp, #4]
 800060e:	e7ae      	b.n	800056e <__udivmoddi4+0x82>
 8000610:	4642      	mov	r2, r8
 8000612:	2320      	movs	r3, #32
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	4652      	mov	r2, sl
 8000618:	40da      	lsrs	r2, r3
 800061a:	4641      	mov	r1, r8
 800061c:	0013      	movs	r3, r2
 800061e:	464a      	mov	r2, r9
 8000620:	408a      	lsls	r2, r1
 8000622:	0017      	movs	r7, r2
 8000624:	431f      	orrs	r7, r3
 8000626:	e782      	b.n	800052e <__udivmoddi4+0x42>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4646      	mov	r6, r8
 8000632:	409a      	lsls	r2, r3
 8000634:	0023      	movs	r3, r4
 8000636:	40f3      	lsrs	r3, r6
 8000638:	4313      	orrs	r3, r2
 800063a:	e7d5      	b.n	80005e8 <__udivmoddi4+0xfc>
 800063c:	4642      	mov	r2, r8
 800063e:	2320      	movs	r3, #32
 8000640:	2100      	movs	r1, #0
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	2200      	movs	r2, #0
 8000646:	9100      	str	r1, [sp, #0]
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	2201      	movs	r2, #1
 800064c:	40da      	lsrs	r2, r3
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	e782      	b.n	8000558 <__udivmoddi4+0x6c>
 8000652:	4642      	mov	r2, r8
 8000654:	2320      	movs	r3, #32
 8000656:	0026      	movs	r6, r4
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	40de      	lsrs	r6, r3
 800065c:	002f      	movs	r7, r5
 800065e:	46b4      	mov	ip, r6
 8000660:	4097      	lsls	r7, r2
 8000662:	4666      	mov	r6, ip
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7c9      	b.n	80005fe <__udivmoddi4+0x112>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_dadd>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	4657      	mov	r7, sl
 8000674:	464e      	mov	r6, r9
 8000676:	030c      	lsls	r4, r1, #12
 8000678:	b5e0      	push	{r5, r6, r7, lr}
 800067a:	004e      	lsls	r6, r1, #1
 800067c:	0fc9      	lsrs	r1, r1, #31
 800067e:	4688      	mov	r8, r1
 8000680:	000d      	movs	r5, r1
 8000682:	0a61      	lsrs	r1, r4, #9
 8000684:	0f44      	lsrs	r4, r0, #29
 8000686:	430c      	orrs	r4, r1
 8000688:	00c7      	lsls	r7, r0, #3
 800068a:	0319      	lsls	r1, r3, #12
 800068c:	0058      	lsls	r0, r3, #1
 800068e:	0fdb      	lsrs	r3, r3, #31
 8000690:	469b      	mov	fp, r3
 8000692:	0a4b      	lsrs	r3, r1, #9
 8000694:	0f51      	lsrs	r1, r2, #29
 8000696:	430b      	orrs	r3, r1
 8000698:	0d76      	lsrs	r6, r6, #21
 800069a:	0d40      	lsrs	r0, r0, #21
 800069c:	0019      	movs	r1, r3
 800069e:	00d2      	lsls	r2, r2, #3
 80006a0:	45d8      	cmp	r8, fp
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x3a>
 80006a4:	e0ae      	b.n	8000804 <__aeabi_dadd+0x198>
 80006a6:	1a35      	subs	r5, r6, r0
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_dadd+0x42>
 80006ac:	e0f6      	b.n	800089c <__aeabi_dadd+0x230>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dadd+0x66>
 80006b2:	4313      	orrs	r3, r2
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x4c>
 80006b6:	e0db      	b.n	8000870 <__aeabi_dadd+0x204>
 80006b8:	1e6b      	subs	r3, r5, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d000      	beq.n	80006c0 <__aeabi_dadd+0x54>
 80006be:	e137      	b.n	8000930 <__aeabi_dadd+0x2c4>
 80006c0:	1aba      	subs	r2, r7, r2
 80006c2:	4297      	cmp	r7, r2
 80006c4:	41bf      	sbcs	r7, r7
 80006c6:	1a64      	subs	r4, r4, r1
 80006c8:	427f      	negs	r7, r7
 80006ca:	1be4      	subs	r4, r4, r7
 80006cc:	2601      	movs	r6, #1
 80006ce:	0017      	movs	r7, r2
 80006d0:	e024      	b.n	800071c <__aeabi_dadd+0xb0>
 80006d2:	4bc6      	ldr	r3, [pc, #792]	; (80009ec <__aeabi_dadd+0x380>)
 80006d4:	429e      	cmp	r6, r3
 80006d6:	d04d      	beq.n	8000774 <__aeabi_dadd+0x108>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	4319      	orrs	r1, r3
 80006de:	2d38      	cmp	r5, #56	; 0x38
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x78>
 80006e2:	e107      	b.n	80008f4 <__aeabi_dadd+0x288>
 80006e4:	2d1f      	cmp	r5, #31
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x7e>
 80006e8:	e138      	b.n	800095c <__aeabi_dadd+0x2f0>
 80006ea:	2020      	movs	r0, #32
 80006ec:	1b43      	subs	r3, r0, r5
 80006ee:	469a      	mov	sl, r3
 80006f0:	000b      	movs	r3, r1
 80006f2:	4650      	mov	r0, sl
 80006f4:	4083      	lsls	r3, r0
 80006f6:	4699      	mov	r9, r3
 80006f8:	0013      	movs	r3, r2
 80006fa:	4648      	mov	r0, r9
 80006fc:	40eb      	lsrs	r3, r5
 80006fe:	4318      	orrs	r0, r3
 8000700:	0003      	movs	r3, r0
 8000702:	4650      	mov	r0, sl
 8000704:	4082      	lsls	r2, r0
 8000706:	1e50      	subs	r0, r2, #1
 8000708:	4182      	sbcs	r2, r0
 800070a:	40e9      	lsrs	r1, r5
 800070c:	431a      	orrs	r2, r3
 800070e:	1aba      	subs	r2, r7, r2
 8000710:	1a61      	subs	r1, r4, r1
 8000712:	4297      	cmp	r7, r2
 8000714:	41a4      	sbcs	r4, r4
 8000716:	0017      	movs	r7, r2
 8000718:	4264      	negs	r4, r4
 800071a:	1b0c      	subs	r4, r1, r4
 800071c:	0223      	lsls	r3, r4, #8
 800071e:	d562      	bpl.n	80007e6 <__aeabi_dadd+0x17a>
 8000720:	0264      	lsls	r4, r4, #9
 8000722:	0a65      	lsrs	r5, r4, #9
 8000724:	2d00      	cmp	r5, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xbe>
 8000728:	e0df      	b.n	80008ea <__aeabi_dadd+0x27e>
 800072a:	0028      	movs	r0, r5
 800072c:	f001 fd26 	bl	800217c <__clzsi2>
 8000730:	0003      	movs	r3, r0
 8000732:	3b08      	subs	r3, #8
 8000734:	2b1f      	cmp	r3, #31
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0xce>
 8000738:	e0d2      	b.n	80008e0 <__aeabi_dadd+0x274>
 800073a:	2220      	movs	r2, #32
 800073c:	003c      	movs	r4, r7
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	409d      	lsls	r5, r3
 8000742:	40d4      	lsrs	r4, r2
 8000744:	409f      	lsls	r7, r3
 8000746:	4325      	orrs	r5, r4
 8000748:	429e      	cmp	r6, r3
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0xe2>
 800074c:	e0c4      	b.n	80008d8 <__aeabi_dadd+0x26c>
 800074e:	1b9e      	subs	r6, r3, r6
 8000750:	1c73      	adds	r3, r6, #1
 8000752:	2b1f      	cmp	r3, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xec>
 8000756:	e0f1      	b.n	800093c <__aeabi_dadd+0x2d0>
 8000758:	2220      	movs	r2, #32
 800075a:	0038      	movs	r0, r7
 800075c:	0029      	movs	r1, r5
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	40d8      	lsrs	r0, r3
 8000762:	4091      	lsls	r1, r2
 8000764:	4097      	lsls	r7, r2
 8000766:	002c      	movs	r4, r5
 8000768:	4301      	orrs	r1, r0
 800076a:	1e78      	subs	r0, r7, #1
 800076c:	4187      	sbcs	r7, r0
 800076e:	40dc      	lsrs	r4, r3
 8000770:	2600      	movs	r6, #0
 8000772:	430f      	orrs	r7, r1
 8000774:	077b      	lsls	r3, r7, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x120>
 8000778:	230f      	movs	r3, #15
 800077a:	403b      	ands	r3, r7
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x120>
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	42bb      	cmp	r3, r7
 8000784:	41bf      	sbcs	r7, r7
 8000786:	427f      	negs	r7, r7
 8000788:	19e4      	adds	r4, r4, r7
 800078a:	001f      	movs	r7, r3
 800078c:	0223      	lsls	r3, r4, #8
 800078e:	d52c      	bpl.n	80007ea <__aeabi_dadd+0x17e>
 8000790:	4b96      	ldr	r3, [pc, #600]	; (80009ec <__aeabi_dadd+0x380>)
 8000792:	3601      	adds	r6, #1
 8000794:	429e      	cmp	r6, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x12e>
 8000798:	e09a      	b.n	80008d0 <__aeabi_dadd+0x264>
 800079a:	4645      	mov	r5, r8
 800079c:	4b94      	ldr	r3, [pc, #592]	; (80009f0 <__aeabi_dadd+0x384>)
 800079e:	08ff      	lsrs	r7, r7, #3
 80007a0:	401c      	ands	r4, r3
 80007a2:	0760      	lsls	r0, r4, #29
 80007a4:	0576      	lsls	r6, r6, #21
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	4307      	orrs	r7, r0
 80007aa:	0b24      	lsrs	r4, r4, #12
 80007ac:	0d76      	lsrs	r6, r6, #21
 80007ae:	2100      	movs	r1, #0
 80007b0:	0324      	lsls	r4, r4, #12
 80007b2:	0b23      	lsrs	r3, r4, #12
 80007b4:	0d0c      	lsrs	r4, r1, #20
 80007b6:	4a8f      	ldr	r2, [pc, #572]	; (80009f4 <__aeabi_dadd+0x388>)
 80007b8:	0524      	lsls	r4, r4, #20
 80007ba:	431c      	orrs	r4, r3
 80007bc:	4014      	ands	r4, r2
 80007be:	0533      	lsls	r3, r6, #20
 80007c0:	4323      	orrs	r3, r4
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	07ed      	lsls	r5, r5, #31
 80007c6:	085b      	lsrs	r3, r3, #1
 80007c8:	432b      	orrs	r3, r5
 80007ca:	0038      	movs	r0, r7
 80007cc:	0019      	movs	r1, r3
 80007ce:	bc3c      	pop	{r2, r3, r4, r5}
 80007d0:	4690      	mov	r8, r2
 80007d2:	4699      	mov	r9, r3
 80007d4:	46a2      	mov	sl, r4
 80007d6:	46ab      	mov	fp, r5
 80007d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007da:	4664      	mov	r4, ip
 80007dc:	4304      	orrs	r4, r0
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x176>
 80007e0:	e211      	b.n	8000c06 <__aeabi_dadd+0x59a>
 80007e2:	0004      	movs	r4, r0
 80007e4:	4667      	mov	r7, ip
 80007e6:	077b      	lsls	r3, r7, #29
 80007e8:	d1c6      	bne.n	8000778 <__aeabi_dadd+0x10c>
 80007ea:	4645      	mov	r5, r8
 80007ec:	0760      	lsls	r0, r4, #29
 80007ee:	08ff      	lsrs	r7, r7, #3
 80007f0:	4307      	orrs	r7, r0
 80007f2:	08e4      	lsrs	r4, r4, #3
 80007f4:	4b7d      	ldr	r3, [pc, #500]	; (80009ec <__aeabi_dadd+0x380>)
 80007f6:	429e      	cmp	r6, r3
 80007f8:	d030      	beq.n	800085c <__aeabi_dadd+0x1f0>
 80007fa:	0324      	lsls	r4, r4, #12
 80007fc:	0576      	lsls	r6, r6, #21
 80007fe:	0b24      	lsrs	r4, r4, #12
 8000800:	0d76      	lsrs	r6, r6, #21
 8000802:	e7d4      	b.n	80007ae <__aeabi_dadd+0x142>
 8000804:	1a33      	subs	r3, r6, r0
 8000806:	469a      	mov	sl, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	dd78      	ble.n	80008fe <__aeabi_dadd+0x292>
 800080c:	2800      	cmp	r0, #0
 800080e:	d031      	beq.n	8000874 <__aeabi_dadd+0x208>
 8000810:	4876      	ldr	r0, [pc, #472]	; (80009ec <__aeabi_dadd+0x380>)
 8000812:	4286      	cmp	r6, r0
 8000814:	d0ae      	beq.n	8000774 <__aeabi_dadd+0x108>
 8000816:	2080      	movs	r0, #128	; 0x80
 8000818:	0400      	lsls	r0, r0, #16
 800081a:	4301      	orrs	r1, r0
 800081c:	4653      	mov	r3, sl
 800081e:	2b38      	cmp	r3, #56	; 0x38
 8000820:	dc00      	bgt.n	8000824 <__aeabi_dadd+0x1b8>
 8000822:	e0e9      	b.n	80009f8 <__aeabi_dadd+0x38c>
 8000824:	430a      	orrs	r2, r1
 8000826:	1e51      	subs	r1, r2, #1
 8000828:	418a      	sbcs	r2, r1
 800082a:	2100      	movs	r1, #0
 800082c:	19d2      	adds	r2, r2, r7
 800082e:	42ba      	cmp	r2, r7
 8000830:	41bf      	sbcs	r7, r7
 8000832:	1909      	adds	r1, r1, r4
 8000834:	427c      	negs	r4, r7
 8000836:	0017      	movs	r7, r2
 8000838:	190c      	adds	r4, r1, r4
 800083a:	0223      	lsls	r3, r4, #8
 800083c:	d5d3      	bpl.n	80007e6 <__aeabi_dadd+0x17a>
 800083e:	4b6b      	ldr	r3, [pc, #428]	; (80009ec <__aeabi_dadd+0x380>)
 8000840:	3601      	adds	r6, #1
 8000842:	429e      	cmp	r6, r3
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1dc>
 8000846:	e13a      	b.n	8000abe <__aeabi_dadd+0x452>
 8000848:	2001      	movs	r0, #1
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <__aeabi_dadd+0x384>)
 800084c:	401c      	ands	r4, r3
 800084e:	087b      	lsrs	r3, r7, #1
 8000850:	4007      	ands	r7, r0
 8000852:	431f      	orrs	r7, r3
 8000854:	07e0      	lsls	r0, r4, #31
 8000856:	4307      	orrs	r7, r0
 8000858:	0864      	lsrs	r4, r4, #1
 800085a:	e78b      	b.n	8000774 <__aeabi_dadd+0x108>
 800085c:	0023      	movs	r3, r4
 800085e:	433b      	orrs	r3, r7
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x1f8>
 8000862:	e1cb      	b.n	8000bfc <__aeabi_dadd+0x590>
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	0312      	lsls	r2, r2, #12
 8000868:	4314      	orrs	r4, r2
 800086a:	0324      	lsls	r4, r4, #12
 800086c:	0b24      	lsrs	r4, r4, #12
 800086e:	e79e      	b.n	80007ae <__aeabi_dadd+0x142>
 8000870:	002e      	movs	r6, r5
 8000872:	e77f      	b.n	8000774 <__aeabi_dadd+0x108>
 8000874:	0008      	movs	r0, r1
 8000876:	4310      	orrs	r0, r2
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x210>
 800087a:	e0b4      	b.n	80009e6 <__aeabi_dadd+0x37a>
 800087c:	1e58      	subs	r0, r3, #1
 800087e:	2800      	cmp	r0, #0
 8000880:	d000      	beq.n	8000884 <__aeabi_dadd+0x218>
 8000882:	e0de      	b.n	8000a42 <__aeabi_dadd+0x3d6>
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	42ba      	cmp	r2, r7
 8000888:	419b      	sbcs	r3, r3
 800088a:	1864      	adds	r4, r4, r1
 800088c:	425b      	negs	r3, r3
 800088e:	18e4      	adds	r4, r4, r3
 8000890:	0017      	movs	r7, r2
 8000892:	2601      	movs	r6, #1
 8000894:	0223      	lsls	r3, r4, #8
 8000896:	d5a6      	bpl.n	80007e6 <__aeabi_dadd+0x17a>
 8000898:	2602      	movs	r6, #2
 800089a:	e7d5      	b.n	8000848 <__aeabi_dadd+0x1dc>
 800089c:	2d00      	cmp	r5, #0
 800089e:	d16e      	bne.n	800097e <__aeabi_dadd+0x312>
 80008a0:	1c70      	adds	r0, r6, #1
 80008a2:	0540      	lsls	r0, r0, #21
 80008a4:	0d40      	lsrs	r0, r0, #21
 80008a6:	2801      	cmp	r0, #1
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_dadd+0x240>
 80008aa:	e0f9      	b.n	8000aa0 <__aeabi_dadd+0x434>
 80008ac:	1ab8      	subs	r0, r7, r2
 80008ae:	4684      	mov	ip, r0
 80008b0:	4287      	cmp	r7, r0
 80008b2:	4180      	sbcs	r0, r0
 80008b4:	1ae5      	subs	r5, r4, r3
 80008b6:	4240      	negs	r0, r0
 80008b8:	1a2d      	subs	r5, r5, r0
 80008ba:	0228      	lsls	r0, r5, #8
 80008bc:	d400      	bmi.n	80008c0 <__aeabi_dadd+0x254>
 80008be:	e089      	b.n	80009d4 <__aeabi_dadd+0x368>
 80008c0:	1bd7      	subs	r7, r2, r7
 80008c2:	42ba      	cmp	r2, r7
 80008c4:	4192      	sbcs	r2, r2
 80008c6:	1b1c      	subs	r4, r3, r4
 80008c8:	4252      	negs	r2, r2
 80008ca:	1aa5      	subs	r5, r4, r2
 80008cc:	46d8      	mov	r8, fp
 80008ce:	e729      	b.n	8000724 <__aeabi_dadd+0xb8>
 80008d0:	4645      	mov	r5, r8
 80008d2:	2400      	movs	r4, #0
 80008d4:	2700      	movs	r7, #0
 80008d6:	e76a      	b.n	80007ae <__aeabi_dadd+0x142>
 80008d8:	4c45      	ldr	r4, [pc, #276]	; (80009f0 <__aeabi_dadd+0x384>)
 80008da:	1af6      	subs	r6, r6, r3
 80008dc:	402c      	ands	r4, r5
 80008de:	e749      	b.n	8000774 <__aeabi_dadd+0x108>
 80008e0:	003d      	movs	r5, r7
 80008e2:	3828      	subs	r0, #40	; 0x28
 80008e4:	4085      	lsls	r5, r0
 80008e6:	2700      	movs	r7, #0
 80008e8:	e72e      	b.n	8000748 <__aeabi_dadd+0xdc>
 80008ea:	0038      	movs	r0, r7
 80008ec:	f001 fc46 	bl	800217c <__clzsi2>
 80008f0:	3020      	adds	r0, #32
 80008f2:	e71d      	b.n	8000730 <__aeabi_dadd+0xc4>
 80008f4:	430a      	orrs	r2, r1
 80008f6:	1e51      	subs	r1, r2, #1
 80008f8:	418a      	sbcs	r2, r1
 80008fa:	2100      	movs	r1, #0
 80008fc:	e707      	b.n	800070e <__aeabi_dadd+0xa2>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x298>
 8000902:	e0f3      	b.n	8000aec <__aeabi_dadd+0x480>
 8000904:	1c70      	adds	r0, r6, #1
 8000906:	0543      	lsls	r3, r0, #21
 8000908:	0d5b      	lsrs	r3, r3, #21
 800090a:	2b01      	cmp	r3, #1
 800090c:	dc00      	bgt.n	8000910 <__aeabi_dadd+0x2a4>
 800090e:	e0ad      	b.n	8000a6c <__aeabi_dadd+0x400>
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <__aeabi_dadd+0x380>)
 8000912:	4298      	cmp	r0, r3
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x2ac>
 8000916:	e0d1      	b.n	8000abc <__aeabi_dadd+0x450>
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	42ba      	cmp	r2, r7
 800091c:	41bf      	sbcs	r7, r7
 800091e:	1864      	adds	r4, r4, r1
 8000920:	427f      	negs	r7, r7
 8000922:	19e4      	adds	r4, r4, r7
 8000924:	07e7      	lsls	r7, r4, #31
 8000926:	0852      	lsrs	r2, r2, #1
 8000928:	4317      	orrs	r7, r2
 800092a:	0864      	lsrs	r4, r4, #1
 800092c:	0006      	movs	r6, r0
 800092e:	e721      	b.n	8000774 <__aeabi_dadd+0x108>
 8000930:	482e      	ldr	r0, [pc, #184]	; (80009ec <__aeabi_dadd+0x380>)
 8000932:	4285      	cmp	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x2cc>
 8000936:	e093      	b.n	8000a60 <__aeabi_dadd+0x3f4>
 8000938:	001d      	movs	r5, r3
 800093a:	e6d0      	b.n	80006de <__aeabi_dadd+0x72>
 800093c:	0029      	movs	r1, r5
 800093e:	3e1f      	subs	r6, #31
 8000940:	40f1      	lsrs	r1, r6
 8000942:	2b20      	cmp	r3, #32
 8000944:	d100      	bne.n	8000948 <__aeabi_dadd+0x2dc>
 8000946:	e08d      	b.n	8000a64 <__aeabi_dadd+0x3f8>
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	409d      	lsls	r5, r3
 800094e:	432f      	orrs	r7, r5
 8000950:	1e7d      	subs	r5, r7, #1
 8000952:	41af      	sbcs	r7, r5
 8000954:	2400      	movs	r4, #0
 8000956:	430f      	orrs	r7, r1
 8000958:	2600      	movs	r6, #0
 800095a:	e744      	b.n	80007e6 <__aeabi_dadd+0x17a>
 800095c:	002b      	movs	r3, r5
 800095e:	0008      	movs	r0, r1
 8000960:	3b20      	subs	r3, #32
 8000962:	40d8      	lsrs	r0, r3
 8000964:	0003      	movs	r3, r0
 8000966:	2d20      	cmp	r5, #32
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x300>
 800096a:	e07d      	b.n	8000a68 <__aeabi_dadd+0x3fc>
 800096c:	2040      	movs	r0, #64	; 0x40
 800096e:	1b45      	subs	r5, r0, r5
 8000970:	40a9      	lsls	r1, r5
 8000972:	430a      	orrs	r2, r1
 8000974:	1e51      	subs	r1, r2, #1
 8000976:	418a      	sbcs	r2, r1
 8000978:	2100      	movs	r1, #0
 800097a:	431a      	orrs	r2, r3
 800097c:	e6c7      	b.n	800070e <__aeabi_dadd+0xa2>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d050      	beq.n	8000a24 <__aeabi_dadd+0x3b8>
 8000982:	4e1a      	ldr	r6, [pc, #104]	; (80009ec <__aeabi_dadd+0x380>)
 8000984:	42b0      	cmp	r0, r6
 8000986:	d057      	beq.n	8000a38 <__aeabi_dadd+0x3cc>
 8000988:	2680      	movs	r6, #128	; 0x80
 800098a:	426b      	negs	r3, r5
 800098c:	4699      	mov	r9, r3
 800098e:	0436      	lsls	r6, r6, #16
 8000990:	4334      	orrs	r4, r6
 8000992:	464b      	mov	r3, r9
 8000994:	2b38      	cmp	r3, #56	; 0x38
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x32e>
 8000998:	e0d6      	b.n	8000b48 <__aeabi_dadd+0x4dc>
 800099a:	2b1f      	cmp	r3, #31
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dadd+0x334>
 800099e:	e135      	b.n	8000c0c <__aeabi_dadd+0x5a0>
 80009a0:	2620      	movs	r6, #32
 80009a2:	1af5      	subs	r5, r6, r3
 80009a4:	0026      	movs	r6, r4
 80009a6:	40ae      	lsls	r6, r5
 80009a8:	46b2      	mov	sl, r6
 80009aa:	003e      	movs	r6, r7
 80009ac:	40de      	lsrs	r6, r3
 80009ae:	46ac      	mov	ip, r5
 80009b0:	0035      	movs	r5, r6
 80009b2:	4656      	mov	r6, sl
 80009b4:	432e      	orrs	r6, r5
 80009b6:	4665      	mov	r5, ip
 80009b8:	40af      	lsls	r7, r5
 80009ba:	1e7d      	subs	r5, r7, #1
 80009bc:	41af      	sbcs	r7, r5
 80009be:	40dc      	lsrs	r4, r3
 80009c0:	4337      	orrs	r7, r6
 80009c2:	1bd7      	subs	r7, r2, r7
 80009c4:	42ba      	cmp	r2, r7
 80009c6:	4192      	sbcs	r2, r2
 80009c8:	1b0c      	subs	r4, r1, r4
 80009ca:	4252      	negs	r2, r2
 80009cc:	1aa4      	subs	r4, r4, r2
 80009ce:	0006      	movs	r6, r0
 80009d0:	46d8      	mov	r8, fp
 80009d2:	e6a3      	b.n	800071c <__aeabi_dadd+0xb0>
 80009d4:	4664      	mov	r4, ip
 80009d6:	4667      	mov	r7, ip
 80009d8:	432c      	orrs	r4, r5
 80009da:	d000      	beq.n	80009de <__aeabi_dadd+0x372>
 80009dc:	e6a2      	b.n	8000724 <__aeabi_dadd+0xb8>
 80009de:	2500      	movs	r5, #0
 80009e0:	2600      	movs	r6, #0
 80009e2:	2700      	movs	r7, #0
 80009e4:	e706      	b.n	80007f4 <__aeabi_dadd+0x188>
 80009e6:	001e      	movs	r6, r3
 80009e8:	e6c4      	b.n	8000774 <__aeabi_dadd+0x108>
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	000007ff 	.word	0x000007ff
 80009f0:	ff7fffff 	.word	0xff7fffff
 80009f4:	800fffff 	.word	0x800fffff
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	dc63      	bgt.n	8000ac4 <__aeabi_dadd+0x458>
 80009fc:	2020      	movs	r0, #32
 80009fe:	1ac3      	subs	r3, r0, r3
 8000a00:	0008      	movs	r0, r1
 8000a02:	4098      	lsls	r0, r3
 8000a04:	469c      	mov	ip, r3
 8000a06:	4683      	mov	fp, r0
 8000a08:	4653      	mov	r3, sl
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	40d8      	lsrs	r0, r3
 8000a0e:	0003      	movs	r3, r0
 8000a10:	4658      	mov	r0, fp
 8000a12:	4318      	orrs	r0, r3
 8000a14:	4663      	mov	r3, ip
 8000a16:	409a      	lsls	r2, r3
 8000a18:	1e53      	subs	r3, r2, #1
 8000a1a:	419a      	sbcs	r2, r3
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	4302      	orrs	r2, r0
 8000a20:	40d9      	lsrs	r1, r3
 8000a22:	e703      	b.n	800082c <__aeabi_dadd+0x1c0>
 8000a24:	0026      	movs	r6, r4
 8000a26:	433e      	orrs	r6, r7
 8000a28:	d006      	beq.n	8000a38 <__aeabi_dadd+0x3cc>
 8000a2a:	43eb      	mvns	r3, r5
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0c7      	beq.n	80009c2 <__aeabi_dadd+0x356>
 8000a32:	4e94      	ldr	r6, [pc, #592]	; (8000c84 <__aeabi_dadd+0x618>)
 8000a34:	42b0      	cmp	r0, r6
 8000a36:	d1ac      	bne.n	8000992 <__aeabi_dadd+0x326>
 8000a38:	000c      	movs	r4, r1
 8000a3a:	0017      	movs	r7, r2
 8000a3c:	0006      	movs	r6, r0
 8000a3e:	46d8      	mov	r8, fp
 8000a40:	e698      	b.n	8000774 <__aeabi_dadd+0x108>
 8000a42:	4b90      	ldr	r3, [pc, #576]	; (8000c84 <__aeabi_dadd+0x618>)
 8000a44:	459a      	cmp	sl, r3
 8000a46:	d00b      	beq.n	8000a60 <__aeabi_dadd+0x3f4>
 8000a48:	4682      	mov	sl, r0
 8000a4a:	e6e7      	b.n	800081c <__aeabi_dadd+0x1b0>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x3e6>
 8000a50:	e09e      	b.n	8000b90 <__aeabi_dadd+0x524>
 8000a52:	0018      	movs	r0, r3
 8000a54:	4310      	orrs	r0, r2
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x3ee>
 8000a58:	e0e9      	b.n	8000c2e <__aeabi_dadd+0x5c2>
 8000a5a:	001c      	movs	r4, r3
 8000a5c:	0017      	movs	r7, r2
 8000a5e:	46d8      	mov	r8, fp
 8000a60:	4e88      	ldr	r6, [pc, #544]	; (8000c84 <__aeabi_dadd+0x618>)
 8000a62:	e687      	b.n	8000774 <__aeabi_dadd+0x108>
 8000a64:	2500      	movs	r5, #0
 8000a66:	e772      	b.n	800094e <__aeabi_dadd+0x2e2>
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e782      	b.n	8000972 <__aeabi_dadd+0x306>
 8000a6c:	0023      	movs	r3, r4
 8000a6e:	433b      	orrs	r3, r7
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x40a>
 8000a74:	e0ab      	b.n	8000bce <__aeabi_dadd+0x562>
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x410>
 8000a7a:	e0e7      	b.n	8000c4c <__aeabi_dadd+0x5e0>
 8000a7c:	000b      	movs	r3, r1
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x418>
 8000a82:	e677      	b.n	8000774 <__aeabi_dadd+0x108>
 8000a84:	18ba      	adds	r2, r7, r2
 8000a86:	42ba      	cmp	r2, r7
 8000a88:	41bf      	sbcs	r7, r7
 8000a8a:	1864      	adds	r4, r4, r1
 8000a8c:	427f      	negs	r7, r7
 8000a8e:	19e4      	adds	r4, r4, r7
 8000a90:	0223      	lsls	r3, r4, #8
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_dadd+0x42a>
 8000a94:	e0f2      	b.n	8000c7c <__aeabi_dadd+0x610>
 8000a96:	4b7c      	ldr	r3, [pc, #496]	; (8000c88 <__aeabi_dadd+0x61c>)
 8000a98:	0017      	movs	r7, r2
 8000a9a:	401c      	ands	r4, r3
 8000a9c:	0006      	movs	r6, r0
 8000a9e:	e669      	b.n	8000774 <__aeabi_dadd+0x108>
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	4338      	orrs	r0, r7
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d1d1      	bne.n	8000a4c <__aeabi_dadd+0x3e0>
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d15b      	bne.n	8000b64 <__aeabi_dadd+0x4f8>
 8000aac:	001c      	movs	r4, r3
 8000aae:	4314      	orrs	r4, r2
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x448>
 8000ab2:	e0a8      	b.n	8000c06 <__aeabi_dadd+0x59a>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	0017      	movs	r7, r2
 8000ab8:	46d8      	mov	r8, fp
 8000aba:	e65b      	b.n	8000774 <__aeabi_dadd+0x108>
 8000abc:	0006      	movs	r6, r0
 8000abe:	2400      	movs	r4, #0
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	e697      	b.n	80007f4 <__aeabi_dadd+0x188>
 8000ac4:	4650      	mov	r0, sl
 8000ac6:	000b      	movs	r3, r1
 8000ac8:	3820      	subs	r0, #32
 8000aca:	40c3      	lsrs	r3, r0
 8000acc:	4699      	mov	r9, r3
 8000ace:	4653      	mov	r3, sl
 8000ad0:	2b20      	cmp	r3, #32
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x46a>
 8000ad4:	e095      	b.n	8000c02 <__aeabi_dadd+0x596>
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	4650      	mov	r0, sl
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	4099      	lsls	r1, r3
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	1e51      	subs	r1, r2, #1
 8000ae2:	418a      	sbcs	r2, r1
 8000ae4:	464b      	mov	r3, r9
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	e69f      	b.n	800082c <__aeabi_dadd+0x1c0>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d130      	bne.n	8000b52 <__aeabi_dadd+0x4e6>
 8000af0:	0026      	movs	r6, r4
 8000af2:	433e      	orrs	r6, r7
 8000af4:	d067      	beq.n	8000bc6 <__aeabi_dadd+0x55a>
 8000af6:	43db      	mvns	r3, r3
 8000af8:	469a      	mov	sl, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01c      	beq.n	8000b38 <__aeabi_dadd+0x4cc>
 8000afe:	4e61      	ldr	r6, [pc, #388]	; (8000c84 <__aeabi_dadd+0x618>)
 8000b00:	42b0      	cmp	r0, r6
 8000b02:	d060      	beq.n	8000bc6 <__aeabi_dadd+0x55a>
 8000b04:	4653      	mov	r3, sl
 8000b06:	2b38      	cmp	r3, #56	; 0x38
 8000b08:	dd00      	ble.n	8000b0c <__aeabi_dadd+0x4a0>
 8000b0a:	e096      	b.n	8000c3a <__aeabi_dadd+0x5ce>
 8000b0c:	2b1f      	cmp	r3, #31
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_dadd+0x4a6>
 8000b10:	e09f      	b.n	8000c52 <__aeabi_dadd+0x5e6>
 8000b12:	2620      	movs	r6, #32
 8000b14:	1af3      	subs	r3, r6, r3
 8000b16:	0026      	movs	r6, r4
 8000b18:	409e      	lsls	r6, r3
 8000b1a:	469c      	mov	ip, r3
 8000b1c:	46b3      	mov	fp, r6
 8000b1e:	4653      	mov	r3, sl
 8000b20:	003e      	movs	r6, r7
 8000b22:	40de      	lsrs	r6, r3
 8000b24:	0033      	movs	r3, r6
 8000b26:	465e      	mov	r6, fp
 8000b28:	431e      	orrs	r6, r3
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	409f      	lsls	r7, r3
 8000b2e:	1e7b      	subs	r3, r7, #1
 8000b30:	419f      	sbcs	r7, r3
 8000b32:	4653      	mov	r3, sl
 8000b34:	40dc      	lsrs	r4, r3
 8000b36:	4337      	orrs	r7, r6
 8000b38:	18bf      	adds	r7, r7, r2
 8000b3a:	4297      	cmp	r7, r2
 8000b3c:	4192      	sbcs	r2, r2
 8000b3e:	1864      	adds	r4, r4, r1
 8000b40:	4252      	negs	r2, r2
 8000b42:	18a4      	adds	r4, r4, r2
 8000b44:	0006      	movs	r6, r0
 8000b46:	e678      	b.n	800083a <__aeabi_dadd+0x1ce>
 8000b48:	4327      	orrs	r7, r4
 8000b4a:	1e7c      	subs	r4, r7, #1
 8000b4c:	41a7      	sbcs	r7, r4
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e737      	b.n	80009c2 <__aeabi_dadd+0x356>
 8000b52:	4e4c      	ldr	r6, [pc, #304]	; (8000c84 <__aeabi_dadd+0x618>)
 8000b54:	42b0      	cmp	r0, r6
 8000b56:	d036      	beq.n	8000bc6 <__aeabi_dadd+0x55a>
 8000b58:	2680      	movs	r6, #128	; 0x80
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	0436      	lsls	r6, r6, #16
 8000b5e:	469a      	mov	sl, r3
 8000b60:	4334      	orrs	r4, r6
 8000b62:	e7cf      	b.n	8000b04 <__aeabi_dadd+0x498>
 8000b64:	0018      	movs	r0, r3
 8000b66:	4310      	orrs	r0, r2
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x500>
 8000b6a:	e603      	b.n	8000774 <__aeabi_dadd+0x108>
 8000b6c:	1ab8      	subs	r0, r7, r2
 8000b6e:	4684      	mov	ip, r0
 8000b70:	4567      	cmp	r7, ip
 8000b72:	41ad      	sbcs	r5, r5
 8000b74:	1ae0      	subs	r0, r4, r3
 8000b76:	426d      	negs	r5, r5
 8000b78:	1b40      	subs	r0, r0, r5
 8000b7a:	0205      	lsls	r5, r0, #8
 8000b7c:	d400      	bmi.n	8000b80 <__aeabi_dadd+0x514>
 8000b7e:	e62c      	b.n	80007da <__aeabi_dadd+0x16e>
 8000b80:	1bd7      	subs	r7, r2, r7
 8000b82:	42ba      	cmp	r2, r7
 8000b84:	4192      	sbcs	r2, r2
 8000b86:	1b1c      	subs	r4, r3, r4
 8000b88:	4252      	negs	r2, r2
 8000b8a:	1aa4      	subs	r4, r4, r2
 8000b8c:	46d8      	mov	r8, fp
 8000b8e:	e5f1      	b.n	8000774 <__aeabi_dadd+0x108>
 8000b90:	0018      	movs	r0, r3
 8000b92:	4310      	orrs	r0, r2
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x52c>
 8000b96:	e763      	b.n	8000a60 <__aeabi_dadd+0x3f4>
 8000b98:	08f8      	lsrs	r0, r7, #3
 8000b9a:	0767      	lsls	r7, r4, #29
 8000b9c:	4307      	orrs	r7, r0
 8000b9e:	2080      	movs	r0, #128	; 0x80
 8000ba0:	08e4      	lsrs	r4, r4, #3
 8000ba2:	0300      	lsls	r0, r0, #12
 8000ba4:	4204      	tst	r4, r0
 8000ba6:	d008      	beq.n	8000bba <__aeabi_dadd+0x54e>
 8000ba8:	08dd      	lsrs	r5, r3, #3
 8000baa:	4205      	tst	r5, r0
 8000bac:	d105      	bne.n	8000bba <__aeabi_dadd+0x54e>
 8000bae:	08d2      	lsrs	r2, r2, #3
 8000bb0:	0759      	lsls	r1, r3, #29
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	000f      	movs	r7, r1
 8000bb6:	002c      	movs	r4, r5
 8000bb8:	46d8      	mov	r8, fp
 8000bba:	0f7b      	lsrs	r3, r7, #29
 8000bbc:	00e4      	lsls	r4, r4, #3
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	00ff      	lsls	r7, r7, #3
 8000bc2:	4e30      	ldr	r6, [pc, #192]	; (8000c84 <__aeabi_dadd+0x618>)
 8000bc4:	e5d6      	b.n	8000774 <__aeabi_dadd+0x108>
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	0017      	movs	r7, r2
 8000bca:	0006      	movs	r6, r0
 8000bcc:	e5d2      	b.n	8000774 <__aeabi_dadd+0x108>
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d038      	beq.n	8000c44 <__aeabi_dadd+0x5d8>
 8000bd2:	000b      	movs	r3, r1
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x56e>
 8000bd8:	e742      	b.n	8000a60 <__aeabi_dadd+0x3f4>
 8000bda:	08f8      	lsrs	r0, r7, #3
 8000bdc:	0767      	lsls	r7, r4, #29
 8000bde:	4307      	orrs	r7, r0
 8000be0:	2080      	movs	r0, #128	; 0x80
 8000be2:	08e4      	lsrs	r4, r4, #3
 8000be4:	0300      	lsls	r0, r0, #12
 8000be6:	4204      	tst	r4, r0
 8000be8:	d0e7      	beq.n	8000bba <__aeabi_dadd+0x54e>
 8000bea:	08cb      	lsrs	r3, r1, #3
 8000bec:	4203      	tst	r3, r0
 8000bee:	d1e4      	bne.n	8000bba <__aeabi_dadd+0x54e>
 8000bf0:	08d2      	lsrs	r2, r2, #3
 8000bf2:	0749      	lsls	r1, r1, #29
 8000bf4:	4311      	orrs	r1, r2
 8000bf6:	000f      	movs	r7, r1
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	e7de      	b.n	8000bba <__aeabi_dadd+0x54e>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	2400      	movs	r4, #0
 8000c00:	e5d5      	b.n	80007ae <__aeabi_dadd+0x142>
 8000c02:	2100      	movs	r1, #0
 8000c04:	e76b      	b.n	8000ade <__aeabi_dadd+0x472>
 8000c06:	2500      	movs	r5, #0
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e5f3      	b.n	80007f4 <__aeabi_dadd+0x188>
 8000c0c:	464e      	mov	r6, r9
 8000c0e:	0025      	movs	r5, r4
 8000c10:	3e20      	subs	r6, #32
 8000c12:	40f5      	lsrs	r5, r6
 8000c14:	464b      	mov	r3, r9
 8000c16:	002e      	movs	r6, r5
 8000c18:	2b20      	cmp	r3, #32
 8000c1a:	d02d      	beq.n	8000c78 <__aeabi_dadd+0x60c>
 8000c1c:	2540      	movs	r5, #64	; 0x40
 8000c1e:	1aed      	subs	r5, r5, r3
 8000c20:	40ac      	lsls	r4, r5
 8000c22:	4327      	orrs	r7, r4
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	41a7      	sbcs	r7, r4
 8000c28:	2400      	movs	r4, #0
 8000c2a:	4337      	orrs	r7, r6
 8000c2c:	e6c9      	b.n	80009c2 <__aeabi_dadd+0x356>
 8000c2e:	2480      	movs	r4, #128	; 0x80
 8000c30:	2500      	movs	r5, #0
 8000c32:	0324      	lsls	r4, r4, #12
 8000c34:	4e13      	ldr	r6, [pc, #76]	; (8000c84 <__aeabi_dadd+0x618>)
 8000c36:	2700      	movs	r7, #0
 8000c38:	e5dc      	b.n	80007f4 <__aeabi_dadd+0x188>
 8000c3a:	4327      	orrs	r7, r4
 8000c3c:	1e7c      	subs	r4, r7, #1
 8000c3e:	41a7      	sbcs	r7, r4
 8000c40:	2400      	movs	r4, #0
 8000c42:	e779      	b.n	8000b38 <__aeabi_dadd+0x4cc>
 8000c44:	000c      	movs	r4, r1
 8000c46:	0017      	movs	r7, r2
 8000c48:	4e0e      	ldr	r6, [pc, #56]	; (8000c84 <__aeabi_dadd+0x618>)
 8000c4a:	e593      	b.n	8000774 <__aeabi_dadd+0x108>
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	0017      	movs	r7, r2
 8000c50:	e590      	b.n	8000774 <__aeabi_dadd+0x108>
 8000c52:	4656      	mov	r6, sl
 8000c54:	0023      	movs	r3, r4
 8000c56:	3e20      	subs	r6, #32
 8000c58:	40f3      	lsrs	r3, r6
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	2b20      	cmp	r3, #32
 8000c60:	d00e      	beq.n	8000c80 <__aeabi_dadd+0x614>
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	4656      	mov	r6, sl
 8000c66:	1b9b      	subs	r3, r3, r6
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	4327      	orrs	r7, r4
 8000c6c:	1e7c      	subs	r4, r7, #1
 8000c6e:	41a7      	sbcs	r7, r4
 8000c70:	464b      	mov	r3, r9
 8000c72:	2400      	movs	r4, #0
 8000c74:	431f      	orrs	r7, r3
 8000c76:	e75f      	b.n	8000b38 <__aeabi_dadd+0x4cc>
 8000c78:	2400      	movs	r4, #0
 8000c7a:	e7d2      	b.n	8000c22 <__aeabi_dadd+0x5b6>
 8000c7c:	0017      	movs	r7, r2
 8000c7e:	e5b2      	b.n	80007e6 <__aeabi_dadd+0x17a>
 8000c80:	2400      	movs	r4, #0
 8000c82:	e7f2      	b.n	8000c6a <__aeabi_dadd+0x5fe>
 8000c84:	000007ff 	.word	0x000007ff
 8000c88:	ff7fffff 	.word	0xff7fffff

08000c8c <__aeabi_ddiv>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	4657      	mov	r7, sl
 8000c90:	4645      	mov	r5, r8
 8000c92:	46de      	mov	lr, fp
 8000c94:	464e      	mov	r6, r9
 8000c96:	b5e0      	push	{r5, r6, r7, lr}
 8000c98:	004c      	lsls	r4, r1, #1
 8000c9a:	030e      	lsls	r6, r1, #12
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	4683      	mov	fp, r0
 8000ca0:	4692      	mov	sl, r2
 8000ca2:	001d      	movs	r5, r3
 8000ca4:	4680      	mov	r8, r0
 8000ca6:	0b36      	lsrs	r6, r6, #12
 8000ca8:	0d64      	lsrs	r4, r4, #21
 8000caa:	0fcf      	lsrs	r7, r1, #31
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d04f      	beq.n	8000d50 <__aeabi_ddiv+0xc4>
 8000cb0:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	d035      	beq.n	8000d22 <__aeabi_ddiv+0x96>
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	00f6      	lsls	r6, r6, #3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	4333      	orrs	r3, r6
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	00c3      	lsls	r3, r0, #3
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	4b6a      	ldr	r3, [pc, #424]	; (8000e74 <__aeabi_ddiv+0x1e8>)
 8000cca:	2600      	movs	r6, #0
 8000ccc:	469c      	mov	ip, r3
 8000cce:	2300      	movs	r3, #0
 8000cd0:	4464      	add	r4, ip
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	032b      	lsls	r3, r5, #12
 8000cd6:	0b1b      	lsrs	r3, r3, #12
 8000cd8:	469b      	mov	fp, r3
 8000cda:	006b      	lsls	r3, r5, #1
 8000cdc:	0fed      	lsrs	r5, r5, #31
 8000cde:	4650      	mov	r0, sl
 8000ce0:	0d5b      	lsrs	r3, r3, #21
 8000ce2:	9501      	str	r5, [sp, #4]
 8000ce4:	d05e      	beq.n	8000da4 <__aeabi_ddiv+0x118>
 8000ce6:	4a62      	ldr	r2, [pc, #392]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d053      	beq.n	8000d94 <__aeabi_ddiv+0x108>
 8000cec:	465a      	mov	r2, fp
 8000cee:	00d1      	lsls	r1, r2, #3
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0f40      	lsrs	r0, r0, #29
 8000cf4:	0412      	lsls	r2, r2, #16
 8000cf6:	4302      	orrs	r2, r0
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	4693      	mov	fp, r2
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	00d1      	lsls	r1, r2, #3
 8000d00:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <__aeabi_ddiv+0x1e8>)
 8000d02:	4694      	mov	ip, r2
 8000d04:	2200      	movs	r2, #0
 8000d06:	4463      	add	r3, ip
 8000d08:	0038      	movs	r0, r7
 8000d0a:	4068      	eors	r0, r5
 8000d0c:	4684      	mov	ip, r0
 8000d0e:	9002      	str	r0, [sp, #8]
 8000d10:	1ae4      	subs	r4, r4, r3
 8000d12:	4316      	orrs	r6, r2
 8000d14:	2e0f      	cmp	r6, #15
 8000d16:	d900      	bls.n	8000d1a <__aeabi_ddiv+0x8e>
 8000d18:	e0b4      	b.n	8000e84 <__aeabi_ddiv+0x1f8>
 8000d1a:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <__aeabi_ddiv+0x1ec>)
 8000d1c:	00b6      	lsls	r6, r6, #2
 8000d1e:	599b      	ldr	r3, [r3, r6]
 8000d20:	469f      	mov	pc, r3
 8000d22:	0003      	movs	r3, r0
 8000d24:	4333      	orrs	r3, r6
 8000d26:	4699      	mov	r9, r3
 8000d28:	d16c      	bne.n	8000e04 <__aeabi_ddiv+0x178>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	3302      	adds	r3, #2
 8000d30:	2608      	movs	r6, #8
 8000d32:	9303      	str	r3, [sp, #12]
 8000d34:	e7ce      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000d36:	46cb      	mov	fp, r9
 8000d38:	4641      	mov	r1, r8
 8000d3a:	9a03      	ldr	r2, [sp, #12]
 8000d3c:	9701      	str	r7, [sp, #4]
 8000d3e:	2a02      	cmp	r2, #2
 8000d40:	d165      	bne.n	8000e0e <__aeabi_ddiv+0x182>
 8000d42:	9b01      	ldr	r3, [sp, #4]
 8000d44:	4c4a      	ldr	r4, [pc, #296]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000d46:	469c      	mov	ip, r3
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	e06b      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8000d50:	0003      	movs	r3, r0
 8000d52:	4333      	orrs	r3, r6
 8000d54:	4699      	mov	r9, r3
 8000d56:	d04e      	beq.n	8000df6 <__aeabi_ddiv+0x16a>
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0xd2>
 8000d5c:	e1bc      	b.n	80010d8 <__aeabi_ddiv+0x44c>
 8000d5e:	0030      	movs	r0, r6
 8000d60:	f001 fa0c 	bl	800217c <__clzsi2>
 8000d64:	0003      	movs	r3, r0
 8000d66:	3b0b      	subs	r3, #11
 8000d68:	2b1c      	cmp	r3, #28
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_ddiv+0xe2>
 8000d6c:	e1ac      	b.n	80010c8 <__aeabi_ddiv+0x43c>
 8000d6e:	221d      	movs	r2, #29
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	465a      	mov	r2, fp
 8000d74:	0001      	movs	r1, r0
 8000d76:	40da      	lsrs	r2, r3
 8000d78:	3908      	subs	r1, #8
 8000d7a:	408e      	lsls	r6, r1
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	4333      	orrs	r3, r6
 8000d80:	4699      	mov	r9, r3
 8000d82:	465b      	mov	r3, fp
 8000d84:	408b      	lsls	r3, r1
 8000d86:	4698      	mov	r8, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4c3c      	ldr	r4, [pc, #240]	; (8000e7c <__aeabi_ddiv+0x1f0>)
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	1a24      	subs	r4, r4, r0
 8000d90:	9303      	str	r3, [sp, #12]
 8000d92:	e79f      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000d94:	4651      	mov	r1, sl
 8000d96:	465a      	mov	r2, fp
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	d129      	bne.n	8000df0 <__aeabi_ddiv+0x164>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4693      	mov	fp, r2
 8000da0:	3202      	adds	r2, #2
 8000da2:	e7b1      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000da4:	4659      	mov	r1, fp
 8000da6:	4301      	orrs	r1, r0
 8000da8:	d01e      	beq.n	8000de8 <__aeabi_ddiv+0x15c>
 8000daa:	465b      	mov	r3, fp
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_ddiv+0x126>
 8000db0:	e19e      	b.n	80010f0 <__aeabi_ddiv+0x464>
 8000db2:	4658      	mov	r0, fp
 8000db4:	f001 f9e2 	bl	800217c <__clzsi2>
 8000db8:	0003      	movs	r3, r0
 8000dba:	3b0b      	subs	r3, #11
 8000dbc:	2b1c      	cmp	r3, #28
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_ddiv+0x136>
 8000dc0:	e18f      	b.n	80010e2 <__aeabi_ddiv+0x456>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	4659      	mov	r1, fp
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	468b      	mov	fp, r1
 8000dcc:	211d      	movs	r1, #29
 8000dce:	1acb      	subs	r3, r1, r3
 8000dd0:	4651      	mov	r1, sl
 8000dd2:	40d9      	lsrs	r1, r3
 8000dd4:	000b      	movs	r3, r1
 8000dd6:	4659      	mov	r1, fp
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	4651      	mov	r1, sl
 8000ddc:	469b      	mov	fp, r3
 8000dde:	4091      	lsls	r1, r2
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <__aeabi_ddiv+0x1f0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	1a1b      	subs	r3, r3, r0
 8000de6:	e78f      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000de8:	2300      	movs	r3, #0
 8000dea:	2201      	movs	r2, #1
 8000dec:	469b      	mov	fp, r3
 8000dee:	e78b      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000df0:	4651      	mov	r1, sl
 8000df2:	2203      	movs	r2, #3
 8000df4:	e788      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000df6:	2300      	movs	r3, #0
 8000df8:	4698      	mov	r8, r3
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	2604      	movs	r6, #4
 8000dfe:	2400      	movs	r4, #0
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	e767      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000e04:	2303      	movs	r3, #3
 8000e06:	46b1      	mov	r9, r6
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	260c      	movs	r6, #12
 8000e0c:	e762      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000e0e:	2a03      	cmp	r2, #3
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x188>
 8000e12:	e25c      	b.n	80012ce <__aeabi_ddiv+0x642>
 8000e14:	9b01      	ldr	r3, [sp, #4]
 8000e16:	2a01      	cmp	r2, #1
 8000e18:	d000      	beq.n	8000e1c <__aeabi_ddiv+0x190>
 8000e1a:	e1e4      	b.n	80011e6 <__aeabi_ddiv+0x55a>
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	469c      	mov	ip, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	2400      	movs	r4, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	4698      	mov	r8, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0312      	lsls	r2, r2, #12
 8000e2c:	0b13      	lsrs	r3, r2, #12
 8000e2e:	0d0a      	lsrs	r2, r1, #20
 8000e30:	0512      	lsls	r2, r2, #20
 8000e32:	431a      	orrs	r2, r3
 8000e34:	0523      	lsls	r3, r4, #20
 8000e36:	4c12      	ldr	r4, [pc, #72]	; (8000e80 <__aeabi_ddiv+0x1f4>)
 8000e38:	4640      	mov	r0, r8
 8000e3a:	4022      	ands	r2, r4
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	4662      	mov	r2, ip
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	07d2      	lsls	r2, r2, #31
 8000e44:	085b      	lsrs	r3, r3, #1
 8000e46:	4313      	orrs	r3, r2
 8000e48:	0019      	movs	r1, r3
 8000e4a:	b007      	add	sp, #28
 8000e4c:	bc3c      	pop	{r2, r3, r4, r5}
 8000e4e:	4690      	mov	r8, r2
 8000e50:	4699      	mov	r9, r3
 8000e52:	46a2      	mov	sl, r4
 8000e54:	46ab      	mov	fp, r5
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	0312      	lsls	r2, r2, #12
 8000e60:	4698      	mov	r8, r3
 8000e62:	4c03      	ldr	r4, [pc, #12]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000e64:	e7e0      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4c01      	ldr	r4, [pc, #4]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4698      	mov	r8, r3
 8000e6e:	e7db      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	fffffc01 	.word	0xfffffc01
 8000e78:	0800b2e4 	.word	0x0800b2e4
 8000e7c:	fffffc0d 	.word	0xfffffc0d
 8000e80:	800fffff 	.word	0x800fffff
 8000e84:	45d9      	cmp	r9, fp
 8000e86:	d900      	bls.n	8000e8a <__aeabi_ddiv+0x1fe>
 8000e88:	e139      	b.n	80010fe <__aeabi_ddiv+0x472>
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_ddiv+0x202>
 8000e8c:	e134      	b.n	80010f8 <__aeabi_ddiv+0x46c>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	4646      	mov	r6, r8
 8000e92:	464d      	mov	r5, r9
 8000e94:	469a      	mov	sl, r3
 8000e96:	3c01      	subs	r4, #1
 8000e98:	465b      	mov	r3, fp
 8000e9a:	0e0a      	lsrs	r2, r1, #24
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	020b      	lsls	r3, r1, #8
 8000ea2:	0c17      	lsrs	r7, r2, #16
 8000ea4:	9303      	str	r3, [sp, #12]
 8000ea6:	0413      	lsls	r3, r2, #16
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	0039      	movs	r1, r7
 8000eac:	0028      	movs	r0, r5
 8000eae:	4690      	mov	r8, r2
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	f7ff f929 	bl	8000108 <__udivsi3>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	9b01      	ldr	r3, [sp, #4]
 8000eba:	4683      	mov	fp, r0
 8000ebc:	435a      	muls	r2, r3
 8000ebe:	0028      	movs	r0, r5
 8000ec0:	0039      	movs	r1, r7
 8000ec2:	4691      	mov	r9, r2
 8000ec4:	f7ff f9a6 	bl	8000214 <__aeabi_uidivmod>
 8000ec8:	0c35      	lsrs	r5, r6, #16
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	430d      	orrs	r5, r1
 8000ece:	45a9      	cmp	r9, r5
 8000ed0:	d90d      	bls.n	8000eee <__aeabi_ddiv+0x262>
 8000ed2:	465b      	mov	r3, fp
 8000ed4:	4445      	add	r5, r8
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	45a8      	cmp	r8, r5
 8000eda:	d900      	bls.n	8000ede <__aeabi_ddiv+0x252>
 8000edc:	e13a      	b.n	8001154 <__aeabi_ddiv+0x4c8>
 8000ede:	45a9      	cmp	r9, r5
 8000ee0:	d800      	bhi.n	8000ee4 <__aeabi_ddiv+0x258>
 8000ee2:	e137      	b.n	8001154 <__aeabi_ddiv+0x4c8>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	469c      	mov	ip, r3
 8000eea:	4445      	add	r5, r8
 8000eec:	44e3      	add	fp, ip
 8000eee:	464b      	mov	r3, r9
 8000ef0:	1aeb      	subs	r3, r5, r3
 8000ef2:	0039      	movs	r1, r7
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	9304      	str	r3, [sp, #16]
 8000ef8:	f7ff f906 	bl	8000108 <__udivsi3>
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	0005      	movs	r5, r0
 8000f00:	4343      	muls	r3, r0
 8000f02:	0039      	movs	r1, r7
 8000f04:	9804      	ldr	r0, [sp, #16]
 8000f06:	4699      	mov	r9, r3
 8000f08:	f7ff f984 	bl	8000214 <__aeabi_uidivmod>
 8000f0c:	0433      	lsls	r3, r6, #16
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	430b      	orrs	r3, r1
 8000f14:	4599      	cmp	r9, r3
 8000f16:	d909      	bls.n	8000f2c <__aeabi_ddiv+0x2a0>
 8000f18:	4443      	add	r3, r8
 8000f1a:	1e6a      	subs	r2, r5, #1
 8000f1c:	4598      	cmp	r8, r3
 8000f1e:	d900      	bls.n	8000f22 <__aeabi_ddiv+0x296>
 8000f20:	e11a      	b.n	8001158 <__aeabi_ddiv+0x4cc>
 8000f22:	4599      	cmp	r9, r3
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x29c>
 8000f26:	e117      	b.n	8001158 <__aeabi_ddiv+0x4cc>
 8000f28:	3d02      	subs	r5, #2
 8000f2a:	4443      	add	r3, r8
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	465a      	mov	r2, fp
 8000f32:	0412      	lsls	r2, r2, #16
 8000f34:	432a      	orrs	r2, r5
 8000f36:	9903      	ldr	r1, [sp, #12]
 8000f38:	4693      	mov	fp, r2
 8000f3a:	0c10      	lsrs	r0, r2, #16
 8000f3c:	0c0a      	lsrs	r2, r1, #16
 8000f3e:	4691      	mov	r9, r2
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	465a      	mov	r2, fp
 8000f44:	0c09      	lsrs	r1, r1, #16
 8000f46:	464e      	mov	r6, r9
 8000f48:	000d      	movs	r5, r1
 8000f4a:	0412      	lsls	r2, r2, #16
 8000f4c:	0c12      	lsrs	r2, r2, #16
 8000f4e:	4345      	muls	r5, r0
 8000f50:	9105      	str	r1, [sp, #20]
 8000f52:	4351      	muls	r1, r2
 8000f54:	4372      	muls	r2, r6
 8000f56:	4370      	muls	r0, r6
 8000f58:	1952      	adds	r2, r2, r5
 8000f5a:	0c0e      	lsrs	r6, r1, #16
 8000f5c:	18b2      	adds	r2, r6, r2
 8000f5e:	4295      	cmp	r5, r2
 8000f60:	d903      	bls.n	8000f6a <__aeabi_ddiv+0x2de>
 8000f62:	2580      	movs	r5, #128	; 0x80
 8000f64:	026d      	lsls	r5, r5, #9
 8000f66:	46ac      	mov	ip, r5
 8000f68:	4460      	add	r0, ip
 8000f6a:	0c15      	lsrs	r5, r2, #16
 8000f6c:	0409      	lsls	r1, r1, #16
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	0c09      	lsrs	r1, r1, #16
 8000f72:	1828      	adds	r0, r5, r0
 8000f74:	1852      	adds	r2, r2, r1
 8000f76:	4283      	cmp	r3, r0
 8000f78:	d200      	bcs.n	8000f7c <__aeabi_ddiv+0x2f0>
 8000f7a:	e0ce      	b.n	800111a <__aeabi_ddiv+0x48e>
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x2f4>
 8000f7e:	e0c8      	b.n	8001112 <__aeabi_ddiv+0x486>
 8000f80:	1a1d      	subs	r5, r3, r0
 8000f82:	4653      	mov	r3, sl
 8000f84:	1a9e      	subs	r6, r3, r2
 8000f86:	45b2      	cmp	sl, r6
 8000f88:	4192      	sbcs	r2, r2
 8000f8a:	4252      	negs	r2, r2
 8000f8c:	1aab      	subs	r3, r5, r2
 8000f8e:	469a      	mov	sl, r3
 8000f90:	4598      	cmp	r8, r3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x30a>
 8000f94:	e117      	b.n	80011c6 <__aeabi_ddiv+0x53a>
 8000f96:	0039      	movs	r1, r7
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff f8b5 	bl	8000108 <__udivsi3>
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	0005      	movs	r5, r0
 8000fa2:	4343      	muls	r3, r0
 8000fa4:	0039      	movs	r1, r7
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	9304      	str	r3, [sp, #16]
 8000faa:	f7ff f933 	bl	8000214 <__aeabi_uidivmod>
 8000fae:	9804      	ldr	r0, [sp, #16]
 8000fb0:	040b      	lsls	r3, r1, #16
 8000fb2:	0c31      	lsrs	r1, r6, #16
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d909      	bls.n	8000fce <__aeabi_ddiv+0x342>
 8000fba:	4441      	add	r1, r8
 8000fbc:	1e6b      	subs	r3, r5, #1
 8000fbe:	4588      	cmp	r8, r1
 8000fc0:	d900      	bls.n	8000fc4 <__aeabi_ddiv+0x338>
 8000fc2:	e107      	b.n	80011d4 <__aeabi_ddiv+0x548>
 8000fc4:	4288      	cmp	r0, r1
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x33e>
 8000fc8:	e104      	b.n	80011d4 <__aeabi_ddiv+0x548>
 8000fca:	3d02      	subs	r5, #2
 8000fcc:	4441      	add	r1, r8
 8000fce:	9b04      	ldr	r3, [sp, #16]
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	0039      	movs	r1, r7
 8000fd6:	9304      	str	r3, [sp, #16]
 8000fd8:	f7ff f896 	bl	8000108 <__udivsi3>
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	4682      	mov	sl, r0
 8000fe0:	4343      	muls	r3, r0
 8000fe2:	0039      	movs	r1, r7
 8000fe4:	9804      	ldr	r0, [sp, #16]
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f7ff f914 	bl	8000214 <__aeabi_uidivmod>
 8000fec:	9801      	ldr	r0, [sp, #4]
 8000fee:	040b      	lsls	r3, r1, #16
 8000ff0:	0431      	lsls	r1, r6, #16
 8000ff2:	0c09      	lsrs	r1, r1, #16
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	4288      	cmp	r0, r1
 8000ff8:	d90d      	bls.n	8001016 <__aeabi_ddiv+0x38a>
 8000ffa:	4653      	mov	r3, sl
 8000ffc:	4441      	add	r1, r8
 8000ffe:	3b01      	subs	r3, #1
 8001000:	4588      	cmp	r8, r1
 8001002:	d900      	bls.n	8001006 <__aeabi_ddiv+0x37a>
 8001004:	e0e8      	b.n	80011d8 <__aeabi_ddiv+0x54c>
 8001006:	4288      	cmp	r0, r1
 8001008:	d800      	bhi.n	800100c <__aeabi_ddiv+0x380>
 800100a:	e0e5      	b.n	80011d8 <__aeabi_ddiv+0x54c>
 800100c:	2302      	movs	r3, #2
 800100e:	425b      	negs	r3, r3
 8001010:	469c      	mov	ip, r3
 8001012:	4441      	add	r1, r8
 8001014:	44e2      	add	sl, ip
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	042d      	lsls	r5, r5, #16
 800101a:	1ace      	subs	r6, r1, r3
 800101c:	4651      	mov	r1, sl
 800101e:	4329      	orrs	r1, r5
 8001020:	9d05      	ldr	r5, [sp, #20]
 8001022:	464f      	mov	r7, r9
 8001024:	002a      	movs	r2, r5
 8001026:	040b      	lsls	r3, r1, #16
 8001028:	0c08      	lsrs	r0, r1, #16
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	435a      	muls	r2, r3
 800102e:	4345      	muls	r5, r0
 8001030:	437b      	muls	r3, r7
 8001032:	4378      	muls	r0, r7
 8001034:	195b      	adds	r3, r3, r5
 8001036:	0c17      	lsrs	r7, r2, #16
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	429d      	cmp	r5, r3
 800103c:	d903      	bls.n	8001046 <__aeabi_ddiv+0x3ba>
 800103e:	2580      	movs	r5, #128	; 0x80
 8001040:	026d      	lsls	r5, r5, #9
 8001042:	46ac      	mov	ip, r5
 8001044:	4460      	add	r0, ip
 8001046:	0c1d      	lsrs	r5, r3, #16
 8001048:	0412      	lsls	r2, r2, #16
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	0c12      	lsrs	r2, r2, #16
 800104e:	1828      	adds	r0, r5, r0
 8001050:	189b      	adds	r3, r3, r2
 8001052:	4286      	cmp	r6, r0
 8001054:	d200      	bcs.n	8001058 <__aeabi_ddiv+0x3cc>
 8001056:	e093      	b.n	8001180 <__aeabi_ddiv+0x4f4>
 8001058:	d100      	bne.n	800105c <__aeabi_ddiv+0x3d0>
 800105a:	e08e      	b.n	800117a <__aeabi_ddiv+0x4ee>
 800105c:	2301      	movs	r3, #1
 800105e:	4319      	orrs	r1, r3
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <__aeabi_ddiv+0x658>)
 8001062:	18e3      	adds	r3, r4, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	dc00      	bgt.n	800106a <__aeabi_ddiv+0x3de>
 8001068:	e099      	b.n	800119e <__aeabi_ddiv+0x512>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	d000      	beq.n	8001070 <__aeabi_ddiv+0x3e4>
 800106e:	e09e      	b.n	80011ae <__aeabi_ddiv+0x522>
 8001070:	465a      	mov	r2, fp
 8001072:	01d2      	lsls	r2, r2, #7
 8001074:	d506      	bpl.n	8001084 <__aeabi_ddiv+0x3f8>
 8001076:	465a      	mov	r2, fp
 8001078:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <__aeabi_ddiv+0x65c>)
 800107a:	401a      	ands	r2, r3
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	4693      	mov	fp, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	18e3      	adds	r3, r4, r3
 8001084:	4a99      	ldr	r2, [pc, #612]	; (80012ec <__aeabi_ddiv+0x660>)
 8001086:	4293      	cmp	r3, r2
 8001088:	dd68      	ble.n	800115c <__aeabi_ddiv+0x4d0>
 800108a:	2301      	movs	r3, #1
 800108c:	9a02      	ldr	r2, [sp, #8]
 800108e:	4c98      	ldr	r4, [pc, #608]	; (80012f0 <__aeabi_ddiv+0x664>)
 8001090:	401a      	ands	r2, r3
 8001092:	2300      	movs	r3, #0
 8001094:	4694      	mov	ip, r2
 8001096:	4698      	mov	r8, r3
 8001098:	2200      	movs	r2, #0
 800109a:	e6c5      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	464b      	mov	r3, r9
 80010a0:	0312      	lsls	r2, r2, #12
 80010a2:	4213      	tst	r3, r2
 80010a4:	d00a      	beq.n	80010bc <__aeabi_ddiv+0x430>
 80010a6:	465b      	mov	r3, fp
 80010a8:	4213      	tst	r3, r2
 80010aa:	d106      	bne.n	80010ba <__aeabi_ddiv+0x42e>
 80010ac:	431a      	orrs	r2, r3
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	0b12      	lsrs	r2, r2, #12
 80010b2:	46ac      	mov	ip, r5
 80010b4:	4688      	mov	r8, r1
 80010b6:	4c8e      	ldr	r4, [pc, #568]	; (80012f0 <__aeabi_ddiv+0x664>)
 80010b8:	e6b6      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80010ba:	464b      	mov	r3, r9
 80010bc:	431a      	orrs	r2, r3
 80010be:	0312      	lsls	r2, r2, #12
 80010c0:	0b12      	lsrs	r2, r2, #12
 80010c2:	46bc      	mov	ip, r7
 80010c4:	4c8a      	ldr	r4, [pc, #552]	; (80012f0 <__aeabi_ddiv+0x664>)
 80010c6:	e6af      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80010c8:	0003      	movs	r3, r0
 80010ca:	465a      	mov	r2, fp
 80010cc:	3b28      	subs	r3, #40	; 0x28
 80010ce:	409a      	lsls	r2, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	4691      	mov	r9, r2
 80010d4:	4698      	mov	r8, r3
 80010d6:	e657      	b.n	8000d88 <__aeabi_ddiv+0xfc>
 80010d8:	4658      	mov	r0, fp
 80010da:	f001 f84f 	bl	800217c <__clzsi2>
 80010de:	3020      	adds	r0, #32
 80010e0:	e640      	b.n	8000d64 <__aeabi_ddiv+0xd8>
 80010e2:	0003      	movs	r3, r0
 80010e4:	4652      	mov	r2, sl
 80010e6:	3b28      	subs	r3, #40	; 0x28
 80010e8:	409a      	lsls	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	4693      	mov	fp, r2
 80010ee:	e677      	b.n	8000de0 <__aeabi_ddiv+0x154>
 80010f0:	f001 f844 	bl	800217c <__clzsi2>
 80010f4:	3020      	adds	r0, #32
 80010f6:	e65f      	b.n	8000db8 <__aeabi_ddiv+0x12c>
 80010f8:	4588      	cmp	r8, r1
 80010fa:	d200      	bcs.n	80010fe <__aeabi_ddiv+0x472>
 80010fc:	e6c7      	b.n	8000e8e <__aeabi_ddiv+0x202>
 80010fe:	464b      	mov	r3, r9
 8001100:	07de      	lsls	r6, r3, #31
 8001102:	085d      	lsrs	r5, r3, #1
 8001104:	4643      	mov	r3, r8
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	431e      	orrs	r6, r3
 800110a:	4643      	mov	r3, r8
 800110c:	07db      	lsls	r3, r3, #31
 800110e:	469a      	mov	sl, r3
 8001110:	e6c2      	b.n	8000e98 <__aeabi_ddiv+0x20c>
 8001112:	2500      	movs	r5, #0
 8001114:	4592      	cmp	sl, r2
 8001116:	d300      	bcc.n	800111a <__aeabi_ddiv+0x48e>
 8001118:	e733      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 800111a:	9e03      	ldr	r6, [sp, #12]
 800111c:	4659      	mov	r1, fp
 800111e:	46b4      	mov	ip, r6
 8001120:	44e2      	add	sl, ip
 8001122:	45b2      	cmp	sl, r6
 8001124:	41ad      	sbcs	r5, r5
 8001126:	426d      	negs	r5, r5
 8001128:	4445      	add	r5, r8
 800112a:	18eb      	adds	r3, r5, r3
 800112c:	3901      	subs	r1, #1
 800112e:	4598      	cmp	r8, r3
 8001130:	d207      	bcs.n	8001142 <__aeabi_ddiv+0x4b6>
 8001132:	4298      	cmp	r0, r3
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x4ac>
 8001136:	e07f      	b.n	8001238 <__aeabi_ddiv+0x5ac>
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x4b0>
 800113a:	e0bc      	b.n	80012b6 <__aeabi_ddiv+0x62a>
 800113c:	1a1d      	subs	r5, r3, r0
 800113e:	468b      	mov	fp, r1
 8001140:	e71f      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 8001142:	4598      	cmp	r8, r3
 8001144:	d1fa      	bne.n	800113c <__aeabi_ddiv+0x4b0>
 8001146:	9d03      	ldr	r5, [sp, #12]
 8001148:	4555      	cmp	r5, sl
 800114a:	d9f2      	bls.n	8001132 <__aeabi_ddiv+0x4a6>
 800114c:	4643      	mov	r3, r8
 800114e:	468b      	mov	fp, r1
 8001150:	1a1d      	subs	r5, r3, r0
 8001152:	e716      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 8001154:	469b      	mov	fp, r3
 8001156:	e6ca      	b.n	8000eee <__aeabi_ddiv+0x262>
 8001158:	0015      	movs	r5, r2
 800115a:	e6e7      	b.n	8000f2c <__aeabi_ddiv+0x2a0>
 800115c:	465a      	mov	r2, fp
 800115e:	08c9      	lsrs	r1, r1, #3
 8001160:	0752      	lsls	r2, r2, #29
 8001162:	430a      	orrs	r2, r1
 8001164:	055b      	lsls	r3, r3, #21
 8001166:	4690      	mov	r8, r2
 8001168:	0d5c      	lsrs	r4, r3, #21
 800116a:	465a      	mov	r2, fp
 800116c:	2301      	movs	r3, #1
 800116e:	9902      	ldr	r1, [sp, #8]
 8001170:	0252      	lsls	r2, r2, #9
 8001172:	4019      	ands	r1, r3
 8001174:	0b12      	lsrs	r2, r2, #12
 8001176:	468c      	mov	ip, r1
 8001178:	e656      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_ddiv+0x4f4>
 800117e:	e76f      	b.n	8001060 <__aeabi_ddiv+0x3d4>
 8001180:	4446      	add	r6, r8
 8001182:	1e4a      	subs	r2, r1, #1
 8001184:	45b0      	cmp	r8, r6
 8001186:	d929      	bls.n	80011dc <__aeabi_ddiv+0x550>
 8001188:	0011      	movs	r1, r2
 800118a:	4286      	cmp	r6, r0
 800118c:	d000      	beq.n	8001190 <__aeabi_ddiv+0x504>
 800118e:	e765      	b.n	800105c <__aeabi_ddiv+0x3d0>
 8001190:	9a03      	ldr	r2, [sp, #12]
 8001192:	4293      	cmp	r3, r2
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x50c>
 8001196:	e761      	b.n	800105c <__aeabi_ddiv+0x3d0>
 8001198:	e762      	b.n	8001060 <__aeabi_ddiv+0x3d4>
 800119a:	2101      	movs	r1, #1
 800119c:	4249      	negs	r1, r1
 800119e:	2001      	movs	r0, #1
 80011a0:	1ac2      	subs	r2, r0, r3
 80011a2:	2a38      	cmp	r2, #56	; 0x38
 80011a4:	dd21      	ble.n	80011ea <__aeabi_ddiv+0x55e>
 80011a6:	9b02      	ldr	r3, [sp, #8]
 80011a8:	4003      	ands	r3, r0
 80011aa:	469c      	mov	ip, r3
 80011ac:	e638      	b.n	8000e20 <__aeabi_ddiv+0x194>
 80011ae:	220f      	movs	r2, #15
 80011b0:	400a      	ands	r2, r1
 80011b2:	2a04      	cmp	r2, #4
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x52c>
 80011b6:	e75b      	b.n	8001070 <__aeabi_ddiv+0x3e4>
 80011b8:	000a      	movs	r2, r1
 80011ba:	1d11      	adds	r1, r2, #4
 80011bc:	4291      	cmp	r1, r2
 80011be:	4192      	sbcs	r2, r2
 80011c0:	4252      	negs	r2, r2
 80011c2:	4493      	add	fp, r2
 80011c4:	e754      	b.n	8001070 <__aeabi_ddiv+0x3e4>
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <__aeabi_ddiv+0x658>)
 80011c8:	18e3      	adds	r3, r4, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dde5      	ble.n	800119a <__aeabi_ddiv+0x50e>
 80011ce:	2201      	movs	r2, #1
 80011d0:	4252      	negs	r2, r2
 80011d2:	e7f2      	b.n	80011ba <__aeabi_ddiv+0x52e>
 80011d4:	001d      	movs	r5, r3
 80011d6:	e6fa      	b.n	8000fce <__aeabi_ddiv+0x342>
 80011d8:	469a      	mov	sl, r3
 80011da:	e71c      	b.n	8001016 <__aeabi_ddiv+0x38a>
 80011dc:	42b0      	cmp	r0, r6
 80011de:	d839      	bhi.n	8001254 <__aeabi_ddiv+0x5c8>
 80011e0:	d06e      	beq.n	80012c0 <__aeabi_ddiv+0x634>
 80011e2:	0011      	movs	r1, r2
 80011e4:	e73a      	b.n	800105c <__aeabi_ddiv+0x3d0>
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	e73a      	b.n	8001060 <__aeabi_ddiv+0x3d4>
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dc3c      	bgt.n	8001268 <__aeabi_ddiv+0x5dc>
 80011ee:	2320      	movs	r3, #32
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	000c      	movs	r4, r1
 80011f4:	4658      	mov	r0, fp
 80011f6:	4099      	lsls	r1, r3
 80011f8:	4098      	lsls	r0, r3
 80011fa:	1e4b      	subs	r3, r1, #1
 80011fc:	4199      	sbcs	r1, r3
 80011fe:	465b      	mov	r3, fp
 8001200:	40d4      	lsrs	r4, r2
 8001202:	40d3      	lsrs	r3, r2
 8001204:	4320      	orrs	r0, r4
 8001206:	4308      	orrs	r0, r1
 8001208:	001a      	movs	r2, r3
 800120a:	0743      	lsls	r3, r0, #29
 800120c:	d009      	beq.n	8001222 <__aeabi_ddiv+0x596>
 800120e:	230f      	movs	r3, #15
 8001210:	4003      	ands	r3, r0
 8001212:	2b04      	cmp	r3, #4
 8001214:	d005      	beq.n	8001222 <__aeabi_ddiv+0x596>
 8001216:	0001      	movs	r1, r0
 8001218:	1d08      	adds	r0, r1, #4
 800121a:	4288      	cmp	r0, r1
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	18d2      	adds	r2, r2, r3
 8001222:	0213      	lsls	r3, r2, #8
 8001224:	d53a      	bpl.n	800129c <__aeabi_ddiv+0x610>
 8001226:	2301      	movs	r3, #1
 8001228:	9a02      	ldr	r2, [sp, #8]
 800122a:	2401      	movs	r4, #1
 800122c:	401a      	ands	r2, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4694      	mov	ip, r2
 8001232:	4698      	mov	r8, r3
 8001234:	2200      	movs	r2, #0
 8001236:	e5f7      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8001238:	2102      	movs	r1, #2
 800123a:	4249      	negs	r1, r1
 800123c:	468c      	mov	ip, r1
 800123e:	9d03      	ldr	r5, [sp, #12]
 8001240:	44e3      	add	fp, ip
 8001242:	46ac      	mov	ip, r5
 8001244:	44e2      	add	sl, ip
 8001246:	45aa      	cmp	sl, r5
 8001248:	41ad      	sbcs	r5, r5
 800124a:	426d      	negs	r5, r5
 800124c:	4445      	add	r5, r8
 800124e:	18ed      	adds	r5, r5, r3
 8001250:	1a2d      	subs	r5, r5, r0
 8001252:	e696      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 8001254:	1e8a      	subs	r2, r1, #2
 8001256:	9903      	ldr	r1, [sp, #12]
 8001258:	004d      	lsls	r5, r1, #1
 800125a:	428d      	cmp	r5, r1
 800125c:	4189      	sbcs	r1, r1
 800125e:	4249      	negs	r1, r1
 8001260:	4441      	add	r1, r8
 8001262:	1876      	adds	r6, r6, r1
 8001264:	9503      	str	r5, [sp, #12]
 8001266:	e78f      	b.n	8001188 <__aeabi_ddiv+0x4fc>
 8001268:	201f      	movs	r0, #31
 800126a:	4240      	negs	r0, r0
 800126c:	1ac3      	subs	r3, r0, r3
 800126e:	4658      	mov	r0, fp
 8001270:	40d8      	lsrs	r0, r3
 8001272:	0003      	movs	r3, r0
 8001274:	2a20      	cmp	r2, #32
 8001276:	d028      	beq.n	80012ca <__aeabi_ddiv+0x63e>
 8001278:	2040      	movs	r0, #64	; 0x40
 800127a:	465d      	mov	r5, fp
 800127c:	1a82      	subs	r2, r0, r2
 800127e:	4095      	lsls	r5, r2
 8001280:	4329      	orrs	r1, r5
 8001282:	1e4a      	subs	r2, r1, #1
 8001284:	4191      	sbcs	r1, r2
 8001286:	4319      	orrs	r1, r3
 8001288:	2307      	movs	r3, #7
 800128a:	2200      	movs	r2, #0
 800128c:	400b      	ands	r3, r1
 800128e:	d009      	beq.n	80012a4 <__aeabi_ddiv+0x618>
 8001290:	230f      	movs	r3, #15
 8001292:	2200      	movs	r2, #0
 8001294:	400b      	ands	r3, r1
 8001296:	0008      	movs	r0, r1
 8001298:	2b04      	cmp	r3, #4
 800129a:	d1bd      	bne.n	8001218 <__aeabi_ddiv+0x58c>
 800129c:	0001      	movs	r1, r0
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	0252      	lsls	r2, r2, #9
 80012a2:	0b12      	lsrs	r2, r2, #12
 80012a4:	08c9      	lsrs	r1, r1, #3
 80012a6:	4319      	orrs	r1, r3
 80012a8:	2301      	movs	r3, #1
 80012aa:	4688      	mov	r8, r1
 80012ac:	9902      	ldr	r1, [sp, #8]
 80012ae:	2400      	movs	r4, #0
 80012b0:	4019      	ands	r1, r3
 80012b2:	468c      	mov	ip, r1
 80012b4:	e5b8      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80012b6:	4552      	cmp	r2, sl
 80012b8:	d8be      	bhi.n	8001238 <__aeabi_ddiv+0x5ac>
 80012ba:	468b      	mov	fp, r1
 80012bc:	2500      	movs	r5, #0
 80012be:	e660      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 80012c0:	9d03      	ldr	r5, [sp, #12]
 80012c2:	429d      	cmp	r5, r3
 80012c4:	d3c6      	bcc.n	8001254 <__aeabi_ddiv+0x5c8>
 80012c6:	0011      	movs	r1, r2
 80012c8:	e762      	b.n	8001190 <__aeabi_ddiv+0x504>
 80012ca:	2500      	movs	r5, #0
 80012cc:	e7d8      	b.n	8001280 <__aeabi_ddiv+0x5f4>
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	465b      	mov	r3, fp
 80012d2:	0312      	lsls	r2, r2, #12
 80012d4:	431a      	orrs	r2, r3
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	0312      	lsls	r2, r2, #12
 80012da:	0b12      	lsrs	r2, r2, #12
 80012dc:	469c      	mov	ip, r3
 80012de:	4688      	mov	r8, r1
 80012e0:	4c03      	ldr	r4, [pc, #12]	; (80012f0 <__aeabi_ddiv+0x664>)
 80012e2:	e5a1      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80012e4:	000003ff 	.word	0x000003ff
 80012e8:	feffffff 	.word	0xfeffffff
 80012ec:	000007fe 	.word	0x000007fe
 80012f0:	000007ff 	.word	0x000007ff

080012f4 <__eqdf2>:
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	464f      	mov	r7, r9
 80012f8:	4646      	mov	r6, r8
 80012fa:	46d6      	mov	lr, sl
 80012fc:	005c      	lsls	r4, r3, #1
 80012fe:	b5c0      	push	{r6, r7, lr}
 8001300:	031f      	lsls	r7, r3, #12
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469a      	mov	sl, r3
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <__eqdf2+0x70>)
 8001308:	030e      	lsls	r6, r1, #12
 800130a:	004d      	lsls	r5, r1, #1
 800130c:	4684      	mov	ip, r0
 800130e:	4680      	mov	r8, r0
 8001310:	0b36      	lsrs	r6, r6, #12
 8001312:	0d6d      	lsrs	r5, r5, #21
 8001314:	0fc9      	lsrs	r1, r1, #31
 8001316:	4691      	mov	r9, r2
 8001318:	0b3f      	lsrs	r7, r7, #12
 800131a:	0d64      	lsrs	r4, r4, #21
 800131c:	2001      	movs	r0, #1
 800131e:	429d      	cmp	r5, r3
 8001320:	d008      	beq.n	8001334 <__eqdf2+0x40>
 8001322:	429c      	cmp	r4, r3
 8001324:	d001      	beq.n	800132a <__eqdf2+0x36>
 8001326:	42a5      	cmp	r5, r4
 8001328:	d00b      	beq.n	8001342 <__eqdf2+0x4e>
 800132a:	bc1c      	pop	{r2, r3, r4}
 800132c:	4690      	mov	r8, r2
 800132e:	4699      	mov	r9, r3
 8001330:	46a2      	mov	sl, r4
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	4663      	mov	r3, ip
 8001336:	4333      	orrs	r3, r6
 8001338:	d1f7      	bne.n	800132a <__eqdf2+0x36>
 800133a:	42ac      	cmp	r4, r5
 800133c:	d1f5      	bne.n	800132a <__eqdf2+0x36>
 800133e:	433a      	orrs	r2, r7
 8001340:	d1f3      	bne.n	800132a <__eqdf2+0x36>
 8001342:	2001      	movs	r0, #1
 8001344:	42be      	cmp	r6, r7
 8001346:	d1f0      	bne.n	800132a <__eqdf2+0x36>
 8001348:	45c8      	cmp	r8, r9
 800134a:	d1ee      	bne.n	800132a <__eqdf2+0x36>
 800134c:	4551      	cmp	r1, sl
 800134e:	d007      	beq.n	8001360 <__eqdf2+0x6c>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d1ea      	bne.n	800132a <__eqdf2+0x36>
 8001354:	4663      	mov	r3, ip
 8001356:	431e      	orrs	r6, r3
 8001358:	0030      	movs	r0, r6
 800135a:	1e46      	subs	r6, r0, #1
 800135c:	41b0      	sbcs	r0, r6
 800135e:	e7e4      	b.n	800132a <__eqdf2+0x36>
 8001360:	2000      	movs	r0, #0
 8001362:	e7e2      	b.n	800132a <__eqdf2+0x36>
 8001364:	000007ff 	.word	0x000007ff

08001368 <__gedf2>:
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	4645      	mov	r5, r8
 800136c:	46de      	mov	lr, fp
 800136e:	4657      	mov	r7, sl
 8001370:	464e      	mov	r6, r9
 8001372:	b5e0      	push	{r5, r6, r7, lr}
 8001374:	031f      	lsls	r7, r3, #12
 8001376:	0b3d      	lsrs	r5, r7, #12
 8001378:	4f2c      	ldr	r7, [pc, #176]	; (800142c <__gedf2+0xc4>)
 800137a:	030e      	lsls	r6, r1, #12
 800137c:	004c      	lsls	r4, r1, #1
 800137e:	46ab      	mov	fp, r5
 8001380:	005d      	lsls	r5, r3, #1
 8001382:	4684      	mov	ip, r0
 8001384:	0b36      	lsrs	r6, r6, #12
 8001386:	0d64      	lsrs	r4, r4, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	4690      	mov	r8, r2
 800138c:	0d6d      	lsrs	r5, r5, #21
 800138e:	0fdb      	lsrs	r3, r3, #31
 8001390:	42bc      	cmp	r4, r7
 8001392:	d02a      	beq.n	80013ea <__gedf2+0x82>
 8001394:	4f25      	ldr	r7, [pc, #148]	; (800142c <__gedf2+0xc4>)
 8001396:	42bd      	cmp	r5, r7
 8001398:	d02d      	beq.n	80013f6 <__gedf2+0x8e>
 800139a:	2c00      	cmp	r4, #0
 800139c:	d10f      	bne.n	80013be <__gedf2+0x56>
 800139e:	4330      	orrs	r0, r6
 80013a0:	0007      	movs	r7, r0
 80013a2:	4681      	mov	r9, r0
 80013a4:	4278      	negs	r0, r7
 80013a6:	4178      	adcs	r0, r7
 80013a8:	b2c0      	uxtb	r0, r0
 80013aa:	2d00      	cmp	r5, #0
 80013ac:	d117      	bne.n	80013de <__gedf2+0x76>
 80013ae:	465f      	mov	r7, fp
 80013b0:	433a      	orrs	r2, r7
 80013b2:	d114      	bne.n	80013de <__gedf2+0x76>
 80013b4:	464b      	mov	r3, r9
 80013b6:	2000      	movs	r0, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00a      	beq.n	80013d2 <__gedf2+0x6a>
 80013bc:	e006      	b.n	80013cc <__gedf2+0x64>
 80013be:	2d00      	cmp	r5, #0
 80013c0:	d102      	bne.n	80013c8 <__gedf2+0x60>
 80013c2:	4658      	mov	r0, fp
 80013c4:	4302      	orrs	r2, r0
 80013c6:	d001      	beq.n	80013cc <__gedf2+0x64>
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d018      	beq.n	80013fe <__gedf2+0x96>
 80013cc:	4248      	negs	r0, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	4308      	orrs	r0, r1
 80013d2:	bc3c      	pop	{r2, r3, r4, r5}
 80013d4:	4690      	mov	r8, r2
 80013d6:	4699      	mov	r9, r3
 80013d8:	46a2      	mov	sl, r4
 80013da:	46ab      	mov	fp, r5
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0f2      	beq.n	80013c8 <__gedf2+0x60>
 80013e2:	2001      	movs	r0, #1
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4318      	orrs	r0, r3
 80013e8:	e7f3      	b.n	80013d2 <__gedf2+0x6a>
 80013ea:	0037      	movs	r7, r6
 80013ec:	4307      	orrs	r7, r0
 80013ee:	d0d1      	beq.n	8001394 <__gedf2+0x2c>
 80013f0:	2002      	movs	r0, #2
 80013f2:	4240      	negs	r0, r0
 80013f4:	e7ed      	b.n	80013d2 <__gedf2+0x6a>
 80013f6:	465f      	mov	r7, fp
 80013f8:	4317      	orrs	r7, r2
 80013fa:	d0ce      	beq.n	800139a <__gedf2+0x32>
 80013fc:	e7f8      	b.n	80013f0 <__gedf2+0x88>
 80013fe:	42ac      	cmp	r4, r5
 8001400:	dce4      	bgt.n	80013cc <__gedf2+0x64>
 8001402:	da03      	bge.n	800140c <__gedf2+0xa4>
 8001404:	1e48      	subs	r0, r1, #1
 8001406:	2101      	movs	r1, #1
 8001408:	4308      	orrs	r0, r1
 800140a:	e7e2      	b.n	80013d2 <__gedf2+0x6a>
 800140c:	455e      	cmp	r6, fp
 800140e:	d8dd      	bhi.n	80013cc <__gedf2+0x64>
 8001410:	d006      	beq.n	8001420 <__gedf2+0xb8>
 8001412:	2000      	movs	r0, #0
 8001414:	455e      	cmp	r6, fp
 8001416:	d2dc      	bcs.n	80013d2 <__gedf2+0x6a>
 8001418:	2301      	movs	r3, #1
 800141a:	1e48      	subs	r0, r1, #1
 800141c:	4318      	orrs	r0, r3
 800141e:	e7d8      	b.n	80013d2 <__gedf2+0x6a>
 8001420:	45c4      	cmp	ip, r8
 8001422:	d8d3      	bhi.n	80013cc <__gedf2+0x64>
 8001424:	2000      	movs	r0, #0
 8001426:	45c4      	cmp	ip, r8
 8001428:	d3f6      	bcc.n	8001418 <__gedf2+0xb0>
 800142a:	e7d2      	b.n	80013d2 <__gedf2+0x6a>
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	464e      	mov	r6, r9
 8001434:	4645      	mov	r5, r8
 8001436:	46de      	mov	lr, fp
 8001438:	4657      	mov	r7, sl
 800143a:	005c      	lsls	r4, r3, #1
 800143c:	b5e0      	push	{r5, r6, r7, lr}
 800143e:	031f      	lsls	r7, r3, #12
 8001440:	0fdb      	lsrs	r3, r3, #31
 8001442:	4699      	mov	r9, r3
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <__ledf2+0xc0>)
 8001446:	030e      	lsls	r6, r1, #12
 8001448:	004d      	lsls	r5, r1, #1
 800144a:	0fc9      	lsrs	r1, r1, #31
 800144c:	4684      	mov	ip, r0
 800144e:	0b36      	lsrs	r6, r6, #12
 8001450:	0d6d      	lsrs	r5, r5, #21
 8001452:	468b      	mov	fp, r1
 8001454:	4690      	mov	r8, r2
 8001456:	0b3f      	lsrs	r7, r7, #12
 8001458:	0d64      	lsrs	r4, r4, #21
 800145a:	429d      	cmp	r5, r3
 800145c:	d020      	beq.n	80014a0 <__ledf2+0x70>
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <__ledf2+0xc0>)
 8001460:	429c      	cmp	r4, r3
 8001462:	d022      	beq.n	80014aa <__ledf2+0x7a>
 8001464:	2d00      	cmp	r5, #0
 8001466:	d112      	bne.n	800148e <__ledf2+0x5e>
 8001468:	4330      	orrs	r0, r6
 800146a:	4243      	negs	r3, r0
 800146c:	4143      	adcs	r3, r0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2c00      	cmp	r4, #0
 8001472:	d01f      	beq.n	80014b4 <__ledf2+0x84>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <__ledf2+0x62>
 8001478:	464b      	mov	r3, r9
 800147a:	2001      	movs	r0, #1
 800147c:	3b01      	subs	r3, #1
 800147e:	4303      	orrs	r3, r0
 8001480:	0018      	movs	r0, r3
 8001482:	bc3c      	pop	{r2, r3, r4, r5}
 8001484:	4690      	mov	r8, r2
 8001486:	4699      	mov	r9, r3
 8001488:	46a2      	mov	sl, r4
 800148a:	46ab      	mov	fp, r5
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	2c00      	cmp	r4, #0
 8001490:	d016      	beq.n	80014c0 <__ledf2+0x90>
 8001492:	45cb      	cmp	fp, r9
 8001494:	d017      	beq.n	80014c6 <__ledf2+0x96>
 8001496:	465b      	mov	r3, fp
 8001498:	4259      	negs	r1, r3
 800149a:	2301      	movs	r3, #1
 800149c:	430b      	orrs	r3, r1
 800149e:	e7ef      	b.n	8001480 <__ledf2+0x50>
 80014a0:	0031      	movs	r1, r6
 80014a2:	2302      	movs	r3, #2
 80014a4:	4301      	orrs	r1, r0
 80014a6:	d1eb      	bne.n	8001480 <__ledf2+0x50>
 80014a8:	e7d9      	b.n	800145e <__ledf2+0x2e>
 80014aa:	0039      	movs	r1, r7
 80014ac:	2302      	movs	r3, #2
 80014ae:	4311      	orrs	r1, r2
 80014b0:	d1e6      	bne.n	8001480 <__ledf2+0x50>
 80014b2:	e7d7      	b.n	8001464 <__ledf2+0x34>
 80014b4:	433a      	orrs	r2, r7
 80014b6:	d1dd      	bne.n	8001474 <__ledf2+0x44>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d0e0      	beq.n	8001480 <__ledf2+0x50>
 80014be:	e7ea      	b.n	8001496 <__ledf2+0x66>
 80014c0:	433a      	orrs	r2, r7
 80014c2:	d1e6      	bne.n	8001492 <__ledf2+0x62>
 80014c4:	e7e7      	b.n	8001496 <__ledf2+0x66>
 80014c6:	42a5      	cmp	r5, r4
 80014c8:	dce5      	bgt.n	8001496 <__ledf2+0x66>
 80014ca:	db05      	blt.n	80014d8 <__ledf2+0xa8>
 80014cc:	42be      	cmp	r6, r7
 80014ce:	d8e2      	bhi.n	8001496 <__ledf2+0x66>
 80014d0:	d007      	beq.n	80014e2 <__ledf2+0xb2>
 80014d2:	2300      	movs	r3, #0
 80014d4:	42be      	cmp	r6, r7
 80014d6:	d2d3      	bcs.n	8001480 <__ledf2+0x50>
 80014d8:	4659      	mov	r1, fp
 80014da:	2301      	movs	r3, #1
 80014dc:	3901      	subs	r1, #1
 80014de:	430b      	orrs	r3, r1
 80014e0:	e7ce      	b.n	8001480 <__ledf2+0x50>
 80014e2:	45c4      	cmp	ip, r8
 80014e4:	d8d7      	bhi.n	8001496 <__ledf2+0x66>
 80014e6:	2300      	movs	r3, #0
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d3f5      	bcc.n	80014d8 <__ledf2+0xa8>
 80014ec:	e7c8      	b.n	8001480 <__ledf2+0x50>
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__aeabi_dmul>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	4657      	mov	r7, sl
 80014f8:	4645      	mov	r5, r8
 80014fa:	46de      	mov	lr, fp
 80014fc:	464e      	mov	r6, r9
 80014fe:	b5e0      	push	{r5, r6, r7, lr}
 8001500:	030c      	lsls	r4, r1, #12
 8001502:	4698      	mov	r8, r3
 8001504:	004e      	lsls	r6, r1, #1
 8001506:	0b23      	lsrs	r3, r4, #12
 8001508:	b087      	sub	sp, #28
 800150a:	0007      	movs	r7, r0
 800150c:	4692      	mov	sl, r2
 800150e:	469b      	mov	fp, r3
 8001510:	0d76      	lsrs	r6, r6, #21
 8001512:	0fcd      	lsrs	r5, r1, #31
 8001514:	2e00      	cmp	r6, #0
 8001516:	d06b      	beq.n	80015f0 <__aeabi_dmul+0xfc>
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <__aeabi_dmul+0x1dc>)
 800151a:	429e      	cmp	r6, r3
 800151c:	d035      	beq.n	800158a <__aeabi_dmul+0x96>
 800151e:	2480      	movs	r4, #128	; 0x80
 8001520:	465b      	mov	r3, fp
 8001522:	0f42      	lsrs	r2, r0, #29
 8001524:	0424      	lsls	r4, r4, #16
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	431c      	orrs	r4, r3
 800152c:	00c3      	lsls	r3, r0, #3
 800152e:	4699      	mov	r9, r3
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <__aeabi_dmul+0x1e0>)
 8001532:	46a3      	mov	fp, r4
 8001534:	469c      	mov	ip, r3
 8001536:	2300      	movs	r3, #0
 8001538:	2700      	movs	r7, #0
 800153a:	4466      	add	r6, ip
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	4643      	mov	r3, r8
 8001540:	031c      	lsls	r4, r3, #12
 8001542:	005a      	lsls	r2, r3, #1
 8001544:	0fdb      	lsrs	r3, r3, #31
 8001546:	4650      	mov	r0, sl
 8001548:	0b24      	lsrs	r4, r4, #12
 800154a:	0d52      	lsrs	r2, r2, #21
 800154c:	4698      	mov	r8, r3
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x5e>
 8001550:	e076      	b.n	8001640 <__aeabi_dmul+0x14c>
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <__aeabi_dmul+0x1dc>)
 8001554:	429a      	cmp	r2, r3
 8001556:	d06d      	beq.n	8001634 <__aeabi_dmul+0x140>
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	0f41      	lsrs	r1, r0, #29
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	430b      	orrs	r3, r1
 8001560:	495c      	ldr	r1, [pc, #368]	; (80016d4 <__aeabi_dmul+0x1e0>)
 8001562:	00e4      	lsls	r4, r4, #3
 8001564:	468c      	mov	ip, r1
 8001566:	431c      	orrs	r4, r3
 8001568:	00c3      	lsls	r3, r0, #3
 800156a:	2000      	movs	r0, #0
 800156c:	4462      	add	r2, ip
 800156e:	4641      	mov	r1, r8
 8001570:	18b6      	adds	r6, r6, r2
 8001572:	4069      	eors	r1, r5
 8001574:	1c72      	adds	r2, r6, #1
 8001576:	9101      	str	r1, [sp, #4]
 8001578:	4694      	mov	ip, r2
 800157a:	4307      	orrs	r7, r0
 800157c:	2f0f      	cmp	r7, #15
 800157e:	d900      	bls.n	8001582 <__aeabi_dmul+0x8e>
 8001580:	e0b0      	b.n	80016e4 <__aeabi_dmul+0x1f0>
 8001582:	4a55      	ldr	r2, [pc, #340]	; (80016d8 <__aeabi_dmul+0x1e4>)
 8001584:	00bf      	lsls	r7, r7, #2
 8001586:	59d2      	ldr	r2, [r2, r7]
 8001588:	4697      	mov	pc, r2
 800158a:	465b      	mov	r3, fp
 800158c:	4303      	orrs	r3, r0
 800158e:	4699      	mov	r9, r3
 8001590:	d000      	beq.n	8001594 <__aeabi_dmul+0xa0>
 8001592:	e087      	b.n	80016a4 <__aeabi_dmul+0x1b0>
 8001594:	2300      	movs	r3, #0
 8001596:	469b      	mov	fp, r3
 8001598:	3302      	adds	r3, #2
 800159a:	2708      	movs	r7, #8
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	e7ce      	b.n	800153e <__aeabi_dmul+0x4a>
 80015a0:	4642      	mov	r2, r8
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d067      	beq.n	8001678 <__aeabi_dmul+0x184>
 80015a8:	2803      	cmp	r0, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xba>
 80015ac:	e20e      	b.n	80019cc <__aeabi_dmul+0x4d8>
 80015ae:	2801      	cmp	r0, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xc0>
 80015b2:	e162      	b.n	800187a <__aeabi_dmul+0x386>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	4699      	mov	r9, r3
 80015bc:	9901      	ldr	r1, [sp, #4]
 80015be:	4001      	ands	r1, r0
 80015c0:	b2cd      	uxtb	r5, r1
 80015c2:	2100      	movs	r1, #0
 80015c4:	0312      	lsls	r2, r2, #12
 80015c6:	0d0b      	lsrs	r3, r1, #20
 80015c8:	0b12      	lsrs	r2, r2, #12
 80015ca:	051b      	lsls	r3, r3, #20
 80015cc:	4313      	orrs	r3, r2
 80015ce:	4a43      	ldr	r2, [pc, #268]	; (80016dc <__aeabi_dmul+0x1e8>)
 80015d0:	0524      	lsls	r4, r4, #20
 80015d2:	4013      	ands	r3, r2
 80015d4:	431c      	orrs	r4, r3
 80015d6:	0064      	lsls	r4, r4, #1
 80015d8:	07ed      	lsls	r5, r5, #31
 80015da:	0864      	lsrs	r4, r4, #1
 80015dc:	432c      	orrs	r4, r5
 80015de:	4648      	mov	r0, r9
 80015e0:	0021      	movs	r1, r4
 80015e2:	b007      	add	sp, #28
 80015e4:	bc3c      	pop	{r2, r3, r4, r5}
 80015e6:	4690      	mov	r8, r2
 80015e8:	4699      	mov	r9, r3
 80015ea:	46a2      	mov	sl, r4
 80015ec:	46ab      	mov	fp, r5
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	4303      	orrs	r3, r0
 80015f2:	4699      	mov	r9, r3
 80015f4:	d04f      	beq.n	8001696 <__aeabi_dmul+0x1a2>
 80015f6:	465b      	mov	r3, fp
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dmul+0x10a>
 80015fc:	e189      	b.n	8001912 <__aeabi_dmul+0x41e>
 80015fe:	4658      	mov	r0, fp
 8001600:	f000 fdbc 	bl	800217c <__clzsi2>
 8001604:	0003      	movs	r3, r0
 8001606:	3b0b      	subs	r3, #11
 8001608:	2b1c      	cmp	r3, #28
 800160a:	dd00      	ble.n	800160e <__aeabi_dmul+0x11a>
 800160c:	e17a      	b.n	8001904 <__aeabi_dmul+0x410>
 800160e:	221d      	movs	r2, #29
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	003a      	movs	r2, r7
 8001614:	0001      	movs	r1, r0
 8001616:	465c      	mov	r4, fp
 8001618:	40da      	lsrs	r2, r3
 800161a:	3908      	subs	r1, #8
 800161c:	408c      	lsls	r4, r1
 800161e:	0013      	movs	r3, r2
 8001620:	408f      	lsls	r7, r1
 8001622:	4323      	orrs	r3, r4
 8001624:	469b      	mov	fp, r3
 8001626:	46b9      	mov	r9, r7
 8001628:	2300      	movs	r3, #0
 800162a:	4e2d      	ldr	r6, [pc, #180]	; (80016e0 <__aeabi_dmul+0x1ec>)
 800162c:	2700      	movs	r7, #0
 800162e:	1a36      	subs	r6, r6, r0
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	e784      	b.n	800153e <__aeabi_dmul+0x4a>
 8001634:	4653      	mov	r3, sl
 8001636:	4323      	orrs	r3, r4
 8001638:	d12a      	bne.n	8001690 <__aeabi_dmul+0x19c>
 800163a:	2400      	movs	r4, #0
 800163c:	2002      	movs	r0, #2
 800163e:	e796      	b.n	800156e <__aeabi_dmul+0x7a>
 8001640:	4653      	mov	r3, sl
 8001642:	4323      	orrs	r3, r4
 8001644:	d020      	beq.n	8001688 <__aeabi_dmul+0x194>
 8001646:	2c00      	cmp	r4, #0
 8001648:	d100      	bne.n	800164c <__aeabi_dmul+0x158>
 800164a:	e157      	b.n	80018fc <__aeabi_dmul+0x408>
 800164c:	0020      	movs	r0, r4
 800164e:	f000 fd95 	bl	800217c <__clzsi2>
 8001652:	0003      	movs	r3, r0
 8001654:	3b0b      	subs	r3, #11
 8001656:	2b1c      	cmp	r3, #28
 8001658:	dd00      	ble.n	800165c <__aeabi_dmul+0x168>
 800165a:	e149      	b.n	80018f0 <__aeabi_dmul+0x3fc>
 800165c:	211d      	movs	r1, #29
 800165e:	1acb      	subs	r3, r1, r3
 8001660:	4651      	mov	r1, sl
 8001662:	0002      	movs	r2, r0
 8001664:	40d9      	lsrs	r1, r3
 8001666:	4653      	mov	r3, sl
 8001668:	3a08      	subs	r2, #8
 800166a:	4094      	lsls	r4, r2
 800166c:	4093      	lsls	r3, r2
 800166e:	430c      	orrs	r4, r1
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <__aeabi_dmul+0x1ec>)
 8001672:	1a12      	subs	r2, r2, r0
 8001674:	2000      	movs	r0, #0
 8001676:	e77a      	b.n	800156e <__aeabi_dmul+0x7a>
 8001678:	2501      	movs	r5, #1
 800167a:	9b01      	ldr	r3, [sp, #4]
 800167c:	4c14      	ldr	r4, [pc, #80]	; (80016d0 <__aeabi_dmul+0x1dc>)
 800167e:	401d      	ands	r5, r3
 8001680:	2300      	movs	r3, #0
 8001682:	2200      	movs	r2, #0
 8001684:	4699      	mov	r9, r3
 8001686:	e79c      	b.n	80015c2 <__aeabi_dmul+0xce>
 8001688:	2400      	movs	r4, #0
 800168a:	2200      	movs	r2, #0
 800168c:	2001      	movs	r0, #1
 800168e:	e76e      	b.n	800156e <__aeabi_dmul+0x7a>
 8001690:	4653      	mov	r3, sl
 8001692:	2003      	movs	r0, #3
 8001694:	e76b      	b.n	800156e <__aeabi_dmul+0x7a>
 8001696:	2300      	movs	r3, #0
 8001698:	469b      	mov	fp, r3
 800169a:	3301      	adds	r3, #1
 800169c:	2704      	movs	r7, #4
 800169e:	2600      	movs	r6, #0
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	e74c      	b.n	800153e <__aeabi_dmul+0x4a>
 80016a4:	2303      	movs	r3, #3
 80016a6:	4681      	mov	r9, r0
 80016a8:	270c      	movs	r7, #12
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	e747      	b.n	800153e <__aeabi_dmul+0x4a>
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	2300      	movs	r3, #0
 80016b2:	2500      	movs	r5, #0
 80016b4:	0312      	lsls	r2, r2, #12
 80016b6:	4699      	mov	r9, r3
 80016b8:	4c05      	ldr	r4, [pc, #20]	; (80016d0 <__aeabi_dmul+0x1dc>)
 80016ba:	e782      	b.n	80015c2 <__aeabi_dmul+0xce>
 80016bc:	465c      	mov	r4, fp
 80016be:	464b      	mov	r3, r9
 80016c0:	9802      	ldr	r0, [sp, #8]
 80016c2:	e76f      	b.n	80015a4 <__aeabi_dmul+0xb0>
 80016c4:	465c      	mov	r4, fp
 80016c6:	464b      	mov	r3, r9
 80016c8:	9501      	str	r5, [sp, #4]
 80016ca:	9802      	ldr	r0, [sp, #8]
 80016cc:	e76a      	b.n	80015a4 <__aeabi_dmul+0xb0>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	000007ff 	.word	0x000007ff
 80016d4:	fffffc01 	.word	0xfffffc01
 80016d8:	0800b324 	.word	0x0800b324
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	fffffc0d 	.word	0xfffffc0d
 80016e4:	464a      	mov	r2, r9
 80016e6:	4649      	mov	r1, r9
 80016e8:	0c17      	lsrs	r7, r2, #16
 80016ea:	0c1a      	lsrs	r2, r3, #16
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	0408      	lsls	r0, r1, #16
 80016f2:	0019      	movs	r1, r3
 80016f4:	0c00      	lsrs	r0, r0, #16
 80016f6:	4341      	muls	r1, r0
 80016f8:	0015      	movs	r5, r2
 80016fa:	4688      	mov	r8, r1
 80016fc:	0019      	movs	r1, r3
 80016fe:	437d      	muls	r5, r7
 8001700:	4379      	muls	r1, r7
 8001702:	9503      	str	r5, [sp, #12]
 8001704:	4689      	mov	r9, r1
 8001706:	0029      	movs	r1, r5
 8001708:	0015      	movs	r5, r2
 800170a:	4345      	muls	r5, r0
 800170c:	444d      	add	r5, r9
 800170e:	9502      	str	r5, [sp, #8]
 8001710:	4645      	mov	r5, r8
 8001712:	0c2d      	lsrs	r5, r5, #16
 8001714:	46aa      	mov	sl, r5
 8001716:	9d02      	ldr	r5, [sp, #8]
 8001718:	4455      	add	r5, sl
 800171a:	45a9      	cmp	r9, r5
 800171c:	d906      	bls.n	800172c <__aeabi_dmul+0x238>
 800171e:	468a      	mov	sl, r1
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0249      	lsls	r1, r1, #9
 8001724:	4689      	mov	r9, r1
 8001726:	44ca      	add	sl, r9
 8001728:	4651      	mov	r1, sl
 800172a:	9103      	str	r1, [sp, #12]
 800172c:	0c29      	lsrs	r1, r5, #16
 800172e:	9104      	str	r1, [sp, #16]
 8001730:	4641      	mov	r1, r8
 8001732:	0409      	lsls	r1, r1, #16
 8001734:	042d      	lsls	r5, r5, #16
 8001736:	0c09      	lsrs	r1, r1, #16
 8001738:	4688      	mov	r8, r1
 800173a:	0029      	movs	r1, r5
 800173c:	0c25      	lsrs	r5, r4, #16
 800173e:	0424      	lsls	r4, r4, #16
 8001740:	4441      	add	r1, r8
 8001742:	0c24      	lsrs	r4, r4, #16
 8001744:	9105      	str	r1, [sp, #20]
 8001746:	0021      	movs	r1, r4
 8001748:	4341      	muls	r1, r0
 800174a:	4688      	mov	r8, r1
 800174c:	0021      	movs	r1, r4
 800174e:	4379      	muls	r1, r7
 8001750:	468a      	mov	sl, r1
 8001752:	4368      	muls	r0, r5
 8001754:	4641      	mov	r1, r8
 8001756:	4450      	add	r0, sl
 8001758:	4681      	mov	r9, r0
 800175a:	0c08      	lsrs	r0, r1, #16
 800175c:	4448      	add	r0, r9
 800175e:	436f      	muls	r7, r5
 8001760:	4582      	cmp	sl, r0
 8001762:	d903      	bls.n	800176c <__aeabi_dmul+0x278>
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0249      	lsls	r1, r1, #9
 8001768:	4689      	mov	r9, r1
 800176a:	444f      	add	r7, r9
 800176c:	0c01      	lsrs	r1, r0, #16
 800176e:	4689      	mov	r9, r1
 8001770:	0039      	movs	r1, r7
 8001772:	4449      	add	r1, r9
 8001774:	9102      	str	r1, [sp, #8]
 8001776:	4641      	mov	r1, r8
 8001778:	040f      	lsls	r7, r1, #16
 800177a:	9904      	ldr	r1, [sp, #16]
 800177c:	0c3f      	lsrs	r7, r7, #16
 800177e:	4688      	mov	r8, r1
 8001780:	0400      	lsls	r0, r0, #16
 8001782:	19c0      	adds	r0, r0, r7
 8001784:	4480      	add	r8, r0
 8001786:	4641      	mov	r1, r8
 8001788:	9104      	str	r1, [sp, #16]
 800178a:	4659      	mov	r1, fp
 800178c:	0c0f      	lsrs	r7, r1, #16
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	0c09      	lsrs	r1, r1, #16
 8001792:	4688      	mov	r8, r1
 8001794:	4359      	muls	r1, r3
 8001796:	468a      	mov	sl, r1
 8001798:	0039      	movs	r1, r7
 800179a:	4351      	muls	r1, r2
 800179c:	4689      	mov	r9, r1
 800179e:	4641      	mov	r1, r8
 80017a0:	434a      	muls	r2, r1
 80017a2:	4651      	mov	r1, sl
 80017a4:	0c09      	lsrs	r1, r1, #16
 80017a6:	468b      	mov	fp, r1
 80017a8:	437b      	muls	r3, r7
 80017aa:	18d2      	adds	r2, r2, r3
 80017ac:	445a      	add	r2, fp
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d903      	bls.n	80017ba <__aeabi_dmul+0x2c6>
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	469b      	mov	fp, r3
 80017b8:	44d9      	add	r9, fp
 80017ba:	4651      	mov	r1, sl
 80017bc:	0409      	lsls	r1, r1, #16
 80017be:	0c09      	lsrs	r1, r1, #16
 80017c0:	468a      	mov	sl, r1
 80017c2:	4641      	mov	r1, r8
 80017c4:	4361      	muls	r1, r4
 80017c6:	437c      	muls	r4, r7
 80017c8:	0c13      	lsrs	r3, r2, #16
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	444b      	add	r3, r9
 80017ce:	4452      	add	r2, sl
 80017d0:	46a1      	mov	r9, r4
 80017d2:	468a      	mov	sl, r1
 80017d4:	003c      	movs	r4, r7
 80017d6:	4641      	mov	r1, r8
 80017d8:	436c      	muls	r4, r5
 80017da:	434d      	muls	r5, r1
 80017dc:	4651      	mov	r1, sl
 80017de:	444d      	add	r5, r9
 80017e0:	0c0f      	lsrs	r7, r1, #16
 80017e2:	197d      	adds	r5, r7, r5
 80017e4:	45a9      	cmp	r9, r5
 80017e6:	d903      	bls.n	80017f0 <__aeabi_dmul+0x2fc>
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0249      	lsls	r1, r1, #9
 80017ec:	4688      	mov	r8, r1
 80017ee:	4444      	add	r4, r8
 80017f0:	9f04      	ldr	r7, [sp, #16]
 80017f2:	9903      	ldr	r1, [sp, #12]
 80017f4:	46b8      	mov	r8, r7
 80017f6:	4441      	add	r1, r8
 80017f8:	468b      	mov	fp, r1
 80017fa:	4583      	cmp	fp, r0
 80017fc:	4180      	sbcs	r0, r0
 80017fe:	4241      	negs	r1, r0
 8001800:	4688      	mov	r8, r1
 8001802:	4651      	mov	r1, sl
 8001804:	0408      	lsls	r0, r1, #16
 8001806:	042f      	lsls	r7, r5, #16
 8001808:	0c00      	lsrs	r0, r0, #16
 800180a:	183f      	adds	r7, r7, r0
 800180c:	4658      	mov	r0, fp
 800180e:	9902      	ldr	r1, [sp, #8]
 8001810:	1810      	adds	r0, r2, r0
 8001812:	4689      	mov	r9, r1
 8001814:	4290      	cmp	r0, r2
 8001816:	4192      	sbcs	r2, r2
 8001818:	444f      	add	r7, r9
 800181a:	46ba      	mov	sl, r7
 800181c:	4252      	negs	r2, r2
 800181e:	4699      	mov	r9, r3
 8001820:	4693      	mov	fp, r2
 8001822:	44c2      	add	sl, r8
 8001824:	44d1      	add	r9, sl
 8001826:	44cb      	add	fp, r9
 8001828:	428f      	cmp	r7, r1
 800182a:	41bf      	sbcs	r7, r7
 800182c:	45c2      	cmp	sl, r8
 800182e:	4189      	sbcs	r1, r1
 8001830:	4599      	cmp	r9, r3
 8001832:	419b      	sbcs	r3, r3
 8001834:	4593      	cmp	fp, r2
 8001836:	4192      	sbcs	r2, r2
 8001838:	427f      	negs	r7, r7
 800183a:	4249      	negs	r1, r1
 800183c:	0c2d      	lsrs	r5, r5, #16
 800183e:	4252      	negs	r2, r2
 8001840:	430f      	orrs	r7, r1
 8001842:	425b      	negs	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	197f      	adds	r7, r7, r5
 8001848:	18ff      	adds	r7, r7, r3
 800184a:	465b      	mov	r3, fp
 800184c:	193c      	adds	r4, r7, r4
 800184e:	0ddb      	lsrs	r3, r3, #23
 8001850:	9a05      	ldr	r2, [sp, #20]
 8001852:	0264      	lsls	r4, r4, #9
 8001854:	431c      	orrs	r4, r3
 8001856:	0243      	lsls	r3, r0, #9
 8001858:	4313      	orrs	r3, r2
 800185a:	1e5d      	subs	r5, r3, #1
 800185c:	41ab      	sbcs	r3, r5
 800185e:	465a      	mov	r2, fp
 8001860:	0dc0      	lsrs	r0, r0, #23
 8001862:	4303      	orrs	r3, r0
 8001864:	0252      	lsls	r2, r2, #9
 8001866:	4313      	orrs	r3, r2
 8001868:	01e2      	lsls	r2, r4, #7
 800186a:	d556      	bpl.n	800191a <__aeabi_dmul+0x426>
 800186c:	2001      	movs	r0, #1
 800186e:	085a      	lsrs	r2, r3, #1
 8001870:	4003      	ands	r3, r0
 8001872:	4313      	orrs	r3, r2
 8001874:	07e2      	lsls	r2, r4, #31
 8001876:	4313      	orrs	r3, r2
 8001878:	0864      	lsrs	r4, r4, #1
 800187a:	485a      	ldr	r0, [pc, #360]	; (80019e4 <__aeabi_dmul+0x4f0>)
 800187c:	4460      	add	r0, ip
 800187e:	2800      	cmp	r0, #0
 8001880:	dd4d      	ble.n	800191e <__aeabi_dmul+0x42a>
 8001882:	075a      	lsls	r2, r3, #29
 8001884:	d009      	beq.n	800189a <__aeabi_dmul+0x3a6>
 8001886:	220f      	movs	r2, #15
 8001888:	401a      	ands	r2, r3
 800188a:	2a04      	cmp	r2, #4
 800188c:	d005      	beq.n	800189a <__aeabi_dmul+0x3a6>
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	429a      	cmp	r2, r3
 8001892:	419b      	sbcs	r3, r3
 8001894:	425b      	negs	r3, r3
 8001896:	18e4      	adds	r4, r4, r3
 8001898:	0013      	movs	r3, r2
 800189a:	01e2      	lsls	r2, r4, #7
 800189c:	d504      	bpl.n	80018a8 <__aeabi_dmul+0x3b4>
 800189e:	2080      	movs	r0, #128	; 0x80
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <__aeabi_dmul+0x4f4>)
 80018a2:	00c0      	lsls	r0, r0, #3
 80018a4:	4014      	ands	r4, r2
 80018a6:	4460      	add	r0, ip
 80018a8:	4a50      	ldr	r2, [pc, #320]	; (80019ec <__aeabi_dmul+0x4f8>)
 80018aa:	4290      	cmp	r0, r2
 80018ac:	dd00      	ble.n	80018b0 <__aeabi_dmul+0x3bc>
 80018ae:	e6e3      	b.n	8001678 <__aeabi_dmul+0x184>
 80018b0:	2501      	movs	r5, #1
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	0762      	lsls	r2, r4, #29
 80018b6:	431a      	orrs	r2, r3
 80018b8:	0264      	lsls	r4, r4, #9
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	4691      	mov	r9, r2
 80018be:	0b22      	lsrs	r2, r4, #12
 80018c0:	0544      	lsls	r4, r0, #21
 80018c2:	0d64      	lsrs	r4, r4, #21
 80018c4:	401d      	ands	r5, r3
 80018c6:	e67c      	b.n	80015c2 <__aeabi_dmul+0xce>
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	4659      	mov	r1, fp
 80018cc:	0312      	lsls	r2, r2, #12
 80018ce:	4211      	tst	r1, r2
 80018d0:	d008      	beq.n	80018e4 <__aeabi_dmul+0x3f0>
 80018d2:	4214      	tst	r4, r2
 80018d4:	d106      	bne.n	80018e4 <__aeabi_dmul+0x3f0>
 80018d6:	4322      	orrs	r2, r4
 80018d8:	0312      	lsls	r2, r2, #12
 80018da:	0b12      	lsrs	r2, r2, #12
 80018dc:	4645      	mov	r5, r8
 80018de:	4699      	mov	r9, r3
 80018e0:	4c43      	ldr	r4, [pc, #268]	; (80019f0 <__aeabi_dmul+0x4fc>)
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xce>
 80018e4:	465b      	mov	r3, fp
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0312      	lsls	r2, r2, #12
 80018ea:	0b12      	lsrs	r2, r2, #12
 80018ec:	4c40      	ldr	r4, [pc, #256]	; (80019f0 <__aeabi_dmul+0x4fc>)
 80018ee:	e668      	b.n	80015c2 <__aeabi_dmul+0xce>
 80018f0:	0003      	movs	r3, r0
 80018f2:	4654      	mov	r4, sl
 80018f4:	3b28      	subs	r3, #40	; 0x28
 80018f6:	409c      	lsls	r4, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	e6b9      	b.n	8001670 <__aeabi_dmul+0x17c>
 80018fc:	f000 fc3e 	bl	800217c <__clzsi2>
 8001900:	3020      	adds	r0, #32
 8001902:	e6a6      	b.n	8001652 <__aeabi_dmul+0x15e>
 8001904:	0003      	movs	r3, r0
 8001906:	3b28      	subs	r3, #40	; 0x28
 8001908:	409f      	lsls	r7, r3
 800190a:	2300      	movs	r3, #0
 800190c:	46bb      	mov	fp, r7
 800190e:	4699      	mov	r9, r3
 8001910:	e68a      	b.n	8001628 <__aeabi_dmul+0x134>
 8001912:	f000 fc33 	bl	800217c <__clzsi2>
 8001916:	3020      	adds	r0, #32
 8001918:	e674      	b.n	8001604 <__aeabi_dmul+0x110>
 800191a:	46b4      	mov	ip, r6
 800191c:	e7ad      	b.n	800187a <__aeabi_dmul+0x386>
 800191e:	2501      	movs	r5, #1
 8001920:	1a2a      	subs	r2, r5, r0
 8001922:	2a38      	cmp	r2, #56	; 0x38
 8001924:	dd06      	ble.n	8001934 <__aeabi_dmul+0x440>
 8001926:	9b01      	ldr	r3, [sp, #4]
 8001928:	2400      	movs	r4, #0
 800192a:	401d      	ands	r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	4699      	mov	r9, r3
 8001932:	e646      	b.n	80015c2 <__aeabi_dmul+0xce>
 8001934:	2a1f      	cmp	r2, #31
 8001936:	dc21      	bgt.n	800197c <__aeabi_dmul+0x488>
 8001938:	2520      	movs	r5, #32
 800193a:	0020      	movs	r0, r4
 800193c:	1aad      	subs	r5, r5, r2
 800193e:	001e      	movs	r6, r3
 8001940:	40ab      	lsls	r3, r5
 8001942:	40a8      	lsls	r0, r5
 8001944:	40d6      	lsrs	r6, r2
 8001946:	1e5d      	subs	r5, r3, #1
 8001948:	41ab      	sbcs	r3, r5
 800194a:	4330      	orrs	r0, r6
 800194c:	4318      	orrs	r0, r3
 800194e:	40d4      	lsrs	r4, r2
 8001950:	0743      	lsls	r3, r0, #29
 8001952:	d009      	beq.n	8001968 <__aeabi_dmul+0x474>
 8001954:	230f      	movs	r3, #15
 8001956:	4003      	ands	r3, r0
 8001958:	2b04      	cmp	r3, #4
 800195a:	d005      	beq.n	8001968 <__aeabi_dmul+0x474>
 800195c:	0003      	movs	r3, r0
 800195e:	1d18      	adds	r0, r3, #4
 8001960:	4298      	cmp	r0, r3
 8001962:	419b      	sbcs	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	18e4      	adds	r4, r4, r3
 8001968:	0223      	lsls	r3, r4, #8
 800196a:	d521      	bpl.n	80019b0 <__aeabi_dmul+0x4bc>
 800196c:	2501      	movs	r5, #1
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	2401      	movs	r4, #1
 8001972:	401d      	ands	r5, r3
 8001974:	2300      	movs	r3, #0
 8001976:	2200      	movs	r2, #0
 8001978:	4699      	mov	r9, r3
 800197a:	e622      	b.n	80015c2 <__aeabi_dmul+0xce>
 800197c:	251f      	movs	r5, #31
 800197e:	0021      	movs	r1, r4
 8001980:	426d      	negs	r5, r5
 8001982:	1a28      	subs	r0, r5, r0
 8001984:	40c1      	lsrs	r1, r0
 8001986:	0008      	movs	r0, r1
 8001988:	2a20      	cmp	r2, #32
 800198a:	d01d      	beq.n	80019c8 <__aeabi_dmul+0x4d4>
 800198c:	355f      	adds	r5, #95	; 0x5f
 800198e:	1aaa      	subs	r2, r5, r2
 8001990:	4094      	lsls	r4, r2
 8001992:	4323      	orrs	r3, r4
 8001994:	1e5c      	subs	r4, r3, #1
 8001996:	41a3      	sbcs	r3, r4
 8001998:	2507      	movs	r5, #7
 800199a:	4303      	orrs	r3, r0
 800199c:	401d      	ands	r5, r3
 800199e:	2200      	movs	r2, #0
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	d009      	beq.n	80019b8 <__aeabi_dmul+0x4c4>
 80019a4:	220f      	movs	r2, #15
 80019a6:	2400      	movs	r4, #0
 80019a8:	401a      	ands	r2, r3
 80019aa:	0018      	movs	r0, r3
 80019ac:	2a04      	cmp	r2, #4
 80019ae:	d1d6      	bne.n	800195e <__aeabi_dmul+0x46a>
 80019b0:	0003      	movs	r3, r0
 80019b2:	0765      	lsls	r5, r4, #29
 80019b4:	0264      	lsls	r4, r4, #9
 80019b6:	0b22      	lsrs	r2, r4, #12
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	432b      	orrs	r3, r5
 80019bc:	2501      	movs	r5, #1
 80019be:	4699      	mov	r9, r3
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	2400      	movs	r4, #0
 80019c4:	401d      	ands	r5, r3
 80019c6:	e5fc      	b.n	80015c2 <__aeabi_dmul+0xce>
 80019c8:	2400      	movs	r4, #0
 80019ca:	e7e2      	b.n	8001992 <__aeabi_dmul+0x49e>
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	2501      	movs	r5, #1
 80019d0:	0312      	lsls	r2, r2, #12
 80019d2:	4322      	orrs	r2, r4
 80019d4:	9901      	ldr	r1, [sp, #4]
 80019d6:	0312      	lsls	r2, r2, #12
 80019d8:	0b12      	lsrs	r2, r2, #12
 80019da:	400d      	ands	r5, r1
 80019dc:	4699      	mov	r9, r3
 80019de:	4c04      	ldr	r4, [pc, #16]	; (80019f0 <__aeabi_dmul+0x4fc>)
 80019e0:	e5ef      	b.n	80015c2 <__aeabi_dmul+0xce>
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	000003ff 	.word	0x000003ff
 80019e8:	feffffff 	.word	0xfeffffff
 80019ec:	000007fe 	.word	0x000007fe
 80019f0:	000007ff 	.word	0x000007ff

080019f4 <__aeabi_dsub>:
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	4646      	mov	r6, r8
 80019f8:	46d6      	mov	lr, sl
 80019fa:	464f      	mov	r7, r9
 80019fc:	030c      	lsls	r4, r1, #12
 80019fe:	b5c0      	push	{r6, r7, lr}
 8001a00:	0fcd      	lsrs	r5, r1, #31
 8001a02:	004e      	lsls	r6, r1, #1
 8001a04:	0a61      	lsrs	r1, r4, #9
 8001a06:	0f44      	lsrs	r4, r0, #29
 8001a08:	430c      	orrs	r4, r1
 8001a0a:	00c1      	lsls	r1, r0, #3
 8001a0c:	0058      	lsls	r0, r3, #1
 8001a0e:	0d40      	lsrs	r0, r0, #21
 8001a10:	4684      	mov	ip, r0
 8001a12:	468a      	mov	sl, r1
 8001a14:	000f      	movs	r7, r1
 8001a16:	0319      	lsls	r1, r3, #12
 8001a18:	0f50      	lsrs	r0, r2, #29
 8001a1a:	0a49      	lsrs	r1, r1, #9
 8001a1c:	4301      	orrs	r1, r0
 8001a1e:	48c6      	ldr	r0, [pc, #792]	; (8001d38 <__aeabi_dsub+0x344>)
 8001a20:	0d76      	lsrs	r6, r6, #21
 8001a22:	46a8      	mov	r8, r5
 8001a24:	0fdb      	lsrs	r3, r3, #31
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x3a>
 8001a2c:	e0d8      	b.n	8001be0 <__aeabi_dsub+0x1ec>
 8001a2e:	2001      	movs	r0, #1
 8001a30:	4043      	eors	r3, r0
 8001a32:	42ab      	cmp	r3, r5
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x44>
 8001a36:	e0a6      	b.n	8001b86 <__aeabi_dsub+0x192>
 8001a38:	4660      	mov	r0, ip
 8001a3a:	1a35      	subs	r5, r6, r0
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	dc00      	bgt.n	8001a42 <__aeabi_dsub+0x4e>
 8001a40:	e105      	b.n	8001c4e <__aeabi_dsub+0x25a>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d110      	bne.n	8001a68 <__aeabi_dsub+0x74>
 8001a46:	000b      	movs	r3, r1
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x5a>
 8001a4c:	e0d7      	b.n	8001bfe <__aeabi_dsub+0x20a>
 8001a4e:	1e6b      	subs	r3, r5, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x62>
 8001a54:	e14b      	b.n	8001cee <__aeabi_dsub+0x2fa>
 8001a56:	4653      	mov	r3, sl
 8001a58:	1a9f      	subs	r7, r3, r2
 8001a5a:	45ba      	cmp	sl, r7
 8001a5c:	4180      	sbcs	r0, r0
 8001a5e:	1a64      	subs	r4, r4, r1
 8001a60:	4240      	negs	r0, r0
 8001a62:	1a24      	subs	r4, r4, r0
 8001a64:	2601      	movs	r6, #1
 8001a66:	e01e      	b.n	8001aa6 <__aeabi_dsub+0xb2>
 8001a68:	4bb3      	ldr	r3, [pc, #716]	; (8001d38 <__aeabi_dsub+0x344>)
 8001a6a:	429e      	cmp	r6, r3
 8001a6c:	d048      	beq.n	8001b00 <__aeabi_dsub+0x10c>
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	4319      	orrs	r1, r3
 8001a74:	2d38      	cmp	r5, #56	; 0x38
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0x86>
 8001a78:	e119      	b.n	8001cae <__aeabi_dsub+0x2ba>
 8001a7a:	2d1f      	cmp	r5, #31
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0x8c>
 8001a7e:	e14c      	b.n	8001d1a <__aeabi_dsub+0x326>
 8001a80:	2320      	movs	r3, #32
 8001a82:	000f      	movs	r7, r1
 8001a84:	1b5b      	subs	r3, r3, r5
 8001a86:	0010      	movs	r0, r2
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	409f      	lsls	r7, r3
 8001a8c:	40e8      	lsrs	r0, r5
 8001a8e:	1e53      	subs	r3, r2, #1
 8001a90:	419a      	sbcs	r2, r3
 8001a92:	40e9      	lsrs	r1, r5
 8001a94:	4307      	orrs	r7, r0
 8001a96:	4317      	orrs	r7, r2
 8001a98:	4653      	mov	r3, sl
 8001a9a:	1bdf      	subs	r7, r3, r7
 8001a9c:	1a61      	subs	r1, r4, r1
 8001a9e:	45ba      	cmp	sl, r7
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4264      	negs	r4, r4
 8001aa4:	1b0c      	subs	r4, r1, r4
 8001aa6:	0223      	lsls	r3, r4, #8
 8001aa8:	d400      	bmi.n	8001aac <__aeabi_dsub+0xb8>
 8001aaa:	e0c5      	b.n	8001c38 <__aeabi_dsub+0x244>
 8001aac:	0264      	lsls	r4, r4, #9
 8001aae:	0a65      	lsrs	r5, r4, #9
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0xc2>
 8001ab4:	e0f6      	b.n	8001ca4 <__aeabi_dsub+0x2b0>
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	f000 fb60 	bl	800217c <__clzsi2>
 8001abc:	0003      	movs	r3, r0
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	2b1f      	cmp	r3, #31
 8001ac2:	dd00      	ble.n	8001ac6 <__aeabi_dsub+0xd2>
 8001ac4:	e0e9      	b.n	8001c9a <__aeabi_dsub+0x2a6>
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	003c      	movs	r4, r7
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	409d      	lsls	r5, r3
 8001ace:	40d4      	lsrs	r4, r2
 8001ad0:	409f      	lsls	r7, r3
 8001ad2:	4325      	orrs	r5, r4
 8001ad4:	429e      	cmp	r6, r3
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0xe6>
 8001ad8:	e0db      	b.n	8001c92 <__aeabi_dsub+0x29e>
 8001ada:	1b9e      	subs	r6, r3, r6
 8001adc:	1c73      	adds	r3, r6, #1
 8001ade:	2b1f      	cmp	r3, #31
 8001ae0:	dd00      	ble.n	8001ae4 <__aeabi_dsub+0xf0>
 8001ae2:	e10a      	b.n	8001cfa <__aeabi_dsub+0x306>
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	0038      	movs	r0, r7
 8001ae8:	1ad2      	subs	r2, r2, r3
 8001aea:	0029      	movs	r1, r5
 8001aec:	4097      	lsls	r7, r2
 8001aee:	002c      	movs	r4, r5
 8001af0:	4091      	lsls	r1, r2
 8001af2:	40d8      	lsrs	r0, r3
 8001af4:	1e7a      	subs	r2, r7, #1
 8001af6:	4197      	sbcs	r7, r2
 8001af8:	40dc      	lsrs	r4, r3
 8001afa:	2600      	movs	r6, #0
 8001afc:	4301      	orrs	r1, r0
 8001afe:	430f      	orrs	r7, r1
 8001b00:	077b      	lsls	r3, r7, #29
 8001b02:	d009      	beq.n	8001b18 <__aeabi_dsub+0x124>
 8001b04:	230f      	movs	r3, #15
 8001b06:	403b      	ands	r3, r7
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d005      	beq.n	8001b18 <__aeabi_dsub+0x124>
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	42bb      	cmp	r3, r7
 8001b10:	41bf      	sbcs	r7, r7
 8001b12:	427f      	negs	r7, r7
 8001b14:	19e4      	adds	r4, r4, r7
 8001b16:	001f      	movs	r7, r3
 8001b18:	0223      	lsls	r3, r4, #8
 8001b1a:	d525      	bpl.n	8001b68 <__aeabi_dsub+0x174>
 8001b1c:	4b86      	ldr	r3, [pc, #536]	; (8001d38 <__aeabi_dsub+0x344>)
 8001b1e:	3601      	adds	r6, #1
 8001b20:	429e      	cmp	r6, r3
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x132>
 8001b24:	e0af      	b.n	8001c86 <__aeabi_dsub+0x292>
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <__aeabi_dsub+0x348>)
 8001b28:	2501      	movs	r5, #1
 8001b2a:	401c      	ands	r4, r3
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	0762      	lsls	r2, r4, #29
 8001b30:	08ff      	lsrs	r7, r7, #3
 8001b32:	0264      	lsls	r4, r4, #9
 8001b34:	0576      	lsls	r6, r6, #21
 8001b36:	4317      	orrs	r7, r2
 8001b38:	0b24      	lsrs	r4, r4, #12
 8001b3a:	0d76      	lsrs	r6, r6, #21
 8001b3c:	401d      	ands	r5, r3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	0324      	lsls	r4, r4, #12
 8001b42:	0b23      	lsrs	r3, r4, #12
 8001b44:	0d0c      	lsrs	r4, r1, #20
 8001b46:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <__aeabi_dsub+0x34c>)
 8001b48:	0524      	lsls	r4, r4, #20
 8001b4a:	431c      	orrs	r4, r3
 8001b4c:	4014      	ands	r4, r2
 8001b4e:	0533      	lsls	r3, r6, #20
 8001b50:	4323      	orrs	r3, r4
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	07ed      	lsls	r5, r5, #31
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	432b      	orrs	r3, r5
 8001b5a:	0038      	movs	r0, r7
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	bc1c      	pop	{r2, r3, r4}
 8001b60:	4690      	mov	r8, r2
 8001b62:	4699      	mov	r9, r3
 8001b64:	46a2      	mov	sl, r4
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b68:	2501      	movs	r5, #1
 8001b6a:	4643      	mov	r3, r8
 8001b6c:	0762      	lsls	r2, r4, #29
 8001b6e:	08ff      	lsrs	r7, r7, #3
 8001b70:	4317      	orrs	r7, r2
 8001b72:	08e4      	lsrs	r4, r4, #3
 8001b74:	401d      	ands	r5, r3
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <__aeabi_dsub+0x344>)
 8001b78:	429e      	cmp	r6, r3
 8001b7a:	d036      	beq.n	8001bea <__aeabi_dsub+0x1f6>
 8001b7c:	0324      	lsls	r4, r4, #12
 8001b7e:	0576      	lsls	r6, r6, #21
 8001b80:	0b24      	lsrs	r4, r4, #12
 8001b82:	0d76      	lsrs	r6, r6, #21
 8001b84:	e7db      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001b86:	4663      	mov	r3, ip
 8001b88:	1af3      	subs	r3, r6, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dc00      	bgt.n	8001b90 <__aeabi_dsub+0x19c>
 8001b8e:	e094      	b.n	8001cba <__aeabi_dsub+0x2c6>
 8001b90:	4660      	mov	r0, ip
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d035      	beq.n	8001c02 <__aeabi_dsub+0x20e>
 8001b96:	4868      	ldr	r0, [pc, #416]	; (8001d38 <__aeabi_dsub+0x344>)
 8001b98:	4286      	cmp	r6, r0
 8001b9a:	d0b1      	beq.n	8001b00 <__aeabi_dsub+0x10c>
 8001b9c:	2780      	movs	r7, #128	; 0x80
 8001b9e:	043f      	lsls	r7, r7, #16
 8001ba0:	4339      	orrs	r1, r7
 8001ba2:	2b38      	cmp	r3, #56	; 0x38
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_dsub+0x1b4>
 8001ba6:	e0fd      	b.n	8001da4 <__aeabi_dsub+0x3b0>
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	0017      	movs	r7, r2
 8001bac:	2100      	movs	r1, #0
 8001bae:	1e7a      	subs	r2, r7, #1
 8001bb0:	4197      	sbcs	r7, r2
 8001bb2:	4457      	add	r7, sl
 8001bb4:	4557      	cmp	r7, sl
 8001bb6:	4180      	sbcs	r0, r0
 8001bb8:	1909      	adds	r1, r1, r4
 8001bba:	4244      	negs	r4, r0
 8001bbc:	190c      	adds	r4, r1, r4
 8001bbe:	0223      	lsls	r3, r4, #8
 8001bc0:	d53a      	bpl.n	8001c38 <__aeabi_dsub+0x244>
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <__aeabi_dsub+0x344>)
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	429e      	cmp	r6, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x1d8>
 8001bca:	e14b      	b.n	8001e64 <__aeabi_dsub+0x470>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <__aeabi_dsub+0x348>)
 8001bd0:	401c      	ands	r4, r3
 8001bd2:	087b      	lsrs	r3, r7, #1
 8001bd4:	4017      	ands	r7, r2
 8001bd6:	431f      	orrs	r7, r3
 8001bd8:	07e2      	lsls	r2, r4, #31
 8001bda:	4317      	orrs	r7, r2
 8001bdc:	0864      	lsrs	r4, r4, #1
 8001bde:	e78f      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001be0:	0008      	movs	r0, r1
 8001be2:	4310      	orrs	r0, r2
 8001be4:	d000      	beq.n	8001be8 <__aeabi_dsub+0x1f4>
 8001be6:	e724      	b.n	8001a32 <__aeabi_dsub+0x3e>
 8001be8:	e721      	b.n	8001a2e <__aeabi_dsub+0x3a>
 8001bea:	0023      	movs	r3, r4
 8001bec:	433b      	orrs	r3, r7
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x1fe>
 8001bf0:	e1b9      	b.n	8001f66 <__aeabi_dsub+0x572>
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0312      	lsls	r2, r2, #12
 8001bf6:	4314      	orrs	r4, r2
 8001bf8:	0324      	lsls	r4, r4, #12
 8001bfa:	0b24      	lsrs	r4, r4, #12
 8001bfc:	e79f      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001bfe:	002e      	movs	r6, r5
 8001c00:	e77e      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001c02:	0008      	movs	r0, r1
 8001c04:	4310      	orrs	r0, r2
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x216>
 8001c08:	e0ca      	b.n	8001da0 <__aeabi_dsub+0x3ac>
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	4684      	mov	ip, r0
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x220>
 8001c12:	e0e7      	b.n	8001de4 <__aeabi_dsub+0x3f0>
 8001c14:	4452      	add	r2, sl
 8001c16:	4552      	cmp	r2, sl
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	1864      	adds	r4, r4, r1
 8001c1c:	4240      	negs	r0, r0
 8001c1e:	1824      	adds	r4, r4, r0
 8001c20:	0017      	movs	r7, r2
 8001c22:	2601      	movs	r6, #1
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	d507      	bpl.n	8001c38 <__aeabi_dsub+0x244>
 8001c28:	2602      	movs	r6, #2
 8001c2a:	e7cf      	b.n	8001bcc <__aeabi_dsub+0x1d8>
 8001c2c:	4664      	mov	r4, ip
 8001c2e:	432c      	orrs	r4, r5
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x240>
 8001c32:	e1b3      	b.n	8001f9c <__aeabi_dsub+0x5a8>
 8001c34:	002c      	movs	r4, r5
 8001c36:	4667      	mov	r7, ip
 8001c38:	077b      	lsls	r3, r7, #29
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x24a>
 8001c3c:	e762      	b.n	8001b04 <__aeabi_dsub+0x110>
 8001c3e:	0763      	lsls	r3, r4, #29
 8001c40:	08ff      	lsrs	r7, r7, #3
 8001c42:	431f      	orrs	r7, r3
 8001c44:	2501      	movs	r5, #1
 8001c46:	4643      	mov	r3, r8
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	401d      	ands	r5, r3
 8001c4c:	e793      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001c4e:	2d00      	cmp	r5, #0
 8001c50:	d178      	bne.n	8001d44 <__aeabi_dsub+0x350>
 8001c52:	1c75      	adds	r5, r6, #1
 8001c54:	056d      	lsls	r5, r5, #21
 8001c56:	0d6d      	lsrs	r5, r5, #21
 8001c58:	2d01      	cmp	r5, #1
 8001c5a:	dc00      	bgt.n	8001c5e <__aeabi_dsub+0x26a>
 8001c5c:	e0f2      	b.n	8001e44 <__aeabi_dsub+0x450>
 8001c5e:	4650      	mov	r0, sl
 8001c60:	1a80      	subs	r0, r0, r2
 8001c62:	4582      	cmp	sl, r0
 8001c64:	41bf      	sbcs	r7, r7
 8001c66:	1a65      	subs	r5, r4, r1
 8001c68:	427f      	negs	r7, r7
 8001c6a:	1bed      	subs	r5, r5, r7
 8001c6c:	4684      	mov	ip, r0
 8001c6e:	0228      	lsls	r0, r5, #8
 8001c70:	d400      	bmi.n	8001c74 <__aeabi_dsub+0x280>
 8001c72:	e08c      	b.n	8001d8e <__aeabi_dsub+0x39a>
 8001c74:	4650      	mov	r0, sl
 8001c76:	1a17      	subs	r7, r2, r0
 8001c78:	42ba      	cmp	r2, r7
 8001c7a:	4192      	sbcs	r2, r2
 8001c7c:	1b0c      	subs	r4, r1, r4
 8001c7e:	4255      	negs	r5, r2
 8001c80:	1b65      	subs	r5, r4, r5
 8001c82:	4698      	mov	r8, r3
 8001c84:	e714      	b.n	8001ab0 <__aeabi_dsub+0xbc>
 8001c86:	2501      	movs	r5, #1
 8001c88:	4643      	mov	r3, r8
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	401d      	ands	r5, r3
 8001c8e:	2700      	movs	r7, #0
 8001c90:	e755      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001c92:	4c2a      	ldr	r4, [pc, #168]	; (8001d3c <__aeabi_dsub+0x348>)
 8001c94:	1af6      	subs	r6, r6, r3
 8001c96:	402c      	ands	r4, r5
 8001c98:	e732      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001c9a:	003d      	movs	r5, r7
 8001c9c:	3828      	subs	r0, #40	; 0x28
 8001c9e:	4085      	lsls	r5, r0
 8001ca0:	2700      	movs	r7, #0
 8001ca2:	e717      	b.n	8001ad4 <__aeabi_dsub+0xe0>
 8001ca4:	0038      	movs	r0, r7
 8001ca6:	f000 fa69 	bl	800217c <__clzsi2>
 8001caa:	3020      	adds	r0, #32
 8001cac:	e706      	b.n	8001abc <__aeabi_dsub+0xc8>
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	0017      	movs	r7, r2
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	1e7a      	subs	r2, r7, #1
 8001cb6:	4197      	sbcs	r7, r2
 8001cb8:	e6ee      	b.n	8001a98 <__aeabi_dsub+0xa4>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d000      	beq.n	8001cc0 <__aeabi_dsub+0x2cc>
 8001cbe:	e0e5      	b.n	8001e8c <__aeabi_dsub+0x498>
 8001cc0:	1c73      	adds	r3, r6, #1
 8001cc2:	469c      	mov	ip, r3
 8001cc4:	055b      	lsls	r3, r3, #21
 8001cc6:	0d5b      	lsrs	r3, r3, #21
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dsub+0x2da>
 8001ccc:	e09f      	b.n	8001e0e <__aeabi_dsub+0x41a>
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <__aeabi_dsub+0x344>)
 8001cd0:	459c      	cmp	ip, r3
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x2e2>
 8001cd4:	e0c5      	b.n	8001e62 <__aeabi_dsub+0x46e>
 8001cd6:	4452      	add	r2, sl
 8001cd8:	4552      	cmp	r2, sl
 8001cda:	4180      	sbcs	r0, r0
 8001cdc:	1864      	adds	r4, r4, r1
 8001cde:	4240      	negs	r0, r0
 8001ce0:	1824      	adds	r4, r4, r0
 8001ce2:	07e7      	lsls	r7, r4, #31
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	4317      	orrs	r7, r2
 8001ce8:	0864      	lsrs	r4, r4, #1
 8001cea:	4666      	mov	r6, ip
 8001cec:	e708      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <__aeabi_dsub+0x344>)
 8001cf0:	4285      	cmp	r5, r0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x302>
 8001cf4:	e085      	b.n	8001e02 <__aeabi_dsub+0x40e>
 8001cf6:	001d      	movs	r5, r3
 8001cf8:	e6bc      	b.n	8001a74 <__aeabi_dsub+0x80>
 8001cfa:	0029      	movs	r1, r5
 8001cfc:	3e1f      	subs	r6, #31
 8001cfe:	40f1      	lsrs	r1, r6
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x312>
 8001d04:	e07f      	b.n	8001e06 <__aeabi_dsub+0x412>
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	409d      	lsls	r5, r3
 8001d0c:	432f      	orrs	r7, r5
 8001d0e:	1e7d      	subs	r5, r7, #1
 8001d10:	41af      	sbcs	r7, r5
 8001d12:	2400      	movs	r4, #0
 8001d14:	430f      	orrs	r7, r1
 8001d16:	2600      	movs	r6, #0
 8001d18:	e78e      	b.n	8001c38 <__aeabi_dsub+0x244>
 8001d1a:	002b      	movs	r3, r5
 8001d1c:	000f      	movs	r7, r1
 8001d1e:	3b20      	subs	r3, #32
 8001d20:	40df      	lsrs	r7, r3
 8001d22:	2d20      	cmp	r5, #32
 8001d24:	d071      	beq.n	8001e0a <__aeabi_dsub+0x416>
 8001d26:	2340      	movs	r3, #64	; 0x40
 8001d28:	1b5d      	subs	r5, r3, r5
 8001d2a:	40a9      	lsls	r1, r5
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	1e51      	subs	r1, r2, #1
 8001d30:	418a      	sbcs	r2, r1
 8001d32:	2100      	movs	r1, #0
 8001d34:	4317      	orrs	r7, r2
 8001d36:	e6af      	b.n	8001a98 <__aeabi_dsub+0xa4>
 8001d38:	000007ff 	.word	0x000007ff
 8001d3c:	ff7fffff 	.word	0xff7fffff
 8001d40:	800fffff 	.word	0x800fffff
 8001d44:	2e00      	cmp	r6, #0
 8001d46:	d03e      	beq.n	8001dc6 <__aeabi_dsub+0x3d2>
 8001d48:	4eb3      	ldr	r6, [pc, #716]	; (8002018 <__aeabi_dsub+0x624>)
 8001d4a:	45b4      	cmp	ip, r6
 8001d4c:	d045      	beq.n	8001dda <__aeabi_dsub+0x3e6>
 8001d4e:	2680      	movs	r6, #128	; 0x80
 8001d50:	0436      	lsls	r6, r6, #16
 8001d52:	426d      	negs	r5, r5
 8001d54:	4334      	orrs	r4, r6
 8001d56:	2d38      	cmp	r5, #56	; 0x38
 8001d58:	dd00      	ble.n	8001d5c <__aeabi_dsub+0x368>
 8001d5a:	e0a8      	b.n	8001eae <__aeabi_dsub+0x4ba>
 8001d5c:	2d1f      	cmp	r5, #31
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_dsub+0x36e>
 8001d60:	e11f      	b.n	8001fa2 <__aeabi_dsub+0x5ae>
 8001d62:	2620      	movs	r6, #32
 8001d64:	0027      	movs	r7, r4
 8001d66:	4650      	mov	r0, sl
 8001d68:	1b76      	subs	r6, r6, r5
 8001d6a:	40b7      	lsls	r7, r6
 8001d6c:	40e8      	lsrs	r0, r5
 8001d6e:	4307      	orrs	r7, r0
 8001d70:	4650      	mov	r0, sl
 8001d72:	40b0      	lsls	r0, r6
 8001d74:	1e46      	subs	r6, r0, #1
 8001d76:	41b0      	sbcs	r0, r6
 8001d78:	40ec      	lsrs	r4, r5
 8001d7a:	4338      	orrs	r0, r7
 8001d7c:	1a17      	subs	r7, r2, r0
 8001d7e:	42ba      	cmp	r2, r7
 8001d80:	4192      	sbcs	r2, r2
 8001d82:	1b0c      	subs	r4, r1, r4
 8001d84:	4252      	negs	r2, r2
 8001d86:	1aa4      	subs	r4, r4, r2
 8001d88:	4666      	mov	r6, ip
 8001d8a:	4698      	mov	r8, r3
 8001d8c:	e68b      	b.n	8001aa6 <__aeabi_dsub+0xb2>
 8001d8e:	4664      	mov	r4, ip
 8001d90:	4667      	mov	r7, ip
 8001d92:	432c      	orrs	r4, r5
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x3a4>
 8001d96:	e68b      	b.n	8001ab0 <__aeabi_dsub+0xbc>
 8001d98:	2500      	movs	r5, #0
 8001d9a:	2600      	movs	r6, #0
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	e6ea      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001da0:	001e      	movs	r6, r3
 8001da2:	e6ad      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001da4:	2b1f      	cmp	r3, #31
 8001da6:	dc60      	bgt.n	8001e6a <__aeabi_dsub+0x476>
 8001da8:	2720      	movs	r7, #32
 8001daa:	1af8      	subs	r0, r7, r3
 8001dac:	000f      	movs	r7, r1
 8001dae:	4684      	mov	ip, r0
 8001db0:	4087      	lsls	r7, r0
 8001db2:	0010      	movs	r0, r2
 8001db4:	40d8      	lsrs	r0, r3
 8001db6:	4307      	orrs	r7, r0
 8001db8:	4660      	mov	r0, ip
 8001dba:	4082      	lsls	r2, r0
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	40d9      	lsrs	r1, r3
 8001dc2:	4317      	orrs	r7, r2
 8001dc4:	e6f5      	b.n	8001bb2 <__aeabi_dsub+0x1be>
 8001dc6:	0026      	movs	r6, r4
 8001dc8:	4650      	mov	r0, sl
 8001dca:	4306      	orrs	r6, r0
 8001dcc:	d005      	beq.n	8001dda <__aeabi_dsub+0x3e6>
 8001dce:	43ed      	mvns	r5, r5
 8001dd0:	2d00      	cmp	r5, #0
 8001dd2:	d0d3      	beq.n	8001d7c <__aeabi_dsub+0x388>
 8001dd4:	4e90      	ldr	r6, [pc, #576]	; (8002018 <__aeabi_dsub+0x624>)
 8001dd6:	45b4      	cmp	ip, r6
 8001dd8:	d1bd      	bne.n	8001d56 <__aeabi_dsub+0x362>
 8001dda:	000c      	movs	r4, r1
 8001ddc:	0017      	movs	r7, r2
 8001dde:	4666      	mov	r6, ip
 8001de0:	4698      	mov	r8, r3
 8001de2:	e68d      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001de4:	488c      	ldr	r0, [pc, #560]	; (8002018 <__aeabi_dsub+0x624>)
 8001de6:	4283      	cmp	r3, r0
 8001de8:	d00b      	beq.n	8001e02 <__aeabi_dsub+0x40e>
 8001dea:	4663      	mov	r3, ip
 8001dec:	e6d9      	b.n	8001ba2 <__aeabi_dsub+0x1ae>
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x400>
 8001df2:	e096      	b.n	8001f22 <__aeabi_dsub+0x52e>
 8001df4:	0008      	movs	r0, r1
 8001df6:	4310      	orrs	r0, r2
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x408>
 8001dfa:	e0e2      	b.n	8001fc2 <__aeabi_dsub+0x5ce>
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	0017      	movs	r7, r2
 8001e00:	4698      	mov	r8, r3
 8001e02:	4e85      	ldr	r6, [pc, #532]	; (8002018 <__aeabi_dsub+0x624>)
 8001e04:	e67c      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e06:	2500      	movs	r5, #0
 8001e08:	e780      	b.n	8001d0c <__aeabi_dsub+0x318>
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	e78e      	b.n	8001d2c <__aeabi_dsub+0x338>
 8001e0e:	0023      	movs	r3, r4
 8001e10:	4650      	mov	r0, sl
 8001e12:	4303      	orrs	r3, r0
 8001e14:	2e00      	cmp	r6, #0
 8001e16:	d000      	beq.n	8001e1a <__aeabi_dsub+0x426>
 8001e18:	e0a8      	b.n	8001f6c <__aeabi_dsub+0x578>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x42c>
 8001e1e:	e0de      	b.n	8001fde <__aeabi_dsub+0x5ea>
 8001e20:	000b      	movs	r3, r1
 8001e22:	4313      	orrs	r3, r2
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x434>
 8001e26:	e66b      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e28:	4452      	add	r2, sl
 8001e2a:	4552      	cmp	r2, sl
 8001e2c:	4180      	sbcs	r0, r0
 8001e2e:	1864      	adds	r4, r4, r1
 8001e30:	4240      	negs	r0, r0
 8001e32:	1824      	adds	r4, r4, r0
 8001e34:	0017      	movs	r7, r2
 8001e36:	0223      	lsls	r3, r4, #8
 8001e38:	d400      	bmi.n	8001e3c <__aeabi_dsub+0x448>
 8001e3a:	e6fd      	b.n	8001c38 <__aeabi_dsub+0x244>
 8001e3c:	4b77      	ldr	r3, [pc, #476]	; (800201c <__aeabi_dsub+0x628>)
 8001e3e:	4666      	mov	r6, ip
 8001e40:	401c      	ands	r4, r3
 8001e42:	e65d      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e44:	0025      	movs	r5, r4
 8001e46:	4650      	mov	r0, sl
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	2e00      	cmp	r6, #0
 8001e4c:	d1cf      	bne.n	8001dee <__aeabi_dsub+0x3fa>
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d14f      	bne.n	8001ef2 <__aeabi_dsub+0x4fe>
 8001e52:	000c      	movs	r4, r1
 8001e54:	4314      	orrs	r4, r2
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x466>
 8001e58:	e0a0      	b.n	8001f9c <__aeabi_dsub+0x5a8>
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	0017      	movs	r7, r2
 8001e5e:	4698      	mov	r8, r3
 8001e60:	e64e      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e62:	4666      	mov	r6, ip
 8001e64:	2400      	movs	r4, #0
 8001e66:	2700      	movs	r7, #0
 8001e68:	e685      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001e6a:	001f      	movs	r7, r3
 8001e6c:	0008      	movs	r0, r1
 8001e6e:	3f20      	subs	r7, #32
 8001e70:	40f8      	lsrs	r0, r7
 8001e72:	0007      	movs	r7, r0
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dsub+0x486>
 8001e78:	e08e      	b.n	8001f98 <__aeabi_dsub+0x5a4>
 8001e7a:	2040      	movs	r0, #64	; 0x40
 8001e7c:	1ac3      	subs	r3, r0, r3
 8001e7e:	4099      	lsls	r1, r3
 8001e80:	430a      	orrs	r2, r1
 8001e82:	1e51      	subs	r1, r2, #1
 8001e84:	418a      	sbcs	r2, r1
 8001e86:	2100      	movs	r1, #0
 8001e88:	4317      	orrs	r7, r2
 8001e8a:	e692      	b.n	8001bb2 <__aeabi_dsub+0x1be>
 8001e8c:	2e00      	cmp	r6, #0
 8001e8e:	d114      	bne.n	8001eba <__aeabi_dsub+0x4c6>
 8001e90:	0026      	movs	r6, r4
 8001e92:	4650      	mov	r0, sl
 8001e94:	4306      	orrs	r6, r0
 8001e96:	d062      	beq.n	8001f5e <__aeabi_dsub+0x56a>
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d15c      	bne.n	8001f58 <__aeabi_dsub+0x564>
 8001e9e:	1887      	adds	r7, r0, r2
 8001ea0:	4297      	cmp	r7, r2
 8001ea2:	4192      	sbcs	r2, r2
 8001ea4:	1864      	adds	r4, r4, r1
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	18a4      	adds	r4, r4, r2
 8001eaa:	4666      	mov	r6, ip
 8001eac:	e687      	b.n	8001bbe <__aeabi_dsub+0x1ca>
 8001eae:	4650      	mov	r0, sl
 8001eb0:	4320      	orrs	r0, r4
 8001eb2:	1e44      	subs	r4, r0, #1
 8001eb4:	41a0      	sbcs	r0, r4
 8001eb6:	2400      	movs	r4, #0
 8001eb8:	e760      	b.n	8001d7c <__aeabi_dsub+0x388>
 8001eba:	4e57      	ldr	r6, [pc, #348]	; (8002018 <__aeabi_dsub+0x624>)
 8001ebc:	45b4      	cmp	ip, r6
 8001ebe:	d04e      	beq.n	8001f5e <__aeabi_dsub+0x56a>
 8001ec0:	2680      	movs	r6, #128	; 0x80
 8001ec2:	0436      	lsls	r6, r6, #16
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	4334      	orrs	r4, r6
 8001ec8:	2b38      	cmp	r3, #56	; 0x38
 8001eca:	dd00      	ble.n	8001ece <__aeabi_dsub+0x4da>
 8001ecc:	e07f      	b.n	8001fce <__aeabi_dsub+0x5da>
 8001ece:	2b1f      	cmp	r3, #31
 8001ed0:	dd00      	ble.n	8001ed4 <__aeabi_dsub+0x4e0>
 8001ed2:	e08b      	b.n	8001fec <__aeabi_dsub+0x5f8>
 8001ed4:	2620      	movs	r6, #32
 8001ed6:	0027      	movs	r7, r4
 8001ed8:	4650      	mov	r0, sl
 8001eda:	1af6      	subs	r6, r6, r3
 8001edc:	40b7      	lsls	r7, r6
 8001ede:	40d8      	lsrs	r0, r3
 8001ee0:	4307      	orrs	r7, r0
 8001ee2:	4650      	mov	r0, sl
 8001ee4:	40b0      	lsls	r0, r6
 8001ee6:	1e46      	subs	r6, r0, #1
 8001ee8:	41b0      	sbcs	r0, r6
 8001eea:	4307      	orrs	r7, r0
 8001eec:	40dc      	lsrs	r4, r3
 8001eee:	18bf      	adds	r7, r7, r2
 8001ef0:	e7d6      	b.n	8001ea0 <__aeabi_dsub+0x4ac>
 8001ef2:	000d      	movs	r5, r1
 8001ef4:	4315      	orrs	r5, r2
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dsub+0x506>
 8001ef8:	e602      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001efa:	4650      	mov	r0, sl
 8001efc:	1a80      	subs	r0, r0, r2
 8001efe:	4582      	cmp	sl, r0
 8001f00:	41bf      	sbcs	r7, r7
 8001f02:	1a65      	subs	r5, r4, r1
 8001f04:	427f      	negs	r7, r7
 8001f06:	1bed      	subs	r5, r5, r7
 8001f08:	4684      	mov	ip, r0
 8001f0a:	0228      	lsls	r0, r5, #8
 8001f0c:	d400      	bmi.n	8001f10 <__aeabi_dsub+0x51c>
 8001f0e:	e68d      	b.n	8001c2c <__aeabi_dsub+0x238>
 8001f10:	4650      	mov	r0, sl
 8001f12:	1a17      	subs	r7, r2, r0
 8001f14:	42ba      	cmp	r2, r7
 8001f16:	4192      	sbcs	r2, r2
 8001f18:	1b0c      	subs	r4, r1, r4
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	1aa4      	subs	r4, r4, r2
 8001f1e:	4698      	mov	r8, r3
 8001f20:	e5ee      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001f22:	000d      	movs	r5, r1
 8001f24:	4315      	orrs	r5, r2
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x536>
 8001f28:	e76b      	b.n	8001e02 <__aeabi_dsub+0x40e>
 8001f2a:	4650      	mov	r0, sl
 8001f2c:	0767      	lsls	r7, r4, #29
 8001f2e:	08c0      	lsrs	r0, r0, #3
 8001f30:	4307      	orrs	r7, r0
 8001f32:	2080      	movs	r0, #128	; 0x80
 8001f34:	08e4      	lsrs	r4, r4, #3
 8001f36:	0300      	lsls	r0, r0, #12
 8001f38:	4204      	tst	r4, r0
 8001f3a:	d007      	beq.n	8001f4c <__aeabi_dsub+0x558>
 8001f3c:	08cd      	lsrs	r5, r1, #3
 8001f3e:	4205      	tst	r5, r0
 8001f40:	d104      	bne.n	8001f4c <__aeabi_dsub+0x558>
 8001f42:	002c      	movs	r4, r5
 8001f44:	4698      	mov	r8, r3
 8001f46:	08d7      	lsrs	r7, r2, #3
 8001f48:	0749      	lsls	r1, r1, #29
 8001f4a:	430f      	orrs	r7, r1
 8001f4c:	0f7b      	lsrs	r3, r7, #29
 8001f4e:	00e4      	lsls	r4, r4, #3
 8001f50:	431c      	orrs	r4, r3
 8001f52:	00ff      	lsls	r7, r7, #3
 8001f54:	4e30      	ldr	r6, [pc, #192]	; (8002018 <__aeabi_dsub+0x624>)
 8001f56:	e5d3      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001f58:	4e2f      	ldr	r6, [pc, #188]	; (8002018 <__aeabi_dsub+0x624>)
 8001f5a:	45b4      	cmp	ip, r6
 8001f5c:	d1b4      	bne.n	8001ec8 <__aeabi_dsub+0x4d4>
 8001f5e:	000c      	movs	r4, r1
 8001f60:	0017      	movs	r7, r2
 8001f62:	4666      	mov	r6, ip
 8001f64:	e5cc      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001f66:	2700      	movs	r7, #0
 8001f68:	2400      	movs	r4, #0
 8001f6a:	e5e8      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d039      	beq.n	8001fe4 <__aeabi_dsub+0x5f0>
 8001f70:	000b      	movs	r3, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x584>
 8001f76:	e744      	b.n	8001e02 <__aeabi_dsub+0x40e>
 8001f78:	08c0      	lsrs	r0, r0, #3
 8001f7a:	0767      	lsls	r7, r4, #29
 8001f7c:	4307      	orrs	r7, r0
 8001f7e:	2080      	movs	r0, #128	; 0x80
 8001f80:	08e4      	lsrs	r4, r4, #3
 8001f82:	0300      	lsls	r0, r0, #12
 8001f84:	4204      	tst	r4, r0
 8001f86:	d0e1      	beq.n	8001f4c <__aeabi_dsub+0x558>
 8001f88:	08cb      	lsrs	r3, r1, #3
 8001f8a:	4203      	tst	r3, r0
 8001f8c:	d1de      	bne.n	8001f4c <__aeabi_dsub+0x558>
 8001f8e:	08d7      	lsrs	r7, r2, #3
 8001f90:	0749      	lsls	r1, r1, #29
 8001f92:	430f      	orrs	r7, r1
 8001f94:	001c      	movs	r4, r3
 8001f96:	e7d9      	b.n	8001f4c <__aeabi_dsub+0x558>
 8001f98:	2100      	movs	r1, #0
 8001f9a:	e771      	b.n	8001e80 <__aeabi_dsub+0x48c>
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	2700      	movs	r7, #0
 8001fa0:	e5e9      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001fa2:	002e      	movs	r6, r5
 8001fa4:	0027      	movs	r7, r4
 8001fa6:	3e20      	subs	r6, #32
 8001fa8:	40f7      	lsrs	r7, r6
 8001faa:	2d20      	cmp	r5, #32
 8001fac:	d02f      	beq.n	800200e <__aeabi_dsub+0x61a>
 8001fae:	2640      	movs	r6, #64	; 0x40
 8001fb0:	1b75      	subs	r5, r6, r5
 8001fb2:	40ac      	lsls	r4, r5
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	4320      	orrs	r0, r4
 8001fb8:	1e44      	subs	r4, r0, #1
 8001fba:	41a0      	sbcs	r0, r4
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	4338      	orrs	r0, r7
 8001fc0:	e6dc      	b.n	8001d7c <__aeabi_dsub+0x388>
 8001fc2:	2480      	movs	r4, #128	; 0x80
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	0324      	lsls	r4, r4, #12
 8001fc8:	4e13      	ldr	r6, [pc, #76]	; (8002018 <__aeabi_dsub+0x624>)
 8001fca:	2700      	movs	r7, #0
 8001fcc:	e5d3      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001fce:	4650      	mov	r0, sl
 8001fd0:	4320      	orrs	r0, r4
 8001fd2:	0007      	movs	r7, r0
 8001fd4:	1e78      	subs	r0, r7, #1
 8001fd6:	4187      	sbcs	r7, r0
 8001fd8:	2400      	movs	r4, #0
 8001fda:	18bf      	adds	r7, r7, r2
 8001fdc:	e760      	b.n	8001ea0 <__aeabi_dsub+0x4ac>
 8001fde:	000c      	movs	r4, r1
 8001fe0:	0017      	movs	r7, r2
 8001fe2:	e58d      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001fe4:	000c      	movs	r4, r1
 8001fe6:	0017      	movs	r7, r2
 8001fe8:	4e0b      	ldr	r6, [pc, #44]	; (8002018 <__aeabi_dsub+0x624>)
 8001fea:	e589      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001fec:	001e      	movs	r6, r3
 8001fee:	0027      	movs	r7, r4
 8001ff0:	3e20      	subs	r6, #32
 8001ff2:	40f7      	lsrs	r7, r6
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d00c      	beq.n	8002012 <__aeabi_dsub+0x61e>
 8001ff8:	2640      	movs	r6, #64	; 0x40
 8001ffa:	1af3      	subs	r3, r6, r3
 8001ffc:	409c      	lsls	r4, r3
 8001ffe:	4650      	mov	r0, sl
 8002000:	4320      	orrs	r0, r4
 8002002:	1e44      	subs	r4, r0, #1
 8002004:	41a0      	sbcs	r0, r4
 8002006:	4307      	orrs	r7, r0
 8002008:	2400      	movs	r4, #0
 800200a:	18bf      	adds	r7, r7, r2
 800200c:	e748      	b.n	8001ea0 <__aeabi_dsub+0x4ac>
 800200e:	2400      	movs	r4, #0
 8002010:	e7d0      	b.n	8001fb4 <__aeabi_dsub+0x5c0>
 8002012:	2400      	movs	r4, #0
 8002014:	e7f3      	b.n	8001ffe <__aeabi_dsub+0x60a>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	000007ff 	.word	0x000007ff
 800201c:	ff7fffff 	.word	0xff7fffff

08002020 <__aeabi_d2iz>:
 8002020:	b530      	push	{r4, r5, lr}
 8002022:	4d13      	ldr	r5, [pc, #76]	; (8002070 <__aeabi_d2iz+0x50>)
 8002024:	030a      	lsls	r2, r1, #12
 8002026:	004b      	lsls	r3, r1, #1
 8002028:	0b12      	lsrs	r2, r2, #12
 800202a:	0d5b      	lsrs	r3, r3, #21
 800202c:	0fc9      	lsrs	r1, r1, #31
 800202e:	2400      	movs	r4, #0
 8002030:	42ab      	cmp	r3, r5
 8002032:	dd10      	ble.n	8002056 <__aeabi_d2iz+0x36>
 8002034:	4c0f      	ldr	r4, [pc, #60]	; (8002074 <__aeabi_d2iz+0x54>)
 8002036:	42a3      	cmp	r3, r4
 8002038:	dc0f      	bgt.n	800205a <__aeabi_d2iz+0x3a>
 800203a:	2480      	movs	r4, #128	; 0x80
 800203c:	4d0e      	ldr	r5, [pc, #56]	; (8002078 <__aeabi_d2iz+0x58>)
 800203e:	0364      	lsls	r4, r4, #13
 8002040:	4322      	orrs	r2, r4
 8002042:	1aed      	subs	r5, r5, r3
 8002044:	2d1f      	cmp	r5, #31
 8002046:	dd0b      	ble.n	8002060 <__aeabi_d2iz+0x40>
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <__aeabi_d2iz+0x5c>)
 800204a:	1ac3      	subs	r3, r0, r3
 800204c:	40da      	lsrs	r2, r3
 800204e:	4254      	negs	r4, r2
 8002050:	2900      	cmp	r1, #0
 8002052:	d100      	bne.n	8002056 <__aeabi_d2iz+0x36>
 8002054:	0014      	movs	r4, r2
 8002056:	0020      	movs	r0, r4
 8002058:	bd30      	pop	{r4, r5, pc}
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <__aeabi_d2iz+0x60>)
 800205c:	18cc      	adds	r4, r1, r3
 800205e:	e7fa      	b.n	8002056 <__aeabi_d2iz+0x36>
 8002060:	4c08      	ldr	r4, [pc, #32]	; (8002084 <__aeabi_d2iz+0x64>)
 8002062:	40e8      	lsrs	r0, r5
 8002064:	46a4      	mov	ip, r4
 8002066:	4463      	add	r3, ip
 8002068:	409a      	lsls	r2, r3
 800206a:	4302      	orrs	r2, r0
 800206c:	e7ef      	b.n	800204e <__aeabi_d2iz+0x2e>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000003fe 	.word	0x000003fe
 8002074:	0000041d 	.word	0x0000041d
 8002078:	00000433 	.word	0x00000433
 800207c:	00000413 	.word	0x00000413
 8002080:	7fffffff 	.word	0x7fffffff
 8002084:	fffffbed 	.word	0xfffffbed

08002088 <__aeabi_i2d>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2800      	cmp	r0, #0
 800208c:	d030      	beq.n	80020f0 <__aeabi_i2d+0x68>
 800208e:	17c3      	asrs	r3, r0, #31
 8002090:	18c4      	adds	r4, r0, r3
 8002092:	405c      	eors	r4, r3
 8002094:	0fc5      	lsrs	r5, r0, #31
 8002096:	0020      	movs	r0, r4
 8002098:	f000 f870 	bl	800217c <__clzsi2>
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <__aeabi_i2d+0x74>)
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <__aeabi_i2d+0x78>)
 80020a0:	1a1b      	subs	r3, r3, r0
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	2a1f      	cmp	r2, #31
 80020a6:	dd18      	ble.n	80020da <__aeabi_i2d+0x52>
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <__aeabi_i2d+0x7c>)
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	4094      	lsls	r4, r2
 80020ae:	2200      	movs	r2, #0
 80020b0:	0324      	lsls	r4, r4, #12
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	0b24      	lsrs	r4, r4, #12
 80020b6:	0d5b      	lsrs	r3, r3, #21
 80020b8:	2100      	movs	r1, #0
 80020ba:	0010      	movs	r0, r2
 80020bc:	0324      	lsls	r4, r4, #12
 80020be:	0d0a      	lsrs	r2, r1, #20
 80020c0:	0b24      	lsrs	r4, r4, #12
 80020c2:	0512      	lsls	r2, r2, #20
 80020c4:	4322      	orrs	r2, r4
 80020c6:	4c10      	ldr	r4, [pc, #64]	; (8002108 <__aeabi_i2d+0x80>)
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	4022      	ands	r2, r4
 80020cc:	4313      	orrs	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	07ed      	lsls	r5, r5, #31
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	432b      	orrs	r3, r5
 80020d6:	0019      	movs	r1, r3
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
 80020da:	0021      	movs	r1, r4
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	210b      	movs	r1, #11
 80020e2:	1a08      	subs	r0, r1, r0
 80020e4:	40c4      	lsrs	r4, r0
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	0324      	lsls	r4, r4, #12
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	e7e3      	b.n	80020b8 <__aeabi_i2d+0x30>
 80020f0:	2500      	movs	r5, #0
 80020f2:	2300      	movs	r3, #0
 80020f4:	2400      	movs	r4, #0
 80020f6:	2200      	movs	r2, #0
 80020f8:	e7de      	b.n	80020b8 <__aeabi_i2d+0x30>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	0000041e 	.word	0x0000041e
 8002100:	00000433 	.word	0x00000433
 8002104:	00000413 	.word	0x00000413
 8002108:	800fffff 	.word	0x800fffff

0800210c <__aeabi_ui2d>:
 800210c:	b510      	push	{r4, lr}
 800210e:	1e04      	subs	r4, r0, #0
 8002110:	d028      	beq.n	8002164 <__aeabi_ui2d+0x58>
 8002112:	f000 f833 	bl	800217c <__clzsi2>
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <__aeabi_ui2d+0x60>)
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <__aeabi_ui2d+0x64>)
 800211a:	1a1b      	subs	r3, r3, r0
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	2a1f      	cmp	r2, #31
 8002120:	dd15      	ble.n	800214e <__aeabi_ui2d+0x42>
 8002122:	4a14      	ldr	r2, [pc, #80]	; (8002174 <__aeabi_ui2d+0x68>)
 8002124:	1ad2      	subs	r2, r2, r3
 8002126:	4094      	lsls	r4, r2
 8002128:	2200      	movs	r2, #0
 800212a:	0324      	lsls	r4, r4, #12
 800212c:	055b      	lsls	r3, r3, #21
 800212e:	0b24      	lsrs	r4, r4, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	2100      	movs	r1, #0
 8002134:	0010      	movs	r0, r2
 8002136:	0324      	lsls	r4, r4, #12
 8002138:	0d0a      	lsrs	r2, r1, #20
 800213a:	0b24      	lsrs	r4, r4, #12
 800213c:	0512      	lsls	r2, r2, #20
 800213e:	4322      	orrs	r2, r4
 8002140:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <__aeabi_ui2d+0x6c>)
 8002142:	051b      	lsls	r3, r3, #20
 8002144:	4022      	ands	r2, r4
 8002146:	4313      	orrs	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	0859      	lsrs	r1, r3, #1
 800214c:	bd10      	pop	{r4, pc}
 800214e:	0021      	movs	r1, r4
 8002150:	4091      	lsls	r1, r2
 8002152:	000a      	movs	r2, r1
 8002154:	210b      	movs	r1, #11
 8002156:	1a08      	subs	r0, r1, r0
 8002158:	40c4      	lsrs	r4, r0
 800215a:	055b      	lsls	r3, r3, #21
 800215c:	0324      	lsls	r4, r4, #12
 800215e:	0b24      	lsrs	r4, r4, #12
 8002160:	0d5b      	lsrs	r3, r3, #21
 8002162:	e7e6      	b.n	8002132 <__aeabi_ui2d+0x26>
 8002164:	2300      	movs	r3, #0
 8002166:	2400      	movs	r4, #0
 8002168:	2200      	movs	r2, #0
 800216a:	e7e2      	b.n	8002132 <__aeabi_ui2d+0x26>
 800216c:	0000041e 	.word	0x0000041e
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	800fffff 	.word	0x800fffff

0800217c <__clzsi2>:
 800217c:	211c      	movs	r1, #28
 800217e:	2301      	movs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	4298      	cmp	r0, r3
 8002184:	d301      	bcc.n	800218a <__clzsi2+0xe>
 8002186:	0c00      	lsrs	r0, r0, #16
 8002188:	3910      	subs	r1, #16
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	4298      	cmp	r0, r3
 800218e:	d301      	bcc.n	8002194 <__clzsi2+0x18>
 8002190:	0a00      	lsrs	r0, r0, #8
 8002192:	3908      	subs	r1, #8
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	4298      	cmp	r0, r3
 8002198:	d301      	bcc.n	800219e <__clzsi2+0x22>
 800219a:	0900      	lsrs	r0, r0, #4
 800219c:	3904      	subs	r1, #4
 800219e:	a202      	add	r2, pc, #8	; (adr r2, 80021a8 <__clzsi2+0x2c>)
 80021a0:	5c10      	ldrb	r0, [r2, r0]
 80021a2:	1840      	adds	r0, r0, r1
 80021a4:	4770      	bx	lr
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	02020304 	.word	0x02020304
 80021ac:	01010101 	.word	0x01010101
	...

080021b8 <__clzdi2>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	2900      	cmp	r1, #0
 80021bc:	d103      	bne.n	80021c6 <__clzdi2+0xe>
 80021be:	f7ff ffdd 	bl	800217c <__clzsi2>
 80021c2:	3020      	adds	r0, #32
 80021c4:	e002      	b.n	80021cc <__clzdi2+0x14>
 80021c6:	1c08      	adds	r0, r1, #0
 80021c8:	f7ff ffd8 	bl	800217c <__clzsi2>
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)

080021d0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	0002      	movs	r2, r0
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d015      	beq.n	8002210 <BSP_LED_Init+0x40>
 80021e4:	dc02      	bgt.n	80021ec <BSP_LED_Init+0x1c>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <BSP_LED_Init+0x26>
 80021ea:	e037      	b.n	800225c <BSP_LED_Init+0x8c>
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d01c      	beq.n	800222a <BSP_LED_Init+0x5a>
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d027      	beq.n	8002244 <BSP_LED_Init+0x74>
 80021f4:	e032      	b.n	800225c <BSP_LED_Init+0x8c>
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <BSP_LED_Init+0xd8>)
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <BSP_LED_Init+0xd8>)
 80021fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021fc:	2102      	movs	r1, #2
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	e025      	b.n	800225c <BSP_LED_Init+0x8c>
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <BSP_LED_Init+0xd8>)
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	e018      	b.n	800225c <BSP_LED_Init+0x8c>
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <BSP_LED_Init+0xd8>)
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <BSP_LED_Init+0xd8>)
 800222e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002230:	2102      	movs	r1, #2
 8002232:	430a      	orrs	r2, r1
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	e00b      	b.n	800225c <BSP_LED_Init+0x8c>
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800224a:	2102      	movs	r1, #2
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <BSP_LED_Init+0xdc>)
 8002264:	0052      	lsls	r2, r2, #1
 8002266:	5ad3      	ldrh	r3, [r2, r3]
 8002268:	001a      	movs	r2, r3
 800226a:	231c      	movs	r3, #28
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	231c      	movs	r3, #28
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	231c      	movs	r3, #28
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	231c      	movs	r3, #28
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2203      	movs	r2, #3
 8002286:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <BSP_LED_Init+0xe0>)
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	58d3      	ldr	r3, [r2, r3]
 8002292:	221c      	movs	r2, #28
 8002294:	18ba      	adds	r2, r7, r2
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f003 f9e1 	bl	8005660 <HAL_GPIO_Init>
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b00c      	add	sp, #48	; 0x30
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	40021000 	.word	0x40021000
 80022ac:	0800b0b8 	.word	0x0800b0b8
 80022b0:	20000000 	.word	0x20000000

080022b4 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80022bc:	4b32      	ldr	r3, [pc, #200]	; (8002388 <SX1276Init+0xd4>)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80022c2:	4a32      	ldr	r2, [pc, #200]	; (800238c <SX1276Init+0xd8>)
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <SX1276Init+0xdc>)
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f006 fc17 	bl	8008afc <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80022ce:	4a2f      	ldr	r2, [pc, #188]	; (800238c <SX1276Init+0xd8>)
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <SX1276Init+0xe0>)
 80022d2:	0011      	movs	r1, r2
 80022d4:	0018      	movs	r0, r3
 80022d6:	f006 fc11 	bl	8008afc <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80022da:	4a2c      	ldr	r2, [pc, #176]	; (800238c <SX1276Init+0xd8>)
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <SX1276Init+0xe4>)
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f006 fc0b 	bl	8008afc <TimerInit>
  
    MLM_TCXO_ON(); //TCXO ON
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	0159      	lsls	r1, r3, #5
 80022ea:	23a0      	movs	r3, #160	; 0xa0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	2201      	movs	r2, #1
 80022f0:	0018      	movs	r0, r3
 80022f2:	f006 fef9 	bl	80090e8 <HW_GPIO_Write>
  
    SX1276Reset( );
 80022f6:	f001 fb75 	bl	80039e4 <SX1276Reset>

    RxChainCalibration( );
 80022fa:	f000 f90d 	bl	8002518 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80022fe:	2000      	movs	r0, #0
 8002300:	f001 fba4 	bl	8003a4c <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <SX1276Init+0xe8>)
 8002306:	0018      	movs	r0, r3
 8002308:	f002 fa14 	bl	8004734 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e028      	b.n	8002368 <SX1276Init+0xb4>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8002316:	230f      	movs	r3, #15
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4920      	ldr	r1, [pc, #128]	; (80023a0 <SX1276Init+0xec>)
 800231e:	0013      	movs	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	189b      	adds	r3, r3, r2
 8002324:	5c5b      	ldrb	r3, [r3, r1]
 8002326:	0018      	movs	r0, r3
 8002328:	f001 fbbc 	bl	8003aa4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	491b      	ldr	r1, [pc, #108]	; (80023a0 <SX1276Init+0xec>)
 8002334:	0013      	movs	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	189b      	adds	r3, r3, r2
 800233a:	18cb      	adds	r3, r1, r3
 800233c:	3301      	adds	r3, #1
 800233e:	7818      	ldrb	r0, [r3, #0]
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	4916      	ldr	r1, [pc, #88]	; (80023a0 <SX1276Init+0xec>)
 8002348:	0013      	movs	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	189b      	adds	r3, r3, r2
 800234e:	18cb      	adds	r3, r1, r3
 8002350:	3302      	adds	r3, #2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	0019      	movs	r1, r3
 8002356:	f001 fc04 	bl	8003b62 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800235a:	230f      	movs	r3, #15
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	230f      	movs	r3, #15
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	3201      	adds	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	230f      	movs	r3, #15
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d9d1      	bls.n	8002316 <SX1276Init+0x62>
    }

    SX1276SetModem( MODEM_FSK );
 8002372:	2000      	movs	r0, #0
 8002374:	f001 fb96 	bl	8003aa4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <SX1276Init+0xf0>)
 800237a:	2200      	movs	r2, #0
 800237c:	711a      	strb	r2, [r3, #4]
    
    return RADIO_WAKEUP_TIME + BOARD_WAKEUP_TIME;
 800237e:	2305      	movs	r3, #5
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000b0 	.word	0x200000b0
 800238c:	08003d79 	.word	0x08003d79
 8002390:	200004d8 	.word	0x200004d8
 8002394:	20000560 	.word	0x20000560
 8002398:	200004ec 	.word	0x200004ec
 800239c:	20000014 	.word	0x20000014
 80023a0:	0800b0c8 	.word	0x0800b0c8
 80023a4:	20000500 	.word	0x20000500

080023a8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <SX1276GetStatus+0x10>)
 80023ae:	791b      	ldrb	r3, [r3, #4]
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	20000500 	.word	0x20000500

080023bc <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    uint32_t channel;
    
    SX1276.Settings.Channel = freq;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <SX1276SetChannel+0x74>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
    
    SX_FREQ_TO_CHANNEL(channel, freq);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4919      	ldr	r1, [pc, #100]	; (8002434 <SX1276SetChannel+0x78>)
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7fd fe9a 	bl	8000108 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <SX1276SetChannel+0x78>)
 80023dc:	4353      	muls	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	021c      	lsls	r4, r3, #8
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <SX1276SetChannel+0x7c>)
 80023ee:	4694      	mov	ip, r2
 80023f0:	4463      	add	r3, ip
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <SX1276SetChannel+0x78>)
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7fd fe87 	bl	8000108 <__udivsi3>
 80023fa:	0003      	movs	r3, r0
 80023fc:	18e3      	adds	r3, r4, r3
 80023fe:	60fb      	str	r3, [r7, #12]
    
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	b2db      	uxtb	r3, r3
 8002406:	0019      	movs	r1, r3
 8002408:	2006      	movs	r0, #6
 800240a:	f001 fbaa 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b2db      	uxtb	r3, r3
 8002414:	0019      	movs	r1, r3
 8002416:	2007      	movs	r0, #7
 8002418:	f001 fba3 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	0019      	movs	r1, r3
 8002422:	2008      	movs	r0, #8
 8002424:	f001 fb9d 	bl	8003b62 <SX1276Write>
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b007      	add	sp, #28
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000500 	.word	0x20000500
 8002434:	00003d09 	.word	0x00003d09
 8002438:	00001e84 	.word	0x00001e84

0800243c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6039      	str	r1, [r7, #0]
 8002444:	0011      	movs	r1, r2
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	1c02      	adds	r2, r0, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	1c0a      	adds	r2, r1, #0
 8002450:	801a      	strh	r2, [r3, #0]
    int16_t rssi = 0;
 8002452:	230e      	movs	r3, #14
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2200      	movs	r2, #0
 8002458:	801a      	strh	r2, [r3, #0]

    SX1276SetModem( modem );
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	f001 fb20 	bl	8003aa4 <SX1276SetModem>

    SX1276SetChannel( freq );
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff ffa8 	bl	80023bc <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800246c:	2005      	movs	r0, #5
 800246e:	f001 faed 	bl	8003a4c <SX1276SetOpMode>

    DelayMs( 1 );
 8002472:	2001      	movs	r0, #1
 8002474:	f006 faee 	bl	8008a54 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 8002478:	230e      	movs	r3, #14
 800247a:	18fc      	adds	r4, r7, r3
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f001 fa63 	bl	800394c <SX1276ReadRssi>
 8002486:	0003      	movs	r3, r0
 8002488:	8023      	strh	r3, [r4, #0]

    SX1276SetSleep( );
 800248a:	f000 ff35 	bl	80032f8 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800248e:	230e      	movs	r3, #14
 8002490:	18fa      	adds	r2, r7, r3
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2100      	movs	r1, #0
 8002496:	5e52      	ldrsh	r2, [r2, r1]
 8002498:	2100      	movs	r1, #0
 800249a:	5e5b      	ldrsh	r3, [r3, r1]
 800249c:	429a      	cmp	r2, r3
 800249e:	dd01      	ble.n	80024a4 <SX1276IsChannelFree+0x68>
    {
        return false;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <SX1276IsChannelFree+0x6a>
    }
    return true;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b005      	add	sp, #20
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <SX1276Random>:

uint32_t SX1276Random( void )
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80024b8:	2001      	movs	r0, #1
 80024ba:	f001 faf3 	bl	8003aa4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80024be:	21ff      	movs	r1, #255	; 0xff
 80024c0:	2011      	movs	r0, #17
 80024c2:	f001 fb4e 	bl	8003b62 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80024c6:	2005      	movs	r0, #5
 80024c8:	f001 fac0 	bl	8003a4c <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e015      	b.n	8002500 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80024d4:	2001      	movs	r0, #1
 80024d6:	f006 fabd 	bl	8008a54 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80024da:	202c      	movs	r0, #44	; 0x2c
 80024dc:	f001 fb55 	bl	8003b8a <SX1276Read>
 80024e0:	0003      	movs	r3, r0
 80024e2:	001a      	movs	r2, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	401a      	ands	r2, r3
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	3201      	adds	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b1f      	cmp	r3, #31
 8002506:	d9e5      	bls.n	80024d4 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8002508:	f000 fef6 	bl	80032f8 <SX1276SetSleep>

    return rnd;
 800250c:	683b      	ldr	r3, [r7, #0]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800251e:	2317      	movs	r3, #23
 8002520:	18fc      	adds	r4, r7, r3
 8002522:	2009      	movs	r0, #9
 8002524:	f001 fb31 	bl	8003b8a <SX1276Read>
 8002528:	0003      	movs	r3, r0
 800252a:	7023      	strb	r3, [r4, #0]
    
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800252c:	2006      	movs	r0, #6
 800252e:	f001 fb2c 	bl	8003b8a <SX1276Read>
 8002532:	0003      	movs	r3, r0
 8002534:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002536:	2007      	movs	r0, #7
 8002538:	f001 fb27 	bl	8003b8a <SX1276Read>
 800253c:	0003      	movs	r3, r0
 800253e:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002540:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002542:	2008      	movs	r0, #8
 8002544:	f001 fb21 	bl	8003b8a <SX1276Read>
 8002548:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800254a:	4323      	orrs	r3, r4
 800254c:	613b      	str	r3, [r7, #16]
    
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <RxChainCalibration+0xe0>)
 8002562:	435a      	muls	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4924      	ldr	r1, [pc, #144]	; (80025f8 <RxChainCalibration+0xe0>)
 8002568:	434b      	muls	r3, r1
 800256a:	3380      	adds	r3, #128	; 0x80
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	18d3      	adds	r3, r2, r3
 8002570:	607b      	str	r3, [r7, #4]
    
    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8002572:	2100      	movs	r1, #0
 8002574:	2009      	movs	r0, #9
 8002576:	f001 faf4 	bl	8003b62 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800257a:	203b      	movs	r0, #59	; 0x3b
 800257c:	f001 fb05 	bl	8003b8a <SX1276Read>
 8002580:	0003      	movs	r3, r0
 8002582:	001a      	movs	r2, r3
 8002584:	2340      	movs	r3, #64	; 0x40
 8002586:	4313      	orrs	r3, r2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	0019      	movs	r1, r3
 800258c:	203b      	movs	r0, #59	; 0x3b
 800258e:	f001 fae8 	bl	8003b62 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	203b      	movs	r0, #59	; 0x3b
 8002596:	f001 faf8 	bl	8003b8a <SX1276Read>
 800259a:	0003      	movs	r3, r0
 800259c:	001a      	movs	r2, r3
 800259e:	2320      	movs	r3, #32
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d0f6      	beq.n	8002594 <RxChainCalibration+0x7c>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <RxChainCalibration+0xe4>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff ff07 	bl	80023bc <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80025ae:	203b      	movs	r0, #59	; 0x3b
 80025b0:	f001 faeb 	bl	8003b8a <SX1276Read>
 80025b4:	0003      	movs	r3, r0
 80025b6:	001a      	movs	r2, r3
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	0019      	movs	r1, r3
 80025c0:	203b      	movs	r0, #59	; 0x3b
 80025c2:	f001 face 	bl	8003b62 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	203b      	movs	r0, #59	; 0x3b
 80025ca:	f001 fade 	bl	8003b8a <SX1276Read>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	2320      	movs	r3, #32
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d0f6      	beq.n	80025c8 <RxChainCalibration+0xb0>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80025da:	2317      	movs	r3, #23
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	0019      	movs	r1, r3
 80025e2:	2009      	movs	r0, #9
 80025e4:	f001 fabd 	bl	8003b62 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff fee6 	bl	80023bc <SX1276SetChannel>
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b007      	add	sp, #28
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	00003d09 	.word	0x00003d09
 80025fc:	33bca100 	.word	0x33bca100

08002600 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002608:	230f      	movs	r3, #15
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e022      	b.n	8002658 <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002612:	230f      	movs	r3, #15
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <GetFskBandwidthRegValue+0x6c>)
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	58d2      	ldr	r2, [r2, r3]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d812      	bhi.n	800264a <GetFskBandwidthRegValue+0x4a>
 8002624:	230f      	movs	r3, #15
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <GetFskBandwidthRegValue+0x6c>)
 800262e:	00d2      	lsls	r2, r2, #3
 8002630:	58d2      	ldr	r2, [r2, r3]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <GetFskBandwidthRegValue+0x6c>)
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	3304      	adds	r3, #4
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	e00c      	b.n	8002664 <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800264a:	230f      	movs	r3, #15
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	3201      	adds	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b14      	cmp	r3, #20
 8002660:	d9d7      	bls.n	8002612 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8002662:	e7fe      	b.n	8002662 <GetFskBandwidthRegValue+0x62>
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	0800b0f8 	.word	0x0800b0f8

08002670 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	0019      	movs	r1, r3
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	1c02      	adds	r2, r0, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	230e      	movs	r3, #14
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	1c0a      	adds	r2, r1, #0
 800268a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 800268c:	230f      	movs	r3, #15
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	0018      	movs	r0, r3
 8002694:	f001 fa06 	bl	8003aa4 <SX1276SetModem>

    switch( modem )
 8002698:	230f      	movs	r3, #15
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <SX1276SetRxConfig+0x3a>
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d100      	bne.n	80026a8 <SX1276SetRxConfig+0x38>
 80026a6:	e0b4      	b.n	8002812 <SX1276SetRxConfig+0x1a2>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80026a8:	e201      	b.n	8002aae <SX1276SetRxConfig+0x43e>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80026aa:	4be5      	ldr	r3, [pc, #916]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80026b0:	4be3      	ldr	r3, [pc, #908]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80026b6:	4be2      	ldr	r3, [pc, #904]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80026bc:	4be0      	ldr	r3, [pc, #896]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026be:	222c      	movs	r2, #44	; 0x2c
 80026c0:	18ba      	adds	r2, r7, r2
 80026c2:	2122      	movs	r1, #34	; 0x22
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80026c8:	4bdd      	ldr	r3, [pc, #884]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026ca:	2230      	movs	r2, #48	; 0x30
 80026cc:	18ba      	adds	r2, r7, r2
 80026ce:	2123      	movs	r1, #35	; 0x23
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80026d4:	4bda      	ldr	r3, [pc, #872]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026d6:	2234      	movs	r2, #52	; 0x34
 80026d8:	18ba      	adds	r2, r7, r2
 80026da:	2124      	movs	r1, #36	; 0x24
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80026e0:	4bd7      	ldr	r3, [pc, #860]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026e2:	2220      	movs	r2, #32
 80026e4:	2120      	movs	r1, #32
 80026e6:	468c      	mov	ip, r1
 80026e8:	44bc      	add	ip, r7
 80026ea:	4462      	add	r2, ip
 80026ec:	2125      	movs	r1, #37	; 0x25
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80026f2:	4bd3      	ldr	r3, [pc, #844]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026f4:	2224      	movs	r2, #36	; 0x24
 80026f6:	2120      	movs	r1, #32
 80026f8:	468c      	mov	ip, r1
 80026fa:	44bc      	add	ip, r7
 80026fc:	4462      	add	r2, ip
 80026fe:	2126      	movs	r1, #38	; 0x26
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002704:	4bce      	ldr	r3, [pc, #824]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	18ba      	adds	r2, r7, r2
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	841a      	strh	r2, [r3, #32]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fcfc 	bl	800210c <__aeabi_ui2d>
 8002714:	0003      	movs	r3, r0
 8002716:	000c      	movs	r4, r1
 8002718:	001a      	movs	r2, r3
 800271a:	0023      	movs	r3, r4
 800271c:	2000      	movs	r0, #0
 800271e:	49c9      	ldr	r1, [pc, #804]	; (8002a44 <SX1276SetRxConfig+0x3d4>)
 8002720:	f7fe fab4 	bl	8000c8c <__aeabi_ddiv>
 8002724:	0003      	movs	r3, r0
 8002726:	000c      	movs	r4, r1
 8002728:	0018      	movs	r0, r3
 800272a:	0021      	movs	r1, r4
 800272c:	f7fd fec0 	bl	80004b0 <__aeabi_d2uiz>
 8002730:	0003      	movs	r3, r0
 8002732:	b29b      	uxth	r3, r3
 8002734:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	b2db      	uxtb	r3, r3
 800273c:	0019      	movs	r1, r3
 800273e:	2002      	movs	r0, #2
 8002740:	f001 fa0f 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	0019      	movs	r1, r3
 800274a:	2003      	movs	r0, #3
 800274c:	f001 fa09 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0018      	movs	r0, r3
 8002754:	f7ff ff54 	bl	8002600 <GetFskBandwidthRegValue>
 8002758:	0003      	movs	r3, r0
 800275a:	0019      	movs	r1, r3
 800275c:	2012      	movs	r0, #18
 800275e:	f001 fa00 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ff4b 	bl	8002600 <GetFskBandwidthRegValue>
 800276a:	0003      	movs	r3, r0
 800276c:	0019      	movs	r1, r3
 800276e:	2013      	movs	r0, #19
 8002770:	f001 f9f7 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002774:	2324      	movs	r3, #36	; 0x24
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	0019      	movs	r1, r3
 8002782:	2025      	movs	r0, #37	; 0x25
 8002784:	f001 f9ed 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002788:	2324      	movs	r3, #36	; 0x24
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	0019      	movs	r1, r3
 8002792:	2026      	movs	r0, #38	; 0x26
 8002794:	f001 f9e5 	bl	8003b62 <SX1276Write>
            if( fixLen == 1 )
 8002798:	232c      	movs	r3, #44	; 0x2c
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <SX1276SetRxConfig+0x142>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 80027a2:	2330      	movs	r3, #48	; 0x30
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	0019      	movs	r1, r3
 80027aa:	2032      	movs	r0, #50	; 0x32
 80027ac:	f001 f9d9 	bl	8003b62 <SX1276Write>
 80027b0:	e003      	b.n	80027ba <SX1276SetRxConfig+0x14a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80027b2:	21ff      	movs	r1, #255	; 0xff
 80027b4:	2032      	movs	r0, #50	; 0x32
 80027b6:	f001 f9d4 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80027ba:	2030      	movs	r0, #48	; 0x30
 80027bc:	f001 f9e5 	bl	8003b8a <SX1276Read>
 80027c0:	0003      	movs	r3, r0
 80027c2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80027c4:	226f      	movs	r2, #111	; 0x6f
 80027c6:	4013      	ands	r3, r2
 80027c8:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80027ca:	232c      	movs	r3, #44	; 0x2c
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SX1276SetRxConfig+0x168>
 80027d4:	2300      	movs	r3, #0
 80027d6:	e001      	b.n	80027dc <SX1276SetRxConfig+0x16c>
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	425b      	negs	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80027e0:	2334      	movs	r3, #52	; 0x34
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	0019      	movs	r1, r3
 80027f2:	2030      	movs	r0, #48	; 0x30
 80027f4:	f001 f9b5 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80027f8:	2031      	movs	r0, #49	; 0x31
 80027fa:	f001 f9c6 	bl	8003b8a <SX1276Read>
 80027fe:	0003      	movs	r3, r0
 8002800:	001a      	movs	r2, r3
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	4313      	orrs	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	0019      	movs	r1, r3
 800280a:	2031      	movs	r0, #49	; 0x31
 800280c:	f001 f9a9 	bl	8003b62 <SX1276Write>
        break;
 8002810:	e14d      	b.n	8002aae <SX1276SetRxConfig+0x43e>
            if( bandwidth > 2 )
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d900      	bls.n	800281a <SX1276SetRxConfig+0x1aa>
                while( 1 );
 8002818:	e7fe      	b.n	8002818 <SX1276SetRxConfig+0x1a8>
            bandwidth += 7;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3307      	adds	r3, #7
 800281e:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002820:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 8002826:	4b86      	ldr	r3, [pc, #536]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800282e:	220e      	movs	r2, #14
 8002830:	18ba      	adds	r2, r7, r2
 8002832:	2149      	movs	r1, #73	; 0x49
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002838:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800283a:	2224      	movs	r2, #36	; 0x24
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	214a      	movs	r1, #74	; 0x4a
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002846:	222c      	movs	r2, #44	; 0x2c
 8002848:	18ba      	adds	r2, r7, r2
 800284a:	214c      	movs	r1, #76	; 0x4c
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002852:	2230      	movs	r2, #48	; 0x30
 8002854:	18ba      	adds	r2, r7, r2
 8002856:	214d      	movs	r1, #77	; 0x4d
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800285c:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800285e:	2234      	movs	r2, #52	; 0x34
 8002860:	18ba      	adds	r2, r7, r2
 8002862:	214e      	movs	r1, #78	; 0x4e
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800286a:	2238      	movs	r2, #56	; 0x38
 800286c:	18ba      	adds	r2, r7, r2
 800286e:	214f      	movs	r1, #79	; 0x4f
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002874:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002876:	223c      	movs	r2, #60	; 0x3c
 8002878:	18ba      	adds	r2, r7, r2
 800287a:	2150      	movs	r1, #80	; 0x50
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002882:	2220      	movs	r2, #32
 8002884:	2120      	movs	r1, #32
 8002886:	468c      	mov	ip, r1
 8002888:	44bc      	add	ip, r7
 800288a:	4462      	add	r2, ip
 800288c:	2151      	movs	r1, #81	; 0x51
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002892:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002894:	2224      	movs	r2, #36	; 0x24
 8002896:	2120      	movs	r1, #32
 8002898:	468c      	mov	ip, r1
 800289a:	44bc      	add	ip, r7
 800289c:	4462      	add	r2, ip
 800289e:	2152      	movs	r1, #82	; 0x52
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d902      	bls.n	80028b0 <SX1276SetRxConfig+0x240>
                datarate = 12;
 80028aa:	230c      	movs	r3, #12
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	e004      	b.n	80028ba <SX1276SetRxConfig+0x24a>
            else if( datarate < 6 )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d801      	bhi.n	80028ba <SX1276SetRxConfig+0x24a>
                datarate = 6;
 80028b6:	2306      	movs	r3, #6
 80028b8:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b07      	cmp	r3, #7
 80028be:	d105      	bne.n	80028cc <SX1276SetRxConfig+0x25c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b0b      	cmp	r3, #11
 80028c4:	d008      	beq.n	80028d8 <SX1276SetRxConfig+0x268>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d005      	beq.n	80028d8 <SX1276SetRxConfig+0x268>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d107      	bne.n	80028e2 <SX1276SetRxConfig+0x272>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d104      	bne.n	80028e2 <SX1276SetRxConfig+0x272>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80028da:	2248      	movs	r2, #72	; 0x48
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]
 80028e0:	e003      	b.n	80028ea <SX1276SetRxConfig+0x27a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80028e4:	2248      	movs	r2, #72	; 0x48
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80028ea:	201d      	movs	r0, #29
 80028ec:	f001 f94d 	bl	8003b8a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	230e      	movs	r3, #14
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	18db      	adds	r3, r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002906:	232c      	movs	r3, #44	; 0x2c
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800290c:	4313      	orrs	r3, r2
 800290e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002910:	0019      	movs	r1, r3
 8002912:	201d      	movs	r0, #29
 8002914:	f001 f925 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002918:	201e      	movs	r0, #30
 800291a:	f001 f936 	bl	8003b8a <SX1276Read>
 800291e:	0003      	movs	r3, r0
 8002920:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002922:	2308      	movs	r3, #8
 8002924:	4013      	ands	r3, r2
 8002926:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8002930:	4313      	orrs	r3, r2
 8002932:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002934:	2334      	movs	r3, #52	; 0x34
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002942:	2328      	movs	r3, #40	; 0x28
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	b29b      	uxth	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2103      	movs	r1, #3
 8002950:	400b      	ands	r3, r1
 8002952:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002954:	4313      	orrs	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	0019      	movs	r1, r3
 800295a:	201e      	movs	r0, #30
 800295c:	f001 f901 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002960:	2026      	movs	r0, #38	; 0x26
 8002962:	f001 f912 	bl	8003b8a <SX1276Read>
 8002966:	0003      	movs	r3, r0
 8002968:	b25b      	sxtb	r3, r3
 800296a:	2208      	movs	r2, #8
 800296c:	4393      	bics	r3, r2
 800296e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002972:	2148      	movs	r1, #72	; 0x48
 8002974:	5c5b      	ldrb	r3, [r3, r1]
 8002976:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002978:	b25b      	sxtb	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800297e:	b2db      	uxtb	r3, r3
 8002980:	0019      	movs	r1, r3
 8002982:	2026      	movs	r0, #38	; 0x26
 8002984:	f001 f8ed 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002988:	2328      	movs	r3, #40	; 0x28
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	0019      	movs	r1, r3
 8002992:	201f      	movs	r0, #31
 8002994:	f001 f8e5 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002998:	2324      	movs	r3, #36	; 0x24
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	0019      	movs	r1, r3
 80029a6:	2020      	movs	r0, #32
 80029a8:	f001 f8db 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80029ac:	2324      	movs	r3, #36	; 0x24
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	0019      	movs	r1, r3
 80029b6:	2021      	movs	r0, #33	; 0x21
 80029b8:	f001 f8d3 	bl	8003b62 <SX1276Write>
            if( fixLen == 1 )
 80029bc:	232c      	movs	r3, #44	; 0x2c
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <SX1276SetRxConfig+0x364>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80029c6:	2330      	movs	r3, #48	; 0x30
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	0019      	movs	r1, r3
 80029ce:	2022      	movs	r0, #34	; 0x22
 80029d0:	f001 f8c7 	bl	8003b62 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80029d6:	224f      	movs	r2, #79	; 0x4f
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <SX1276SetRxConfig+0x396>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80029de:	2044      	movs	r0, #68	; 0x44
 80029e0:	f001 f8d3 	bl	8003b8a <SX1276Read>
 80029e4:	0003      	movs	r3, r0
 80029e6:	001a      	movs	r2, r3
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	425b      	negs	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	0019      	movs	r1, r3
 80029f2:	2044      	movs	r0, #68	; 0x44
 80029f4:	f001 f8b5 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80029fa:	2250      	movs	r2, #80	; 0x50
 80029fc:	5c9b      	ldrb	r3, [r3, r2]
 80029fe:	0019      	movs	r1, r3
 8002a00:	2024      	movs	r0, #36	; 0x24
 8002a02:	f001 f8ae 	bl	8003b62 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	d10d      	bne.n	8002a28 <SX1276SetRxConfig+0x3b8>
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <SX1276SetRxConfig+0x3d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d908      	bls.n	8002a28 <SX1276SetRxConfig+0x3b8>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002a16:	2102      	movs	r1, #2
 8002a18:	2036      	movs	r0, #54	; 0x36
 8002a1a:	f001 f8a2 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	203a      	movs	r0, #58	; 0x3a
 8002a22:	f001 f89e 	bl	8003b62 <SX1276Write>
 8002a26:	e015      	b.n	8002a54 <SX1276SetRxConfig+0x3e4>
            else if( bandwidth == 9 )
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d10e      	bne.n	8002a4c <SX1276SetRxConfig+0x3dc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002a2e:	2102      	movs	r1, #2
 8002a30:	2036      	movs	r0, #54	; 0x36
 8002a32:	f001 f896 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8002a36:	217f      	movs	r1, #127	; 0x7f
 8002a38:	203a      	movs	r0, #58	; 0x3a
 8002a3a:	f001 f892 	bl	8003b62 <SX1276Write>
 8002a3e:	e009      	b.n	8002a54 <SX1276SetRxConfig+0x3e4>
 8002a40:	20000500 	.word	0x20000500
 8002a44:	417e8480 	.word	0x417e8480
 8002a48:	1f4add40 	.word	0x1f4add40
                SX1276Write( REG_LR_TEST36, 0x03 );
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	2036      	movs	r0, #54	; 0x36
 8002a50:	f001 f887 	bl	8003b62 <SX1276Write>
            if( datarate == 6 )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d114      	bne.n	8002a84 <SX1276SetRxConfig+0x414>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002a5a:	2031      	movs	r0, #49	; 0x31
 8002a5c:	f001 f895 	bl	8003b8a <SX1276Read>
 8002a60:	0003      	movs	r3, r0
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	2207      	movs	r2, #7
 8002a66:	4393      	bics	r3, r2
 8002a68:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	0019      	movs	r1, r3
 8002a74:	2031      	movs	r0, #49	; 0x31
 8002a76:	f001 f874 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002a7a:	210c      	movs	r1, #12
 8002a7c:	2037      	movs	r0, #55	; 0x37
 8002a7e:	f001 f870 	bl	8003b62 <SX1276Write>
        break;
 8002a82:	e013      	b.n	8002aac <SX1276SetRxConfig+0x43c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002a84:	2031      	movs	r0, #49	; 0x31
 8002a86:	f001 f880 	bl	8003b8a <SX1276Read>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	2207      	movs	r2, #7
 8002a90:	4393      	bics	r3, r2
 8002a92:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002a94:	2203      	movs	r2, #3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	2031      	movs	r0, #49	; 0x31
 8002aa0:	f001 f85f 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002aa4:	210a      	movs	r1, #10
 8002aa6:	2037      	movs	r0, #55	; 0x37
 8002aa8:	f001 f85b 	bl	8003b62 <SX1276Write>
        break;
 8002aac:	46c0      	nop			; (mov r8, r8)
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b005      	add	sp, #20
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)

08002ab8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60ba      	str	r2, [r7, #8]
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	230f      	movs	r3, #15
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	1c02      	adds	r2, r0, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	230e      	movs	r3, #14
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	1c0a      	adds	r2, r1, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 ffe3 	bl	8003aa4 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8002ade:	230e      	movs	r3, #14
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f001 fe86 	bl	80047f8 <SX1276SetRfTxPower>

    switch( modem )
 8002aec:	230f      	movs	r3, #15
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <SX1276SetTxConfig+0x46>
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d100      	bne.n	8002afc <SX1276SetTxConfig+0x44>
 8002afa:	e0a4      	b.n	8002c46 <SX1276SetTxConfig+0x18e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002afc:	e1a2      	b.n	8002e44 <SX1276SetTxConfig+0x38c>
            SX1276.Settings.Fsk.Power = power;
 8002afe:	4bd3      	ldr	r3, [pc, #844]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b00:	220e      	movs	r2, #14
 8002b02:	18ba      	adds	r2, r7, r2
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8002b08:	4bd0      	ldr	r3, [pc, #832]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002b0e:	4bcf      	ldr	r3, [pc, #828]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002b14:	4bcd      	ldr	r3, [pc, #820]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002b1a:	4bcc      	ldr	r3, [pc, #816]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b1c:	2228      	movs	r2, #40	; 0x28
 8002b1e:	18ba      	adds	r2, r7, r2
 8002b20:	8812      	ldrh	r2, [r2, #0]
 8002b22:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002b24:	4bc9      	ldr	r3, [pc, #804]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b26:	222c      	movs	r2, #44	; 0x2c
 8002b28:	18ba      	adds	r2, r7, r2
 8002b2a:	2122      	movs	r1, #34	; 0x22
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002b30:	4bc6      	ldr	r3, [pc, #792]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b32:	2230      	movs	r2, #48	; 0x30
 8002b34:	18ba      	adds	r2, r7, r2
 8002b36:	2124      	movs	r1, #36	; 0x24
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002b3c:	4bc3      	ldr	r3, [pc, #780]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b3e:	223c      	movs	r2, #60	; 0x3c
 8002b40:	18ba      	adds	r2, r7, r2
 8002b42:	2125      	movs	r1, #37	; 0x25
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8002b48:	4bc0      	ldr	r3, [pc, #768]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002b4e:	68b8      	ldr	r0, [r7, #8]
 8002b50:	f7ff fadc 	bl	800210c <__aeabi_ui2d>
 8002b54:	2200      	movs	r2, #0
 8002b56:	4bbe      	ldr	r3, [pc, #760]	; (8002e50 <SX1276SetTxConfig+0x398>)
 8002b58:	f7fe f898 	bl	8000c8c <__aeabi_ddiv>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	000c      	movs	r4, r1
 8002b60:	0018      	movs	r0, r3
 8002b62:	0021      	movs	r1, r4
 8002b64:	f7fd fca4 	bl	80004b0 <__aeabi_d2uiz>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	0019      	movs	r1, r3
 8002b76:	2004      	movs	r0, #4
 8002b78:	f000 fff3 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	0019      	movs	r1, r3
 8002b82:	2005      	movs	r0, #5
 8002b84:	f000 ffed 	bl	8003b62 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002b88:	6a38      	ldr	r0, [r7, #32]
 8002b8a:	f7ff fabf 	bl	800210c <__aeabi_ui2d>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	000c      	movs	r4, r1
 8002b92:	001a      	movs	r2, r3
 8002b94:	0023      	movs	r3, r4
 8002b96:	2000      	movs	r0, #0
 8002b98:	49ae      	ldr	r1, [pc, #696]	; (8002e54 <SX1276SetTxConfig+0x39c>)
 8002b9a:	f7fe f877 	bl	8000c8c <__aeabi_ddiv>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	000c      	movs	r4, r1
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	0021      	movs	r1, r4
 8002ba6:	f7fd fc83 	bl	80004b0 <__aeabi_d2uiz>
 8002baa:	0003      	movs	r3, r0
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f000 ffd2 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 ffcc 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002bca:	2328      	movs	r3, #40	; 0x28
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	2025      	movs	r0, #37	; 0x25
 8002bda:	f000 ffc2 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002bde:	2328      	movs	r3, #40	; 0x28
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	0019      	movs	r1, r3
 8002be8:	2026      	movs	r0, #38	; 0x26
 8002bea:	f000 ffba 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002bee:	2030      	movs	r0, #48	; 0x30
 8002bf0:	f000 ffcb 	bl	8003b8a <SX1276Read>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002bf8:	226f      	movs	r2, #111	; 0x6f
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002bfe:	232c      	movs	r3, #44	; 0x2c
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <SX1276SetTxConfig+0x154>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e001      	b.n	8002c10 <SX1276SetTxConfig+0x158>
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	425b      	negs	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002c14:	2330      	movs	r3, #48	; 0x30
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	0019      	movs	r1, r3
 8002c26:	2030      	movs	r0, #48	; 0x30
 8002c28:	f000 ff9b 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002c2c:	2031      	movs	r0, #49	; 0x31
 8002c2e:	f000 ffac 	bl	8003b8a <SX1276Read>
 8002c32:	0003      	movs	r3, r0
 8002c34:	001a      	movs	r2, r3
 8002c36:	2340      	movs	r3, #64	; 0x40
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	2031      	movs	r0, #49	; 0x31
 8002c40:	f000 ff8f 	bl	8003b62 <SX1276Write>
        break;
 8002c44:	e0fe      	b.n	8002e44 <SX1276SetTxConfig+0x38c>
            SX1276.Settings.LoRa.Power = power;
 8002c46:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c48:	220e      	movs	r2, #14
 8002c4a:	18ba      	adds	r2, r7, r2
 8002c4c:	213c      	movs	r1, #60	; 0x3c
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d900      	bls.n	8002c5a <SX1276SetTxConfig+0x1a2>
                while( 1 );
 8002c58:	e7fe      	b.n	8002c58 <SX1276SetTxConfig+0x1a0>
            bandwidth += 7;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3307      	adds	r3, #7
 8002c5e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002c60:	4b7a      	ldr	r3, [pc, #488]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 8002c66:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8002c6c:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	18ba      	adds	r2, r7, r2
 8002c72:	2149      	movs	r1, #73	; 0x49
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002c78:	4b74      	ldr	r3, [pc, #464]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c7a:	2228      	movs	r2, #40	; 0x28
 8002c7c:	18ba      	adds	r2, r7, r2
 8002c7e:	214a      	movs	r1, #74	; 0x4a
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c86:	222c      	movs	r2, #44	; 0x2c
 8002c88:	18ba      	adds	r2, r7, r2
 8002c8a:	214c      	movs	r1, #76	; 0x4c
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002c90:	4b6e      	ldr	r3, [pc, #440]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c92:	2234      	movs	r2, #52	; 0x34
 8002c94:	18ba      	adds	r2, r7, r2
 8002c96:	214f      	movs	r1, #79	; 0x4f
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c9e:	2238      	movs	r2, #56	; 0x38
 8002ca0:	18ba      	adds	r2, r7, r2
 8002ca2:	2150      	movs	r1, #80	; 0x50
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002caa:	2230      	movs	r2, #48	; 0x30
 8002cac:	18ba      	adds	r2, r7, r2
 8002cae:	214e      	movs	r1, #78	; 0x4e
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002cb4:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002cb6:	223c      	movs	r2, #60	; 0x3c
 8002cb8:	18ba      	adds	r2, r7, r2
 8002cba:	2151      	movs	r1, #81	; 0x51
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8002cc0:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
            if( datarate > 12 )
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d902      	bls.n	8002cd2 <SX1276SetTxConfig+0x21a>
                datarate = 12;
 8002ccc:	230c      	movs	r3, #12
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	e004      	b.n	8002cdc <SX1276SetTxConfig+0x224>
            else if( datarate < 6 )
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d801      	bhi.n	8002cdc <SX1276SetTxConfig+0x224>
                datarate = 6;
 8002cd8:	2306      	movs	r3, #6
 8002cda:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b07      	cmp	r3, #7
 8002ce0:	d105      	bne.n	8002cee <SX1276SetTxConfig+0x236>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b0b      	cmp	r3, #11
 8002ce6:	d008      	beq.n	8002cfa <SX1276SetTxConfig+0x242>
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d005      	beq.n	8002cfa <SX1276SetTxConfig+0x242>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d107      	bne.n	8002d04 <SX1276SetTxConfig+0x24c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d104      	bne.n	8002d04 <SX1276SetTxConfig+0x24c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002cfc:	2248      	movs	r2, #72	; 0x48
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	e003      	b.n	8002d0c <SX1276SetTxConfig+0x254>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002d04:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002d06:	2248      	movs	r2, #72	; 0x48
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002d0c:	4b4f      	ldr	r3, [pc, #316]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002d0e:	224f      	movs	r2, #79	; 0x4f
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <SX1276SetTxConfig+0x286>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002d16:	2044      	movs	r0, #68	; 0x44
 8002d18:	f000 ff37 	bl	8003b8a <SX1276Read>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	001a      	movs	r2, r3
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	425b      	negs	r3, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	0019      	movs	r1, r3
 8002d2a:	2044      	movs	r0, #68	; 0x44
 8002d2c:	f000 ff19 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002d32:	2250      	movs	r2, #80	; 0x50
 8002d34:	5c9b      	ldrb	r3, [r3, r2]
 8002d36:	0019      	movs	r1, r3
 8002d38:	2024      	movs	r0, #36	; 0x24
 8002d3a:	f000 ff12 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002d3e:	201d      	movs	r0, #29
 8002d40:	f000 ff23 	bl	8003b8a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	2324      	movs	r3, #36	; 0x24
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002d5a:	232c      	movs	r3, #44	; 0x2c
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002d64:	0019      	movs	r1, r3
 8002d66:	201d      	movs	r0, #29
 8002d68:	f000 fefb 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002d6c:	201e      	movs	r0, #30
 8002d6e:	f000 ff0c 	bl	8003b8a <SX1276Read>
 8002d72:	0003      	movs	r3, r0
 8002d74:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8002d76:	230b      	movs	r3, #11
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8002d88:	2330      	movs	r3, #48	; 0x30
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	0019      	movs	r1, r3
 8002d98:	201e      	movs	r0, #30
 8002d9a:	f000 fee2 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002d9e:	2026      	movs	r0, #38	; 0x26
 8002da0:	f000 fef3 	bl	8003b8a <SX1276Read>
 8002da4:	0003      	movs	r3, r0
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	2208      	movs	r2, #8
 8002daa:	4393      	bics	r3, r2
 8002dac:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002dae:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002db0:	2148      	movs	r1, #72	; 0x48
 8002db2:	5c5b      	ldrb	r3, [r3, r1]
 8002db4:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	2026      	movs	r0, #38	; 0x26
 8002dc2:	f000 fece 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002dc6:	2328      	movs	r3, #40	; 0x28
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	2020      	movs	r0, #32
 8002dd6:	f000 fec4 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8002dda:	2328      	movs	r3, #40	; 0x28
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	0019      	movs	r1, r3
 8002de4:	2021      	movs	r0, #33	; 0x21
 8002de6:	f000 febc 	bl	8003b62 <SX1276Write>
            if( datarate == 6 )
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	d114      	bne.n	8002e1a <SX1276SetTxConfig+0x362>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002df0:	2031      	movs	r0, #49	; 0x31
 8002df2:	f000 feca 	bl	8003b8a <SX1276Read>
 8002df6:	0003      	movs	r3, r0
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e00:	2205      	movs	r2, #5
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	0019      	movs	r1, r3
 8002e0a:	2031      	movs	r0, #49	; 0x31
 8002e0c:	f000 fea9 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e10:	210c      	movs	r1, #12
 8002e12:	2037      	movs	r0, #55	; 0x37
 8002e14:	f000 fea5 	bl	8003b62 <SX1276Write>
        break;
 8002e18:	e013      	b.n	8002e42 <SX1276SetTxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e1a:	2031      	movs	r0, #49	; 0x31
 8002e1c:	f000 feb5 	bl	8003b8a <SX1276Read>
 8002e20:	0003      	movs	r3, r0
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	2207      	movs	r2, #7
 8002e26:	4393      	bics	r3, r2
 8002e28:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	0019      	movs	r1, r3
 8002e34:	2031      	movs	r0, #49	; 0x31
 8002e36:	f000 fe94 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e3a:	210a      	movs	r1, #10
 8002e3c:	2037      	movs	r0, #55	; 0x37
 8002e3e:	f000 fe90 	bl	8003b62 <SX1276Write>
        break;
 8002e42:	46c0      	nop			; (mov r8, r8)
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b005      	add	sp, #20
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	20000500 	.word	0x20000500
 8002e50:	404e8480 	.word	0x404e8480
 8002e54:	417e8480 	.word	0x417e8480

08002e58 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b095      	sub	sp, #84	; 0x54
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	0002      	movs	r2, r0
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	1c0a      	adds	r2, r1, #0
 8002e68:	701a      	strb	r2, [r3, #0]
    double airTime = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e70:	64fc      	str	r4, [r7, #76]	; 0x4c

    switch( modem )
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <SX1276GetTimeOnAir+0x2a>
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d100      	bne.n	8002e80 <SX1276GetTimeOnAir+0x28>
 8002e7e:	e082      	b.n	8002f86 <SX1276GetTimeOnAir+0x12e>
 8002e80:	e15c      	b.n	800313c <SX1276GetTimeOnAir+0x2e4>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002e82:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002e84:	8c1b      	ldrh	r3, [r3, #32]
 8002e86:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e88:	2027      	movs	r0, #39	; 0x27
 8002e8a:	f000 fe7e 	bl	8003b8a <SX1276Read>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	001a      	movs	r2, r3
 8002e92:	23f8      	movs	r3, #248	; 0xf8
 8002e94:	439a      	bics	r2, r3
 8002e96:	0013      	movs	r3, r2
 8002e98:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002e9a:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff f8f3 	bl	8002088 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ea2:	4bab      	ldr	r3, [pc, #684]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002ea4:	2222      	movs	r2, #34	; 0x22
 8002ea6:	5c9b      	ldrb	r3, [r3, r2]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <SX1276GetTimeOnAir+0x5a>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2400      	movs	r4, #0
 8002eb0:	e001      	b.n	8002eb6 <SX1276GetTimeOnAir+0x5e>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4ca7      	ldr	r4, [pc, #668]	; (8003154 <SX1276GetTimeOnAir+0x2fc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	0023      	movs	r3, r4
 8002eba:	f7fd fbd7 	bl	800066c <__aeabi_dadd>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	000c      	movs	r4, r1
 8002ec2:	001d      	movs	r5, r3
 8002ec4:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002ec6:	2030      	movs	r0, #48	; 0x30
 8002ec8:	f000 fe5f 	bl	8003b8a <SX1276Read>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	001a      	movs	r2, r3
 8002ed0:	23f9      	movs	r3, #249	; 0xf9
 8002ed2:	439a      	bics	r2, r3
 8002ed4:	1e13      	subs	r3, r2, #0
 8002ed6:	d002      	beq.n	8002ede <SX1276GetTimeOnAir+0x86>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	4c9e      	ldr	r4, [pc, #632]	; (8003154 <SX1276GetTimeOnAir+0x2fc>)
 8002edc:	e001      	b.n	8002ee2 <SX1276GetTimeOnAir+0x8a>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	0023      	movs	r3, r4
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	0031      	movs	r1, r6
 8002eea:	f7fd fbbf 	bl	800066c <__aeabi_dadd>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	000c      	movs	r4, r1
 8002ef2:	0025      	movs	r5, r4
 8002ef4:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff f8c4 	bl	8002088 <__aeabi_i2d>
 8002f00:	0002      	movs	r2, r0
 8002f02:	000b      	movs	r3, r1
 8002f04:	0020      	movs	r0, r4
 8002f06:	0029      	movs	r1, r5
 8002f08:	f7fd fbb0 	bl	800066c <__aeabi_dadd>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	000c      	movs	r4, r1
 8002f10:	0018      	movs	r0, r3
 8002f12:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002f14:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002f16:	2224      	movs	r2, #36	; 0x24
 8002f18:	5c9b      	ldrb	r3, [r3, r2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <SX1276GetTimeOnAir+0xce>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2480      	movs	r4, #128	; 0x80
 8002f22:	05e4      	lsls	r4, r4, #23
 8002f24:	e001      	b.n	8002f2a <SX1276GetTimeOnAir+0xd2>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2400      	movs	r4, #0
                                     pktLen +
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	0023      	movs	r3, r4
 8002f2e:	f7fd fb9d 	bl	800066c <__aeabi_dadd>
 8002f32:	0003      	movs	r3, r0
 8002f34:	000c      	movs	r4, r1
 8002f36:	0018      	movs	r0, r3
 8002f38:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4b86      	ldr	r3, [pc, #536]	; (8003158 <SX1276GetTimeOnAir+0x300>)
 8002f3e:	f7fe fad9 	bl	80014f4 <__aeabi_dmul>
 8002f42:	0003      	movs	r3, r0
 8002f44:	000c      	movs	r4, r1
 8002f46:	0025      	movs	r5, r4
 8002f48:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 8002f4a:	4b81      	ldr	r3, [pc, #516]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff f8dc 	bl	800210c <__aeabi_ui2d>
 8002f54:	0002      	movs	r2, r0
 8002f56:	000b      	movs	r3, r1
 8002f58:	0020      	movs	r0, r4
 8002f5a:	0029      	movs	r1, r5
 8002f5c:	f7fd fe96 	bl	8000c8c <__aeabi_ddiv>
 8002f60:	0003      	movs	r3, r0
 8002f62:	000c      	movs	r4, r1
 8002f64:	0018      	movs	r0, r3
 8002f66:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	; (800315c <SX1276GetTimeOnAir+0x304>)
 8002f6c:	f7fe fac2 	bl	80014f4 <__aeabi_dmul>
 8002f70:	0003      	movs	r3, r0
 8002f72:	000c      	movs	r4, r1
 8002f74:	0018      	movs	r0, r3
 8002f76:	0021      	movs	r1, r4
 8002f78:	f008 f84c 	bl	800b014 <round>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	000c      	movs	r4, r1
 8002f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f82:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 8002f84:	e0da      	b.n	800313c <SX1276GetTimeOnAir+0x2e4>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	2400      	movs	r4, #0
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8c:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002f8e:	4b70      	ldr	r3, [pc, #448]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d008      	beq.n	8002fa8 <SX1276GetTimeOnAir+0x150>
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d00b      	beq.n	8002fb2 <SX1276GetTimeOnAir+0x15a>
 8002f9a:	2b07      	cmp	r3, #7
 8002f9c:	d10e      	bne.n	8002fbc <SX1276GetTimeOnAir+0x164>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	4c6f      	ldr	r4, [pc, #444]	; (8003160 <SX1276GetTimeOnAir+0x308>)
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa4:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8002fa6:	e009      	b.n	8002fbc <SX1276GetTimeOnAir+0x164>
            case 8: // 250 kHz
                bw = 250e3;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	4c6e      	ldr	r4, [pc, #440]	; (8003164 <SX1276GetTimeOnAir+0x30c>)
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
 8002fae:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8002fb0:	e004      	b.n	8002fbc <SX1276GetTimeOnAir+0x164>
            case 9: // 500 kHz
                bw = 500e3;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	4c6c      	ldr	r4, [pc, #432]	; (8003168 <SX1276GetTimeOnAir+0x310>)
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb8:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8002fba:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff f85e 	bl	8002088 <__aeabi_i2d>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	000c      	movs	r4, r1
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	0023      	movs	r3, r4
 8002fd4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fd8:	f7fd fe58 	bl	8000c8c <__aeabi_ddiv>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	000c      	movs	r4, r1
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe2:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8002fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	2000      	movs	r0, #0
 8002fea:	495a      	ldr	r1, [pc, #360]	; (8003154 <SX1276GetTimeOnAir+0x2fc>)
 8002fec:	f7fd fe4e 	bl	8000c8c <__aeabi_ddiv>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	000c      	movs	r4, r1
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff6:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002ffa:	224a      	movs	r2, #74	; 0x4a
 8002ffc:	5a9b      	ldrh	r3, [r3, r2]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff f842 	bl	8002088 <__aeabi_i2d>
 8003004:	2200      	movs	r2, #0
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <SX1276GetTimeOnAir+0x314>)
 8003008:	f7fd fb30 	bl	800066c <__aeabi_dadd>
 800300c:	0003      	movs	r3, r0
 800300e:	000c      	movs	r4, r1
 8003010:	0018      	movs	r0, r3
 8003012:	0021      	movs	r1, r4
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	f7fe fa6c 	bl	80014f4 <__aeabi_dmul>
 800301c:	0003      	movs	r3, r0
 800301e:	000c      	movs	r4, r1
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 8003022:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003024:	1dbb      	adds	r3, r7, #6
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	001a      	movs	r2, r3
 800302c:	4b48      	ldr	r3, [pc, #288]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003034:	4a46      	ldr	r2, [pc, #280]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003036:	214e      	movs	r1, #78	; 0x4e
 8003038:	5c52      	ldrb	r2, [r2, r1]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003040:	214c      	movs	r1, #76	; 0x4c
 8003042:	5c5b      	ldrb	r3, [r3, r1]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SX1276GetTimeOnAir+0x1f4>
 8003048:	2314      	movs	r3, #20
 800304a:	e000      	b.n	800304e <SX1276GetTimeOnAir+0x1f6>
 800304c:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff f85a 	bl	800210c <__aeabi_ui2d>
 8003058:	0004      	movs	r4, r0
 800305a:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800305c:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 800305e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003060:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003062:	2148      	movs	r1, #72	; 0x48
 8003064:	5c5b      	ldrb	r3, [r3, r1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	dd01      	ble.n	800306e <SX1276GetTimeOnAir+0x216>
 800306a:	2302      	movs	r3, #2
 800306c:	e000      	b.n	8003070 <SX1276GetTimeOnAir+0x218>
 800306e:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff f849 	bl	800210c <__aeabi_ui2d>
 800307a:	0002      	movs	r2, r0
 800307c:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800307e:	0020      	movs	r0, r4
 8003080:	0029      	movs	r1, r5
 8003082:	f7fd fe03 	bl	8000c8c <__aeabi_ddiv>
 8003086:	0003      	movs	r3, r0
 8003088:	000c      	movs	r4, r1
 800308a:	0018      	movs	r0, r3
 800308c:	0021      	movs	r1, r4
 800308e:	f007 febd 	bl	800ae0c <ceil>
 8003092:	0004      	movs	r4, r0
 8003094:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003098:	2249      	movs	r2, #73	; 0x49
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fe fff2 	bl	8002088 <__aeabi_i2d>
 80030a4:	0002      	movs	r2, r0
 80030a6:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80030a8:	0020      	movs	r0, r4
 80030aa:	0029      	movs	r1, r5
 80030ac:	f7fe fa22 	bl	80014f4 <__aeabi_dmul>
 80030b0:	0003      	movs	r3, r0
 80030b2:	000c      	movs	r4, r1
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80030b8:	2200      	movs	r2, #0
 80030ba:	2300      	movs	r3, #0
 80030bc:	6a38      	ldr	r0, [r7, #32]
 80030be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c0:	f7fd f9c2 	bl	8000448 <__aeabi_dcmpgt>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d008      	beq.n	80030da <SX1276GetTimeOnAir+0x282>
 80030c8:	2200      	movs	r2, #0
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <SX1276GetTimeOnAir+0x300>)
 80030cc:	6a38      	ldr	r0, [r7, #32]
 80030ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d0:	f7fd facc 	bl	800066c <__aeabi_dadd>
 80030d4:	0003      	movs	r3, r0
 80030d6:	000c      	movs	r4, r1
 80030d8:	e001      	b.n	80030de <SX1276GetTimeOnAir+0x286>
 80030da:	2300      	movs	r3, #0
 80030dc:	4c1e      	ldr	r4, [pc, #120]	; (8003158 <SX1276GetTimeOnAir+0x300>)
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 80030e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	69b8      	ldr	r0, [r7, #24]
 80030e8:	69f9      	ldr	r1, [r7, #28]
 80030ea:	f7fe fa03 	bl	80014f4 <__aeabi_dmul>
 80030ee:	0003      	movs	r3, r0
 80030f0:	000c      	movs	r4, r1
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030fe:	f7fd fab5 	bl	800066c <__aeabi_dadd>
 8003102:	0003      	movs	r3, r0
 8003104:	000c      	movs	r4, r1
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800310a:	2200      	movs	r2, #0
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <SX1276GetTimeOnAir+0x304>)
 800310e:	68b8      	ldr	r0, [r7, #8]
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	f7fe f9ef 	bl	80014f4 <__aeabi_dmul>
 8003116:	0003      	movs	r3, r0
 8003118:	000c      	movs	r4, r1
 800311a:	0018      	movs	r0, r3
 800311c:	0021      	movs	r1, r4
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <SX1276GetTimeOnAir+0x318>)
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <SX1276GetTimeOnAir+0x31c>)
 8003122:	f7fd faa3 	bl	800066c <__aeabi_dadd>
 8003126:	0003      	movs	r3, r0
 8003128:	000c      	movs	r4, r1
 800312a:	0018      	movs	r0, r3
 800312c:	0021      	movs	r1, r4
 800312e:	f007 feef 	bl	800af10 <floor>
 8003132:	0003      	movs	r3, r0
 8003134:	000c      	movs	r4, r1
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
 8003138:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 800313a:	46c0      	nop			; (mov r8, r8)
    }
    return (uint32_t) airTime;
 800313c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800313e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003140:	f7fd f9b6 	bl	80004b0 <__aeabi_d2uiz>
 8003144:	0003      	movs	r3, r0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b015      	add	sp, #84	; 0x54
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	20000500 	.word	0x20000500
 8003154:	3ff00000 	.word	0x3ff00000
 8003158:	40200000 	.word	0x40200000
 800315c:	408f4000 	.word	0x408f4000
 8003160:	40fe8480 	.word	0x40fe8480
 8003164:	410e8480 	.word	0x410e8480
 8003168:	411e8480 	.word	0x411e8480
 800316c:	40110000 	.word	0x40110000
 8003170:	d916872b 	.word	0xd916872b
 8003174:	3feff7ce 	.word	0x3feff7ce

08003178 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	000a      	movs	r2, r1
 8003182:	1cfb      	adds	r3, r7, #3
 8003184:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800318a:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <SX1276Send+0x178>)
 800318c:	795b      	ldrb	r3, [r3, #5]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <SX1276Send+0x20>
 8003192:	2b01      	cmp	r3, #1
 8003194:	d04c      	beq.n	8003230 <SX1276Send+0xb8>
 8003196:	e0a2      	b.n	80032de <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <SX1276Send+0x178>)
 800319a:	2200      	movs	r2, #0
 800319c:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = size;
 800319e:	1cfb      	adds	r3, r7, #3
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <SX1276Send+0x178>)
 80031a6:	86da      	strh	r2, [r3, #54]	; 0x36

            if( SX1276.Settings.Fsk.FixLen == false )
 80031a8:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <SX1276Send+0x178>)
 80031aa:	2222      	movs	r2, #34	; 0x22
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4053      	eors	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80031b8:	1cfb      	adds	r3, r7, #3
 80031ba:	2101      	movs	r1, #1
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fd85 	bl	8003ccc <SX1276WriteFifo>
 80031c2:	e005      	b.n	80031d0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 80031c4:	1cfb      	adds	r3, r7, #3
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	0019      	movs	r1, r3
 80031ca:	2032      	movs	r0, #50	; 0x32
 80031cc:	f000 fcc9 	bl	8003b62 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80031d0:	1cfb      	adds	r3, r7, #3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <SX1276Send+0x74>
 80031d8:	1cfb      	adds	r3, r7, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d805      	bhi.n	80031ec <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80031e0:	1cfb      	adds	r3, r7, #3
 80031e2:	7819      	ldrb	r1, [r3, #0]
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <SX1276Send+0x178>)
 80031e6:	223b      	movs	r2, #59	; 0x3b
 80031e8:	5499      	strb	r1, [r3, r2]
 80031ea:	e00b      	b.n	8003204 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80031ec:	1cfb      	adds	r3, r7, #3
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <SX1276Send+0x17c>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f005 fe8b 	bl	8008f12 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80031fc:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <SX1276Send+0x178>)
 80031fe:	223b      	movs	r2, #59	; 0x3b
 8003200:	2120      	movs	r1, #32
 8003202:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <SX1276Send+0x178>)
 8003206:	223b      	movs	r2, #59	; 0x3b
 8003208:	5c9a      	ldrb	r2, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0011      	movs	r1, r2
 800320e:	0018      	movs	r0, r3
 8003210:	f000 fd5c 	bl	8003ccc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <SX1276Send+0x178>)
 8003216:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <SX1276Send+0x178>)
 800321a:	213b      	movs	r1, #59	; 0x3b
 800321c:	5c5b      	ldrb	r3, [r3, r1]
 800321e:	b29b      	uxth	r3, r3
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <SX1276Send+0x178>)
 8003226:	871a      	strh	r2, [r3, #56]	; 0x38
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <SX1276Send+0x178>)
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800322e:	e056      	b.n	80032de <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003230:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <SX1276Send+0x178>)
 8003232:	2251      	movs	r2, #81	; 0x51
 8003234:	5c9b      	ldrb	r3, [r3, r2]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d011      	beq.n	800325e <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800323a:	2033      	movs	r0, #51	; 0x33
 800323c:	f000 fca5 	bl	8003b8a <SX1276Read>
 8003240:	0003      	movs	r3, r0
 8003242:	001a      	movs	r2, r3
 8003244:	2341      	movs	r3, #65	; 0x41
 8003246:	439a      	bics	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	0019      	movs	r1, r3
 800324e:	2033      	movs	r0, #51	; 0x33
 8003250:	f000 fc87 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003254:	2119      	movs	r1, #25
 8003256:	203b      	movs	r0, #59	; 0x3b
 8003258:	f000 fc83 	bl	8003b62 <SX1276Write>
 800325c:	e013      	b.n	8003286 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800325e:	2033      	movs	r0, #51	; 0x33
 8003260:	f000 fc93 	bl	8003b8a <SX1276Read>
 8003264:	0003      	movs	r3, r0
 8003266:	b25b      	sxtb	r3, r3
 8003268:	2241      	movs	r2, #65	; 0x41
 800326a:	4393      	bics	r3, r2
 800326c:	b25b      	sxtb	r3, r3
 800326e:	2201      	movs	r2, #1
 8003270:	4313      	orrs	r3, r2
 8003272:	b25b      	sxtb	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	0019      	movs	r1, r3
 8003278:	2033      	movs	r0, #51	; 0x33
 800327a:	f000 fc72 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800327e:	211d      	movs	r1, #29
 8003280:	203b      	movs	r0, #59	; 0x3b
 8003282:	f000 fc6e 	bl	8003b62 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003286:	1cfb      	adds	r3, r7, #3
 8003288:	7819      	ldrb	r1, [r3, #0]
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <SX1276Send+0x178>)
 800328c:	225c      	movs	r2, #92	; 0x5c
 800328e:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003290:	1cfb      	adds	r3, r7, #3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	0019      	movs	r1, r3
 8003296:	2022      	movs	r0, #34	; 0x22
 8003298:	f000 fc63 	bl	8003b62 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800329c:	2100      	movs	r1, #0
 800329e:	200e      	movs	r0, #14
 80032a0:	f000 fc5f 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80032a4:	2100      	movs	r1, #0
 80032a6:	200d      	movs	r0, #13
 80032a8:	f000 fc5b 	bl	8003b62 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80032ac:	2001      	movs	r0, #1
 80032ae:	f000 fc6c 	bl	8003b8a <SX1276Read>
 80032b2:	0003      	movs	r3, r0
 80032b4:	001a      	movs	r2, r3
 80032b6:	23f8      	movs	r3, #248	; 0xf8
 80032b8:	439a      	bics	r2, r3
 80032ba:	1e13      	subs	r3, r2, #0
 80032bc:	d104      	bne.n	80032c8 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 80032be:	f000 f835 	bl	800332c <SX1276SetStby>
                DelayMs( 1 );
 80032c2:	2001      	movs	r0, #1
 80032c4:	f005 fbc6 	bl	8008a54 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 80032c8:	1cfb      	adds	r3, r7, #3
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fcfb 	bl	8003ccc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <SX1276Send+0x178>)
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80032dc:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fa25 	bl	8003730 <SX1276SetTx>
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000500 	.word	0x20000500
 80032f4:	200000b4 	.word	0x200000b4

080032f8 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <SX1276SetSleep+0x28>)
 80032fe:	0018      	movs	r0, r3
 8003300:	f005 fd2a 	bl	8008d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <SX1276SetSleep+0x2c>)
 8003306:	0018      	movs	r0, r3
 8003308:	f005 fd26 	bl	8008d58 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800330c:	2000      	movs	r0, #0
 800330e:	f000 fb9d 	bl	8003a4c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SX1276SetSleep+0x30>)
 8003314:	2200      	movs	r2, #0
 8003316:	711a      	strb	r2, [r3, #4]
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20000560 	.word	0x20000560
 8003324:	200004d8 	.word	0x200004d8
 8003328:	20000500 	.word	0x20000500

0800332c <SX1276SetStby>:

void SX1276SetStby( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <SX1276SetStby+0x28>)
 8003332:	0018      	movs	r0, r3
 8003334:	f005 fd10 	bl	8008d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <SX1276SetStby+0x2c>)
 800333a:	0018      	movs	r0, r3
 800333c:	f005 fd0c 	bl	8008d58 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8003340:	2001      	movs	r0, #1
 8003342:	f000 fb83 	bl	8003a4c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <SX1276SetStby+0x30>)
 8003348:	2200      	movs	r2, #0
 800334a:	711a      	strb	r2, [r3, #4]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	20000560 	.word	0x20000560
 8003358:	200004d8 	.word	0x200004d8
 800335c:	20000500 	.word	0x20000500

08003360 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8003368:	230f      	movs	r3, #15
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 8003370:	4be0      	ldr	r3, [pc, #896]	; (80036f4 <SX1276SetRx+0x394>)
 8003372:	795b      	ldrb	r3, [r3, #5]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <SX1276SetRx+0x1e>
 8003378:	2b01      	cmp	r3, #1
 800337a:	d041      	beq.n	8003400 <SX1276SetRx+0xa0>
 800337c:	e128      	b.n	80035d0 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	4adc      	ldr	r2, [pc, #880]	; (80036f4 <SX1276SetRx+0x394>)
 8003384:	2126      	movs	r1, #38	; 0x26
 8003386:	5c52      	ldrb	r2, [r2, r1]
 8003388:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800338a:	2040      	movs	r0, #64	; 0x40
 800338c:	f000 fbfd 	bl	8003b8a <SX1276Read>
 8003390:	0003      	movs	r3, r0
 8003392:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003394:	2203      	movs	r2, #3
 8003396:	4013      	ands	r3, r2
 8003398:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800339a:	220c      	movs	r2, #12
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	0019      	movs	r1, r3
 80033a4:	2040      	movs	r0, #64	; 0x40
 80033a6:	f000 fbdc 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80033aa:	2041      	movs	r0, #65	; 0x41
 80033ac:	f000 fbed 	bl	8003b8a <SX1276Read>
 80033b0:	0003      	movs	r3, r0
 80033b2:	001a      	movs	r2, r3
 80033b4:	233f      	movs	r3, #63	; 0x3f
 80033b6:	425b      	negs	r3, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	0019      	movs	r1, r3
 80033be:	2041      	movs	r0, #65	; 0x41
 80033c0:	f000 fbcf 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80033c4:	2035      	movs	r0, #53	; 0x35
 80033c6:	f000 fbe0 	bl	8003b8a <SX1276Read>
 80033ca:	0003      	movs	r3, r0
 80033cc:	001a      	movs	r2, r3
 80033ce:	233f      	movs	r3, #63	; 0x3f
 80033d0:	4013      	ands	r3, r2
 80033d2:	b2d9      	uxtb	r1, r3
 80033d4:	4bc7      	ldr	r3, [pc, #796]	; (80036f4 <SX1276SetRx+0x394>)
 80033d6:	223a      	movs	r2, #58	; 0x3a
 80033d8:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80033da:	211e      	movs	r1, #30
 80033dc:	200d      	movs	r0, #13
 80033de:	f000 fbc0 	bl	8003b62 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80033e2:	4bc4      	ldr	r3, [pc, #784]	; (80036f4 <SX1276SetRx+0x394>)
 80033e4:	222c      	movs	r2, #44	; 0x2c
 80033e6:	2100      	movs	r1, #0
 80033e8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80033ea:	4bc2      	ldr	r3, [pc, #776]	; (80036f4 <SX1276SetRx+0x394>)
 80033ec:	222d      	movs	r2, #45	; 0x2d
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80033f2:	4bc0      	ldr	r3, [pc, #768]	; (80036f4 <SX1276SetRx+0x394>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 80033f8:	4bbe      	ldr	r3, [pc, #760]	; (80036f4 <SX1276SetRx+0x394>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        break;
 80033fe:	e0e7      	b.n	80035d0 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003400:	4bbc      	ldr	r3, [pc, #752]	; (80036f4 <SX1276SetRx+0x394>)
 8003402:	2251      	movs	r2, #81	; 0x51
 8003404:	5c9b      	ldrb	r3, [r3, r2]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800340a:	2033      	movs	r0, #51	; 0x33
 800340c:	f000 fbbd 	bl	8003b8a <SX1276Read>
 8003410:	0003      	movs	r3, r0
 8003412:	001a      	movs	r2, r3
 8003414:	2341      	movs	r3, #65	; 0x41
 8003416:	4313      	orrs	r3, r2
 8003418:	b2db      	uxtb	r3, r3
 800341a:	0019      	movs	r1, r3
 800341c:	2033      	movs	r0, #51	; 0x33
 800341e:	f000 fba0 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003422:	2119      	movs	r1, #25
 8003424:	203b      	movs	r0, #59	; 0x3b
 8003426:	f000 fb9c 	bl	8003b62 <SX1276Write>
 800342a:	e013      	b.n	8003454 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800342c:	2033      	movs	r0, #51	; 0x33
 800342e:	f000 fbac 	bl	8003b8a <SX1276Read>
 8003432:	0003      	movs	r3, r0
 8003434:	b25b      	sxtb	r3, r3
 8003436:	2241      	movs	r2, #65	; 0x41
 8003438:	4393      	bics	r3, r2
 800343a:	b25b      	sxtb	r3, r3
 800343c:	2201      	movs	r2, #1
 800343e:	4313      	orrs	r3, r2
 8003440:	b25b      	sxtb	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	0019      	movs	r1, r3
 8003446:	2033      	movs	r0, #51	; 0x33
 8003448:	f000 fb8b 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800344c:	211d      	movs	r1, #29
 800344e:	203b      	movs	r0, #59	; 0x3b
 8003450:	f000 fb87 	bl	8003b62 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003454:	4ba7      	ldr	r3, [pc, #668]	; (80036f4 <SX1276SetRx+0x394>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b08      	cmp	r3, #8
 800345a:	d900      	bls.n	800345e <SX1276SetRx+0xfe>
 800345c:	e076      	b.n	800354c <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800345e:	2031      	movs	r0, #49	; 0x31
 8003460:	f000 fb93 	bl	8003b8a <SX1276Read>
 8003464:	0003      	movs	r3, r0
 8003466:	001a      	movs	r2, r3
 8003468:	237f      	movs	r3, #127	; 0x7f
 800346a:	4013      	ands	r3, r2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	0019      	movs	r1, r3
 8003470:	2031      	movs	r0, #49	; 0x31
 8003472:	f000 fb76 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8003476:	2100      	movs	r1, #0
 8003478:	2030      	movs	r0, #48	; 0x30
 800347a:	f000 fb72 	bl	8003b62 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800347e:	4b9d      	ldr	r3, [pc, #628]	; (80036f4 <SX1276SetRx+0x394>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b08      	cmp	r3, #8
 8003484:	d86f      	bhi.n	8003566 <SX1276SetRx+0x206>
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	4b9b      	ldr	r3, [pc, #620]	; (80036f8 <SX1276SetRx+0x398>)
 800348a:	18d3      	adds	r3, r2, r3
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8003490:	2148      	movs	r1, #72	; 0x48
 8003492:	202f      	movs	r0, #47	; 0x2f
 8003494:	f000 fb65 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003498:	4b96      	ldr	r3, [pc, #600]	; (80036f4 <SX1276SetRx+0x394>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a97      	ldr	r2, [pc, #604]	; (80036fc <SX1276SetRx+0x39c>)
 800349e:	4694      	mov	ip, r2
 80034a0:	4463      	add	r3, ip
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7fe ff8a 	bl	80023bc <SX1276SetChannel>
                    break;
 80034a8:	e05d      	b.n	8003566 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034aa:	2144      	movs	r1, #68	; 0x44
 80034ac:	202f      	movs	r0, #47	; 0x2f
 80034ae:	f000 fb58 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80034b2:	4b90      	ldr	r3, [pc, #576]	; (80036f4 <SX1276SetRx+0x394>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4a92      	ldr	r2, [pc, #584]	; (8003700 <SX1276SetRx+0x3a0>)
 80034b8:	4694      	mov	ip, r2
 80034ba:	4463      	add	r3, ip
 80034bc:	0018      	movs	r0, r3
 80034be:	f7fe ff7d 	bl	80023bc <SX1276SetChannel>
                    break;
 80034c2:	e050      	b.n	8003566 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034c4:	2144      	movs	r1, #68	; 0x44
 80034c6:	202f      	movs	r0, #47	; 0x2f
 80034c8:	f000 fb4b 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80034cc:	4b89      	ldr	r3, [pc, #548]	; (80036f4 <SX1276SetRx+0x394>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a8c      	ldr	r2, [pc, #560]	; (8003704 <SX1276SetRx+0x3a4>)
 80034d2:	4694      	mov	ip, r2
 80034d4:	4463      	add	r3, ip
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fe ff70 	bl	80023bc <SX1276SetChannel>
                    break;
 80034dc:	e043      	b.n	8003566 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034de:	2144      	movs	r1, #68	; 0x44
 80034e0:	202f      	movs	r0, #47	; 0x2f
 80034e2:	f000 fb3e 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80034e6:	4b83      	ldr	r3, [pc, #524]	; (80036f4 <SX1276SetRx+0x394>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a87      	ldr	r2, [pc, #540]	; (8003708 <SX1276SetRx+0x3a8>)
 80034ec:	4694      	mov	ip, r2
 80034ee:	4463      	add	r3, ip
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fe ff63 	bl	80023bc <SX1276SetChannel>
                    break;
 80034f6:	e036      	b.n	8003566 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034f8:	2144      	movs	r1, #68	; 0x44
 80034fa:	202f      	movs	r0, #47	; 0x2f
 80034fc:	f000 fb31 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003500:	4b7c      	ldr	r3, [pc, #496]	; (80036f4 <SX1276SetRx+0x394>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a81      	ldr	r2, [pc, #516]	; (800370c <SX1276SetRx+0x3ac>)
 8003506:	4694      	mov	ip, r2
 8003508:	4463      	add	r3, ip
 800350a:	0018      	movs	r0, r3
 800350c:	f7fe ff56 	bl	80023bc <SX1276SetChannel>
                    break;
 8003510:	e029      	b.n	8003566 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003512:	2144      	movs	r1, #68	; 0x44
 8003514:	202f      	movs	r0, #47	; 0x2f
 8003516:	f000 fb24 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800351a:	4b76      	ldr	r3, [pc, #472]	; (80036f4 <SX1276SetRx+0x394>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <SX1276SetRx+0x3b0>)
 8003520:	4694      	mov	ip, r2
 8003522:	4463      	add	r3, ip
 8003524:	0018      	movs	r0, r3
 8003526:	f7fe ff49 	bl	80023bc <SX1276SetChannel>
                    break;
 800352a:	e01c      	b.n	8003566 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	202f      	movs	r0, #47	; 0x2f
 8003530:	f000 fb17 	bl	8003b62 <SX1276Write>
                    break;
 8003534:	e017      	b.n	8003566 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003536:	2140      	movs	r1, #64	; 0x40
 8003538:	202f      	movs	r0, #47	; 0x2f
 800353a:	f000 fb12 	bl	8003b62 <SX1276Write>
                    break;
 800353e:	e012      	b.n	8003566 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	202f      	movs	r0, #47	; 0x2f
 8003544:	f000 fb0d 	bl	8003b62 <SX1276Write>
                    break;
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	e00c      	b.n	8003566 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800354c:	2031      	movs	r0, #49	; 0x31
 800354e:	f000 fb1c 	bl	8003b8a <SX1276Read>
 8003552:	0003      	movs	r3, r0
 8003554:	001a      	movs	r2, r3
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	425b      	negs	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b2db      	uxtb	r3, r3
 800355e:	0019      	movs	r1, r3
 8003560:	2031      	movs	r0, #49	; 0x31
 8003562:	f000 fafe 	bl	8003b62 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8003566:	230f      	movs	r3, #15
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	4a62      	ldr	r2, [pc, #392]	; (80036f4 <SX1276SetRx+0x394>)
 800356c:	2152      	movs	r1, #82	; 0x52
 800356e:	5c52      	ldrb	r2, [r2, r1]
 8003570:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003572:	4b60      	ldr	r3, [pc, #384]	; (80036f4 <SX1276SetRx+0x394>)
 8003574:	224f      	movs	r2, #79	; 0x4f
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800357c:	211d      	movs	r1, #29
 800357e:	2011      	movs	r0, #17
 8003580:	f000 faef 	bl	8003b62 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003584:	2040      	movs	r0, #64	; 0x40
 8003586:	f000 fb00 	bl	8003b8a <SX1276Read>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	2333      	movs	r3, #51	; 0x33
 8003590:	4013      	ands	r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	0019      	movs	r1, r3
 8003596:	2040      	movs	r0, #64	; 0x40
 8003598:	f000 fae3 	bl	8003b62 <SX1276Write>
 800359c:	e00f      	b.n	80035be <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800359e:	211f      	movs	r1, #31
 80035a0:	2011      	movs	r0, #17
 80035a2:	f000 fade 	bl	8003b62 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80035a6:	2040      	movs	r0, #64	; 0x40
 80035a8:	f000 faef 	bl	8003b8a <SX1276Read>
 80035ac:	0003      	movs	r3, r0
 80035ae:	001a      	movs	r2, r3
 80035b0:	233f      	movs	r3, #63	; 0x3f
 80035b2:	4013      	ands	r3, r2
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	0019      	movs	r1, r3
 80035b8:	2040      	movs	r0, #64	; 0x40
 80035ba:	f000 fad2 	bl	8003b62 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80035be:	2100      	movs	r1, #0
 80035c0:	200f      	movs	r0, #15
 80035c2:	f000 face 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80035c6:	2100      	movs	r1, #0
 80035c8:	200d      	movs	r0, #13
 80035ca:	f000 faca 	bl	8003b62 <SX1276Write>
        }
        break;
 80035ce:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	005a      	lsls	r2, r3, #1
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <SX1276SetRx+0x3b4>)
 80035d6:	2100      	movs	r1, #0
 80035d8:	0018      	movs	r0, r3
 80035da:	f006 fff4 	bl	800a5c6 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <SX1276SetRx+0x394>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <SX1276SetRx+0x3b8>)
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f005 fc45 	bl	8008e80 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80035f6:	4b48      	ldr	r3, [pc, #288]	; (8003718 <SX1276SetRx+0x3b8>)
 80035f8:	0018      	movs	r0, r3
 80035fa:	f005 fa97 	bl	8008b2c <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 80035fe:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <SX1276SetRx+0x394>)
 8003600:	795b      	ldrb	r3, [r3, #5]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d165      	bne.n	80036d2 <SX1276SetRx+0x372>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003606:	2005      	movs	r0, #5
 8003608:	f000 fa20 	bl	8003a4c <SX1276SetOpMode>

        if( rxContinuous == false )
 800360c:	230f      	movs	r3, #15
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4053      	eors	r3, r2
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d066      	beq.n	80036ea <SX1276SetRx+0x38a>
        {
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <SX1276SetRx+0x394>)
 800361e:	8c1b      	ldrh	r3, [r3, #32]
 8003620:	0018      	movs	r0, r3
 8003622:	f7fe fd31 	bl	8002088 <__aeabi_i2d>
 8003626:	0004      	movs	r4, r0
 8003628:	000d      	movs	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 800362a:	2027      	movs	r0, #39	; 0x27
 800362c:	f000 faad 	bl	8003b8a <SX1276Read>
 8003630:	0003      	movs	r3, r0
 8003632:	001a      	movs	r2, r3
 8003634:	23f8      	movs	r3, #248	; 0xf8
 8003636:	439a      	bics	r2, r3
 8003638:	0013      	movs	r3, r2
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 800363a:	0018      	movs	r0, r3
 800363c:	f7fe fd24 	bl	8002088 <__aeabi_i2d>
 8003640:	2200      	movs	r2, #0
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <SX1276SetRx+0x3bc>)
 8003644:	f7fd f812 	bl	800066c <__aeabi_dadd>
 8003648:	0002      	movs	r2, r0
 800364a:	000b      	movs	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800364c:	0020      	movs	r0, r4
 800364e:	0029      	movs	r1, r5
 8003650:	f7fd f80c 	bl	800066c <__aeabi_dadd>
 8003654:	0003      	movs	r3, r0
 8003656:	000c      	movs	r4, r1
 8003658:	0018      	movs	r0, r3
 800365a:	0021      	movs	r1, r4
                                                                1.0 ) + 10.0 ) /
 800365c:	2200      	movs	r2, #0
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <SX1276SetRx+0x3c0>)
 8003660:	f7fd f804 	bl	800066c <__aeabi_dadd>
 8003664:	0003      	movs	r3, r0
 8003666:	000c      	movs	r4, r1
 8003668:	0018      	movs	r0, r3
 800366a:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800366c:	2200      	movs	r2, #0
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <SX1276SetRx+0x3c4>)
 8003670:	f7fd ff40 	bl	80014f4 <__aeabi_dmul>
 8003674:	0003      	movs	r3, r0
 8003676:	000c      	movs	r4, r1
 8003678:	0025      	movs	r5, r4
 800367a:	001c      	movs	r4, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <SX1276SetRx+0x394>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fe fd43 	bl	800210c <__aeabi_ui2d>
 8003686:	0002      	movs	r2, r0
 8003688:	000b      	movs	r3, r1
                                                                1.0 ) + 10.0 ) /
 800368a:	0020      	movs	r0, r4
 800368c:	0029      	movs	r1, r5
 800368e:	f7fd fafd 	bl	8000c8c <__aeabi_ddiv>
 8003692:	0003      	movs	r3, r0
 8003694:	000c      	movs	r4, r1
 8003696:	0018      	movs	r0, r3
 8003698:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800369a:	2200      	movs	r2, #0
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <SX1276SetRx+0x3c8>)
 800369e:	f7fd ff29 	bl	80014f4 <__aeabi_dmul>
 80036a2:	0003      	movs	r3, r0
 80036a4:	000c      	movs	r4, r1
 80036a6:	0018      	movs	r0, r3
 80036a8:	0021      	movs	r1, r4
 80036aa:	f007 fbaf 	bl	800ae0c <ceil>
 80036ae:	0003      	movs	r3, r0
 80036b0:	000c      	movs	r4, r1
 80036b2:	0018      	movs	r0, r3
 80036b4:	0021      	movs	r1, r4
 80036b6:	f7fc fefb 	bl	80004b0 <__aeabi_d2uiz>
 80036ba:	0003      	movs	r3, r0
 80036bc:	1d1a      	adds	r2, r3, #4
 80036be:	4b1b      	ldr	r3, [pc, #108]	; (800372c <SX1276SetRx+0x3cc>)
 80036c0:	0011      	movs	r1, r2
 80036c2:	0018      	movs	r0, r3
 80036c4:	f005 fbdc 	bl	8008e80 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <SX1276SetRx+0x3cc>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f005 fa2e 	bl	8008b2c <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80036d0:	e00b      	b.n	80036ea <SX1276SetRx+0x38a>
        if( rxContinuous == true )
 80036d2:	230f      	movs	r3, #15
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <SX1276SetRx+0x384>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80036dc:	2005      	movs	r0, #5
 80036de:	f000 f9b5 	bl	8003a4c <SX1276SetOpMode>
}
 80036e2:	e002      	b.n	80036ea <SX1276SetRx+0x38a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80036e4:	2006      	movs	r0, #6
 80036e6:	f000 f9b1 	bl	8003a4c <SX1276SetOpMode>
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	20000500 	.word	0x20000500
 80036f8:	0800b1a8 	.word	0x0800b1a8
 80036fc:	00001e82 	.word	0x00001e82
 8003700:	000028b4 	.word	0x000028b4
 8003704:	00003d04 	.word	0x00003d04
 8003708:	0000515e 	.word	0x0000515e
 800370c:	00007a12 	.word	0x00007a12
 8003710:	0000a2c6 	.word	0x0000a2c6
 8003714:	200000b4 	.word	0x200000b4
 8003718:	20000560 	.word	0x20000560
 800371c:	3ff00000 	.word	0x3ff00000
 8003720:	40240000 	.word	0x40240000
 8003724:	40200000 	.word	0x40200000
 8003728:	408f4000 	.word	0x408f4000
 800372c:	200004ec 	.word	0x200004ec

08003730 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <SX1276SetTx+0xec>)
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f005 fb9e 	bl	8008e80 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <SX1276SetTx+0xf0>)
 8003746:	795b      	ldrb	r3, [r3, #5]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <SX1276SetTx+0x22>
 800374c:	2b01      	cmp	r3, #1
 800374e:	d028      	beq.n	80037a2 <SX1276SetTx+0x72>
 8003750:	e056      	b.n	8003800 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f000 fa19 	bl	8003b8a <SX1276Read>
 8003758:	0003      	movs	r3, r0
 800375a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800375c:	2203      	movs	r2, #3
 800375e:	4013      	ands	r3, r2
 8003760:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003762:	2210      	movs	r2, #16
 8003764:	4313      	orrs	r3, r2
 8003766:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003768:	b2db      	uxtb	r3, r3
 800376a:	0019      	movs	r1, r3
 800376c:	2040      	movs	r0, #64	; 0x40
 800376e:	f000 f9f8 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003772:	2041      	movs	r0, #65	; 0x41
 8003774:	f000 fa09 	bl	8003b8a <SX1276Read>
 8003778:	0003      	movs	r3, r0
 800377a:	001a      	movs	r2, r3
 800377c:	233e      	movs	r3, #62	; 0x3e
 800377e:	4013      	ands	r3, r2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	0019      	movs	r1, r3
 8003784:	2041      	movs	r0, #65	; 0x41
 8003786:	f000 f9ec 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800378a:	2035      	movs	r0, #53	; 0x35
 800378c:	f000 f9fd 	bl	8003b8a <SX1276Read>
 8003790:	0003      	movs	r3, r0
 8003792:	001a      	movs	r2, r3
 8003794:	233f      	movs	r3, #63	; 0x3f
 8003796:	4013      	ands	r3, r2
 8003798:	b2d9      	uxtb	r1, r3
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <SX1276SetTx+0xf0>)
 800379c:	223a      	movs	r2, #58	; 0x3a
 800379e:	5499      	strb	r1, [r3, r2]
        }
        break;
 80037a0:	e02e      	b.n	8003800 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <SX1276SetTx+0xf0>)
 80037a4:	224f      	movs	r2, #79	; 0x4f
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d014      	beq.n	80037d6 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80037ac:	21f5      	movs	r1, #245	; 0xf5
 80037ae:	2011      	movs	r0, #17
 80037b0:	f000 f9d7 	bl	8003b62 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80037b4:	2040      	movs	r0, #64	; 0x40
 80037b6:	f000 f9e8 	bl	8003b8a <SX1276Read>
 80037ba:	0003      	movs	r3, r0
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	2233      	movs	r2, #51	; 0x33
 80037c0:	4013      	ands	r3, r2
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	4313      	orrs	r3, r2
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	0019      	movs	r1, r3
 80037ce:	2040      	movs	r0, #64	; 0x40
 80037d0:	f000 f9c7 	bl	8003b62 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 80037d4:	e013      	b.n	80037fe <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80037d6:	21f7      	movs	r1, #247	; 0xf7
 80037d8:	2011      	movs	r0, #17
 80037da:	f000 f9c2 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80037de:	2040      	movs	r0, #64	; 0x40
 80037e0:	f000 f9d3 	bl	8003b8a <SX1276Read>
 80037e4:	0003      	movs	r3, r0
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	223f      	movs	r2, #63	; 0x3f
 80037ea:	4013      	ands	r3, r2
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	0019      	movs	r1, r3
 80037f8:	2040      	movs	r0, #64	; 0x40
 80037fa:	f000 f9b2 	bl	8003b62 <SX1276Write>
        break;
 80037fe:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <SX1276SetTx+0xf0>)
 8003802:	2202      	movs	r2, #2
 8003804:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <SX1276SetTx+0xec>)
 8003808:	0018      	movs	r0, r3
 800380a:	f005 f98f 	bl	8008b2c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800380e:	2003      	movs	r0, #3
 8003810:	f000 f91c 	bl	8003a4c <SX1276SetOpMode>
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200004d8 	.word	0x200004d8
 8003820:	20000500 	.word	0x20000500

08003824 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <SX1276StartCad+0x4c>)
 800382a:	795b      	ldrb	r3, [r3, #5]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01a      	beq.n	8003866 <SX1276StartCad+0x42>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d000      	beq.n	8003836 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8003834:	e018      	b.n	8003868 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003836:	21fa      	movs	r1, #250	; 0xfa
 8003838:	2011      	movs	r0, #17
 800383a:	f000 f992 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800383e:	2040      	movs	r0, #64	; 0x40
 8003840:	f000 f9a3 	bl	8003b8a <SX1276Read>
 8003844:	0003      	movs	r3, r0
 8003846:	001a      	movs	r2, r3
 8003848:	2303      	movs	r3, #3
 800384a:	439a      	bics	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	0019      	movs	r1, r3
 8003852:	2040      	movs	r0, #64	; 0x40
 8003854:	f000 f985 	bl	8003b62 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SX1276StartCad+0x4c>)
 800385a:	2203      	movs	r2, #3
 800385c:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800385e:	2007      	movs	r0, #7
 8003860:	f000 f8f4 	bl	8003a4c <SX1276SetOpMode>
        break;
 8003864:	e000      	b.n	8003868 <SX1276StartCad+0x44>
        break;
 8003866:	46c0      	nop			; (mov r8, r8)
    }
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	20000500 	.word	0x20000500

08003874 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b08f      	sub	sp, #60	; 0x3c
 8003878:	af0a      	add	r7, sp, #40	; 0x28
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	0008      	movs	r0, r1
 800387e:	0011      	movs	r1, r2
 8003880:	1cfb      	adds	r3, r7, #3
 8003882:	1c02      	adds	r2, r0, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	003b      	movs	r3, r7
 8003888:	1c0a      	adds	r2, r1, #0
 800388a:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800388c:	003b      	movs	r3, r7
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fe fbf9 	bl	8002088 <__aeabi_i2d>
 8003896:	2200      	movs	r2, #0
 8003898:	4b29      	ldr	r3, [pc, #164]	; (8003940 <SX1276SetTxContinuousWave+0xcc>)
 800389a:	f7fd fe2b 	bl	80014f4 <__aeabi_dmul>
 800389e:	0003      	movs	r3, r0
 80038a0:	000c      	movs	r4, r1
 80038a2:	0018      	movs	r0, r3
 80038a4:	0021      	movs	r1, r4
 80038a6:	f7fc fe03 	bl	80004b0 <__aeabi_d2uiz>
 80038aa:	0003      	movs	r3, r0
 80038ac:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fe fd83 	bl	80023bc <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80038b6:	1cfb      	adds	r3, r7, #3
 80038b8:	2100      	movs	r1, #0
 80038ba:	5659      	ldrsb	r1, [r3, r1]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	9308      	str	r3, [sp, #32]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9307      	str	r3, [sp, #28]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9306      	str	r3, [sp, #24]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9305      	str	r3, [sp, #20]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9304      	str	r3, [sp, #16]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9303      	str	r3, [sp, #12]
 80038d4:	2305      	movs	r3, #5
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	2300      	movs	r3, #0
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2396      	movs	r3, #150	; 0x96
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	2200      	movs	r2, #0
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7ff f8e6 	bl	8002ab8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80038ec:	2031      	movs	r0, #49	; 0x31
 80038ee:	f000 f94c 	bl	8003b8a <SX1276Read>
 80038f2:	0003      	movs	r3, r0
 80038f4:	001a      	movs	r2, r3
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	439a      	bics	r2, r3
 80038fa:	0013      	movs	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	0019      	movs	r1, r3
 8003900:	2031      	movs	r0, #49	; 0x31
 8003902:	f000 f92e 	bl	8003b62 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003906:	21f0      	movs	r1, #240	; 0xf0
 8003908:	2040      	movs	r0, #64	; 0x40
 800390a:	f000 f92a 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800390e:	21a0      	movs	r1, #160	; 0xa0
 8003910:	2041      	movs	r0, #65	; 0x41
 8003912:	f000 f926 	bl	8003b62 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <SX1276SetTxContinuousWave+0xd0>)
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f005 faaf 	bl	8008e80 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <SX1276SetTxContinuousWave+0xd4>)
 8003924:	2202      	movs	r2, #2
 8003926:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <SX1276SetTxContinuousWave+0xd0>)
 800392a:	0018      	movs	r0, r3
 800392c:	f005 f8fe 	bl	8008b2c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003930:	2003      	movs	r0, #3
 8003932:	f000 f88b 	bl	8003a4c <SX1276SetOpMode>
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b005      	add	sp, #20
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	408f4000 	.word	0x408f4000
 8003944:	200004d8 	.word	0x200004d8
 8003948:	20000500 	.word	0x20000500

0800394c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	0002      	movs	r2, r0
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8003958:	230e      	movs	r3, #14
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <SX1276ReadRssi+0x22>
 8003968:	2b01      	cmp	r3, #1
 800396a:	d00d      	beq.n	8003988 <SX1276ReadRssi+0x3c>
 800396c:	e027      	b.n	80039be <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800396e:	2011      	movs	r0, #17
 8003970:	f000 f90b 	bl	8003b8a <SX1276Read>
 8003974:	0003      	movs	r3, r0
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	b29b      	uxth	r3, r3
 800397c:	425b      	negs	r3, r3
 800397e:	b29a      	uxth	r2, r3
 8003980:	230e      	movs	r3, #14
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	801a      	strh	r2, [r3, #0]
        break;
 8003986:	e020      	b.n	80039ca <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <SX1276ReadRssi+0x90>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <SX1276ReadRssi+0x94>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d90a      	bls.n	80039a8 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003992:	201b      	movs	r0, #27
 8003994:	f000 f8f9 	bl	8003b8a <SX1276Read>
 8003998:	0003      	movs	r3, r0
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b9d      	subs	r3, #157	; 0x9d
 800399e:	b29a      	uxth	r2, r3
 80039a0:	230e      	movs	r3, #14
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 80039a6:	e010      	b.n	80039ca <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80039a8:	201b      	movs	r0, #27
 80039aa:	f000 f8ee 	bl	8003b8a <SX1276Read>
 80039ae:	0003      	movs	r3, r0
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3ba4      	subs	r3, #164	; 0xa4
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	230e      	movs	r3, #14
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	801a      	strh	r2, [r3, #0]
        break;
 80039bc:	e005      	b.n	80039ca <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 80039be:	230e      	movs	r3, #14
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2201      	movs	r2, #1
 80039c4:	4252      	negs	r2, r2
 80039c6:	801a      	strh	r2, [r3, #0]
        break;
 80039c8:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 80039ca:	230e      	movs	r3, #14
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000500 	.word	0x20000500
 80039e0:	1f4add40 	.word	0x1f4add40

080039e4 <SX1276Reset>:

void SX1276Reset( void )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	0018      	movs	r0, r3
 80039ee:	2314      	movs	r3, #20
 80039f0:	001a      	movs	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	f006 fde7 	bl	800a5c6 <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	2201      	movs	r2, #1
 80039fc:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	2203      	movs	r2, #3
 8003a08:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	480e      	ldr	r0, [pc, #56]	; (8003a48 <SX1276Reset+0x64>)
 8003a0e:	001a      	movs	r2, r3
 8003a10:	2101      	movs	r1, #1
 8003a12:	f005 fa9d 	bl	8008f50 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <SX1276Reset+0x64>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f005 fb63 	bl	80090e8 <HW_GPIO_Write>


    // Wait 1 ms
    DelayMs( 1 );
 8003a22:	2001      	movs	r0, #1
 8003a24:	f005 f816 	bl	8008a54 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	4805      	ldr	r0, [pc, #20]	; (8003a48 <SX1276Reset+0x64>)
 8003a32:	001a      	movs	r2, r3
 8003a34:	2101      	movs	r1, #1
 8003a36:	f005 fa8b 	bl	8008f50 <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8003a3a:	2006      	movs	r0, #6
 8003a3c:	f005 f80a 	bl	8008a54 <DelayMs>
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b006      	add	sp, #24
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	50000800 	.word	0x50000800

08003a4c <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	0002      	movs	r2, r0
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <SX1276SetOpMode+0x1c>
    {
        SX1276SetAntSwLowPower( true );
 8003a60:	2001      	movs	r0, #1
 8003a62:	f000 ffb5 	bl	80049d0 <SX1276SetAntSwLowPower>
 8003a66:	e007      	b.n	8003a78 <SX1276SetOpMode+0x2c>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f000 ffb1 	bl	80049d0 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f001 f870 	bl	8004b58 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f000 f886 	bl	8003b8a <SX1276Read>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	2207      	movs	r2, #7
 8003a84:	4393      	bics	r3, r2
 8003a86:	b25a      	sxtb	r2, r3
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	0019      	movs	r1, r3
 8003a96:	2001      	movs	r0, #1
 8003a98:	f000 f863 	bl	8003b62 <SX1276Write>
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	0002      	movs	r2, r0
 8003aac:	1dfb      	adds	r3, r7, #7
 8003aae:	701a      	strb	r2, [r3, #0]

    if( SX1276.Settings.Modem == modem )
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <SX1276SetModem+0x94>)
 8003ab2:	795b      	ldrb	r3, [r3, #5]
 8003ab4:	1dfa      	adds	r2, r7, #7
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d039      	beq.n	8003b30 <SX1276SetModem+0x8c>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8003abc:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <SX1276SetModem+0x94>)
 8003abe:	1dfa      	adds	r2, r7, #7
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <SX1276SetModem+0x94>)
 8003ac6:	795b      	ldrb	r3, [r3, #5]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d017      	beq.n	8003afc <SX1276SetModem+0x58>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff ffbd 	bl	8003a4c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 f859 	bl	8003b8a <SX1276Read>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	001a      	movs	r2, r3
 8003adc:	237f      	movs	r3, #127	; 0x7f
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f000 f83c 	bl	8003b62 <SX1276Write>
    
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003aea:	2100      	movs	r1, #0
 8003aec:	2040      	movs	r0, #64	; 0x40
 8003aee:	f000 f838 	bl	8003b62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003af2:	2130      	movs	r1, #48	; 0x30
 8003af4:	2041      	movs	r0, #65	; 0x41
 8003af6:	f000 f834 	bl	8003b62 <SX1276Write>
        break;
 8003afa:	e01a      	b.n	8003b32 <SX1276SetModem+0x8e>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7ff ffa5 	bl	8003a4c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003b02:	2001      	movs	r0, #1
 8003b04:	f000 f841 	bl	8003b8a <SX1276Read>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	001a      	movs	r2, r3
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	425b      	negs	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	0019      	movs	r1, r3
 8003b16:	2001      	movs	r0, #1
 8003b18:	f000 f823 	bl	8003b62 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2040      	movs	r0, #64	; 0x40
 8003b20:	f000 f81f 	bl	8003b62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003b24:	2100      	movs	r1, #0
 8003b26:	2041      	movs	r0, #65	; 0x41
 8003b28:	f000 f81b 	bl	8003b62 <SX1276Write>
        break;
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	e000      	b.n	8003b32 <SX1276SetModem+0x8e>
        return;
 8003b30:	46c0      	nop			; (mov r8, r8)
    }
}
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000500 	.word	0x20000500

08003b3c <SX1276SetSyncWord>:

void SX1276SetSyncWord( uint8_t data )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	0002      	movs	r2, r0
 8003b44:	1dfb      	adds	r3, r7, #7
 8003b46:	701a      	strb	r2, [r3, #0]
  SX1276SetModem( MODEM_LORA );
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f7ff ffab 	bl	8003aa4 <SX1276SetModem>

  SX1276Write( REG_LR_SYNCWORD, data);
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	0019      	movs	r1, r3
 8003b54:	2039      	movs	r0, #57	; 0x39
 8003b56:	f000 f804 	bl	8003b62 <SX1276Write>
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <SX1276Write>:


void SX1276Write( uint8_t addr, uint8_t data )
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	0002      	movs	r2, r0
 8003b6a:	1dfb      	adds	r3, r7, #7
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	1c0a      	adds	r2, r1, #0
 8003b72:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 8003b74:	1db9      	adds	r1, r7, #6
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f819 	bl	8003bb4 <SX1276WriteBuffer>
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <SX1276Read>:


uint8_t SX1276Read( uint8_t addr )
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	0002      	movs	r2, r0
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8003b96:	230f      	movs	r3, #15
 8003b98:	18f9      	adds	r1, r7, r3
 8003b9a:	1dfb      	adds	r3, r7, #7
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 f84d 	bl	8003c40 <SX1276ReadBuffer>
    return data;
 8003ba6:	230f      	movs	r3, #15
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	781b      	ldrb	r3, [r3, #0]
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6039      	str	r1, [r7, #0]
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	1c02      	adds	r2, r0, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	1dbb      	adds	r3, r7, #6
 8003bc6:	1c0a      	adds	r2, r1, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	0219      	lsls	r1, r3, #8
 8003bce:	23a0      	movs	r3, #160	; 0xa0
 8003bd0:	05db      	lsls	r3, r3, #23
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f005 fa87 	bl	80090e8 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	4252      	negs	r2, r2
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	0018      	movs	r0, r3
 8003bea:	f005 fefb 	bl	80099e4 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003bee:	230f      	movs	r3, #15
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e010      	b.n	8003c1a <SX1276WriteBuffer+0x66>
    {
          HW_SPI_InOut( buffer[i] );
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	0018      	movs	r0, r3
 8003c08:	f005 feec 	bl	80099e4 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	230f      	movs	r3, #15
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	3201      	adds	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	230f      	movs	r3, #15
 8003c1c:	18fa      	adds	r2, r7, r3
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3e7      	bcc.n	8003bf8 <SX1276WriteBuffer+0x44>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	0219      	lsls	r1, r3, #8
 8003c2c:	23a0      	movs	r3, #160	; 0xa0
 8003c2e:	05db      	lsls	r3, r3, #23
 8003c30:	2201      	movs	r2, #1
 8003c32:	0018      	movs	r0, r3
 8003c34:	f005 fa58 	bl	80090e8 <HW_GPIO_Write>
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6039      	str	r1, [r7, #0]
 8003c48:	0011      	movs	r1, r2
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	1c02      	adds	r2, r0, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	1dbb      	adds	r3, r7, #6
 8003c52:	1c0a      	adds	r2, r1, #0
 8003c54:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	0219      	lsls	r1, r3, #8
 8003c5a:	23a0      	movs	r3, #160	; 0xa0
 8003c5c:	05db      	lsls	r3, r3, #23
 8003c5e:	2200      	movs	r2, #0
 8003c60:	0018      	movs	r0, r3
 8003c62:	f005 fa41 	bl	80090e8 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	227f      	movs	r2, #127	; 0x7f
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	0018      	movs	r0, r3
 8003c74:	f005 feb6 	bl	80099e4 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e011      	b.n	8003ca6 <SX1276ReadBuffer+0x66>
    {
          buffer[i] = HW_SPI_InOut( 0 );
 8003c82:	230f      	movs	r3, #15
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	18d4      	adds	r4, r2, r3
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f005 fea9 	bl	80099e4 <HW_SPI_InOut>
 8003c92:	0003      	movs	r3, r0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8003c98:	230f      	movs	r3, #15
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	230f      	movs	r3, #15
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fa      	adds	r2, r7, r3
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3e6      	bcc.n	8003c82 <SX1276ReadBuffer+0x42>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	0219      	lsls	r1, r3, #8
 8003cb8:	23a0      	movs	r3, #160	; 0xa0
 8003cba:	05db      	lsls	r3, r3, #23
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f005 fa12 	bl	80090e8 <HW_GPIO_Write>
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b005      	add	sp, #20
 8003cca:	bd90      	pop	{r4, r7, pc}

08003ccc <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	000a      	movs	r2, r1
 8003cd6:	1cfb      	adds	r3, r7, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8003cda:	1cfb      	adds	r3, r7, #3
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7ff ff66 	bl	8003bb4 <SX1276WriteBuffer>
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	000a      	movs	r2, r1
 8003cfa:	1cfb      	adds	r3, r7, #3
 8003cfc:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 8003cfe:	1cfb      	adds	r3, r7, #3
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0019      	movs	r1, r3
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7ff ff9a 	bl	8003c40 <SX1276ReadBuffer>
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	1dbb      	adds	r3, r7, #6
 8003d22:	1c0a      	adds	r2, r1, #0
 8003d24:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff feba 	bl	8003aa4 <SX1276SetModem>

    switch( modem )
 8003d30:	1dfb      	adds	r3, r7, #7
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <SX1276SetMaxPayloadLength+0x2a>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00f      	beq.n	8003d5c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8003d3c:	e016      	b.n	8003d6c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <SX1276SetMaxPayloadLength+0x60>)
 8003d40:	2222      	movs	r2, #34	; 0x22
 8003d42:	5c9b      	ldrb	r3, [r3, r2]
 8003d44:	2201      	movs	r2, #1
 8003d46:	4053      	eors	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	0019      	movs	r1, r3
 8003d54:	2032      	movs	r0, #50	; 0x32
 8003d56:	f7ff ff04 	bl	8003b62 <SX1276Write>
        break;
 8003d5a:	e006      	b.n	8003d6a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003d5c:	1dbb      	adds	r3, r7, #6
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	0019      	movs	r1, r3
 8003d62:	2023      	movs	r0, #35	; 0x23
 8003d64:	f7ff fefd 	bl	8003b62 <SX1276Write>
        break;
 8003d68:	e000      	b.n	8003d6c <SX1276SetMaxPayloadLength+0x58>
        break;
 8003d6a:	46c0      	nop			; (mov r8, r8)
}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000500 	.word	0x20000500

08003d78 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8003d7c:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d002      	beq.n	8003d8a <SX1276OnTimeoutIrq+0x12>
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d045      	beq.n	8003e14 <SX1276OnTimeoutIrq+0x9c>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8003d88:	e058      	b.n	8003e3c <SX1276OnTimeoutIrq+0xc4>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d132      	bne.n	8003df8 <SX1276OnTimeoutIrq+0x80>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d94:	222c      	movs	r2, #44	; 0x2c
 8003d96:	2100      	movs	r1, #0
 8003d98:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003d9a:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d9c:	222d      	movs	r2, #45	; 0x2d
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	86da      	strh	r2, [r3, #54]	; 0x36
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003dae:	210b      	movs	r1, #11
 8003db0:	203e      	movs	r0, #62	; 0x3e
 8003db2:	f7ff fed6 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003db6:	2110      	movs	r1, #16
 8003db8:	203f      	movs	r0, #63	; 0x3f
 8003dba:	f7ff fed2 	bl	8003b62 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003dc0:	2226      	movs	r2, #38	; 0x26
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <SX1276OnTimeoutIrq+0x72>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003dc8:	200d      	movs	r0, #13
 8003dca:	f7ff fede 	bl	8003b8a <SX1276Read>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	0019      	movs	r1, r3
 8003dda:	200d      	movs	r0, #13
 8003ddc:	f7ff fec1 	bl	8003b62 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <SX1276OnTimeoutIrq+0xd0>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f004 fea2 	bl	8008b2c <TimerStart>
 8003de8:	e006      	b.n	8003df8 <SX1276OnTimeoutIrq+0x80>
                SX1276.Settings.State = RF_IDLE;
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <SX1276OnTimeoutIrq+0xd0>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f004 ffb0 	bl	8008d58 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01a      	beq.n	8003e36 <SX1276OnTimeoutIrq+0xbe>
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <SX1276OnTimeoutIrq+0xbe>
            RadioEvents->RxTimeout( );
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4798      	blx	r3
        break;
 8003e12:	e010      	b.n	8003e36 <SX1276OnTimeoutIrq+0xbe>
        SX1276.Settings.State = RF_IDLE;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <SX1276OnTimeoutIrq+0xc2>
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <SX1276OnTimeoutIrq+0xc2>
            RadioEvents->TxTimeout( );
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4798      	blx	r3
        break;
 8003e34:	e001      	b.n	8003e3a <SX1276OnTimeoutIrq+0xc2>
        break;
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	e000      	b.n	8003e3c <SX1276OnTimeoutIrq+0xc4>
        break;
 8003e3a:	46c0      	nop			; (mov r8, r8)
    }
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	20000500 	.word	0x20000500
 8003e48:	200004ec 	.word	0x200004ec
 8003e4c:	200000b0 	.word	0x200000b0

08003e50 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 8003e56:	1cfb      	adds	r3, r7, #3
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8003e5c:	4bd6      	ldr	r3, [pc, #856]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003e5e:	791b      	ldrb	r3, [r3, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d003      	beq.n	8003e6c <SX1276OnDio0Irq+0x1c>
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d100      	bne.n	8003e6a <SX1276OnDio0Irq+0x1a>
 8003e68:	e201      	b.n	800426e <SX1276OnDio0Irq+0x41e>
                }
                break;
            }
            break;
        default:
            break;
 8003e6a:	e222      	b.n	80042b2 <SX1276OnDio0Irq+0x462>
            switch( SX1276.Settings.Modem )
 8003e6c:	4bd2      	ldr	r3, [pc, #840]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003e6e:	795b      	ldrb	r3, [r3, #5]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <SX1276OnDio0Irq+0x2c>
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d100      	bne.n	8003e7a <SX1276OnDio0Irq+0x2a>
 8003e78:	e0ea      	b.n	8004050 <SX1276OnDio0Irq+0x200>
                break;
 8003e7a:	e1f7      	b.n	800426c <SX1276OnDio0Irq+0x41c>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003e7c:	4bce      	ldr	r3, [pc, #824]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d056      	beq.n	8003f34 <SX1276OnDio0Irq+0xe4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003e86:	203f      	movs	r0, #63	; 0x3f
 8003e88:	f7ff fe7f 	bl	8003b8a <SX1276Read>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	001a      	movs	r2, r3
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003e94:	1cfb      	adds	r3, r7, #3
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d047      	beq.n	8003f34 <SX1276OnDio0Irq+0xe4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
 8003ea4:	210b      	movs	r1, #11
 8003ea6:	203e      	movs	r0, #62	; 0x3e
 8003ea8:	f7ff fe5b 	bl	8003b62 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003eac:	2110      	movs	r1, #16
 8003eae:	203f      	movs	r0, #63	; 0x3f
 8003eb0:	f7ff fe57 	bl	8003b62 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003eb4:	4bc1      	ldr	r3, [pc, #772]	; (80041bc <SX1276OnDio0Irq+0x36c>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f004 ff4e 	bl	8008d58 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003ebc:	4bbe      	ldr	r3, [pc, #760]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003ebe:	2226      	movs	r2, #38	; 0x26
 8003ec0:	5c9b      	ldrb	r3, [r3, r2]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4053      	eors	r3, r2
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 8003ecc:	4bbc      	ldr	r3, [pc, #752]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f004 ff42 	bl	8008d58 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003ed4:	4bb8      	ldr	r3, [pc, #736]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	711a      	strb	r2, [r3, #4]
 8003eda:	e00f      	b.n	8003efc <SX1276OnDio0Irq+0xac>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003edc:	200d      	movs	r0, #13
 8003ede:	f7ff fe54 	bl	8003b8a <SX1276Read>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	2340      	movs	r3, #64	; 0x40
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	0019      	movs	r1, r3
 8003eee:	200d      	movs	r0, #13
 8003ef0:	f7ff fe37 	bl	8003b62 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003ef4:	4bb2      	ldr	r3, [pc, #712]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f004 fe18 	bl	8008b2c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003efc:	4bb1      	ldr	r3, [pc, #708]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <SX1276OnDio0Irq+0xc6>
 8003f04:	4baf      	ldr	r3, [pc, #700]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <SX1276OnDio0Irq+0xc6>
                            RadioEvents->RxError( );
 8003f0e:	4bad      	ldr	r3, [pc, #692]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003f16:	4ba8      	ldr	r3, [pc, #672]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f18:	222c      	movs	r2, #44	; 0x2c
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003f1e:	4ba6      	ldr	r3, [pc, #664]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f20:	222d      	movs	r2, #45	; 0x2d
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003f26:	4ba4      	ldr	r3, [pc, #656]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	871a      	strh	r2, [r3, #56]	; 0x38
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003f2c:	4ba2      	ldr	r3, [pc, #648]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	86da      	strh	r2, [r3, #54]	; 0x36
                        break;
 8003f32:	e19b      	b.n	800426c <SX1276OnDio0Irq+0x41c>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003f34:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d12d      	bne.n	8003f98 <SX1276OnDio0Irq+0x148>
 8003f3c:	4b9e      	ldr	r3, [pc, #632]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f3e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d129      	bne.n	8003f98 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003f44:	4b9c      	ldr	r3, [pc, #624]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f46:	2222      	movs	r2, #34	; 0x22
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4053      	eors	r3, r2
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <SX1276OnDio0Irq+0x110>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003f54:	4b9c      	ldr	r3, [pc, #624]	; (80041c8 <SX1276OnDio0Irq+0x378>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fec9 	bl	8003cf0 <SX1276ReadFifo>
 8003f5e:	e006      	b.n	8003f6e <SX1276OnDio0Irq+0x11e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003f60:	2032      	movs	r0, #50	; 0x32
 8003f62:	f7ff fe12 	bl	8003b8a <SX1276Read>
 8003f66:	0003      	movs	r3, r0
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	4b93      	ldr	r3, [pc, #588]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f6c:	86da      	strh	r2, [r3, #54]	; 0x36
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f6e:	4b92      	ldr	r3, [pc, #584]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f70:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f72:	001a      	movs	r2, r3
 8003f74:	4b95      	ldr	r3, [pc, #596]	; (80041cc <SX1276OnDio0Irq+0x37c>)
 8003f76:	18d0      	adds	r0, r2, r3
 8003f78:	4b8f      	ldr	r3, [pc, #572]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b8e      	ldr	r3, [pc, #568]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	0019      	movs	r1, r3
 8003f8a:	f7ff feb1 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f8e:	4b8a      	ldr	r3, [pc, #552]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f90:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8003f92:	4b89      	ldr	r3, [pc, #548]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f94:	871a      	strh	r2, [r3, #56]	; 0x38
 8003f96:	e013      	b.n	8003fc0 <SX1276OnDio0Irq+0x170>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f98:	4b87      	ldr	r3, [pc, #540]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f9a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	4b8b      	ldr	r3, [pc, #556]	; (80041cc <SX1276OnDio0Irq+0x37c>)
 8003fa0:	18d0      	adds	r0, r2, r3
 8003fa2:	4b85      	ldr	r3, [pc, #532]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b83      	ldr	r3, [pc, #524]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003faa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	f7ff fe9c 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003fb8:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fba:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8003fbc:	4b7e      	ldr	r3, [pc, #504]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fbe:	871a      	strh	r2, [r3, #56]	; 0x38
                TimerStop( &RxTimeoutTimer );
 8003fc0:	4b7e      	ldr	r3, [pc, #504]	; (80041bc <SX1276OnDio0Irq+0x36c>)
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f004 fec8 	bl	8008d58 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fca:	2226      	movs	r2, #38	; 0x26
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4053      	eors	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <SX1276OnDio0Irq+0x198>
                    SX1276.Settings.State = RF_IDLE;
 8003fd8:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8003fde:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f004 feb9 	bl	8008d58 <TimerStop>
 8003fe6:	e00f      	b.n	8004008 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003fe8:	200d      	movs	r0, #13
 8003fea:	f7ff fdce 	bl	8003b8a <SX1276Read>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2340      	movs	r3, #64	; 0x40
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	200d      	movs	r0, #13
 8003ffc:	f7ff fdb1 	bl	8003b62 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004000:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8004002:	0018      	movs	r0, r3
 8004004:	f004 fd92 	bl	8008b2c <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004008:	4b6e      	ldr	r3, [pc, #440]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <SX1276OnDio0Irq+0x1e2>
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <SX1276OnDio0Irq+0x1e2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800401a:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689c      	ldr	r4, [r3, #8]
 8004020:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004022:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004026:	222e      	movs	r2, #46	; 0x2e
 8004028:	569b      	ldrsb	r3, [r3, r2]
 800402a:	b21a      	sxth	r2, r3
 800402c:	4867      	ldr	r0, [pc, #412]	; (80041cc <SX1276OnDio0Irq+0x37c>)
 800402e:	2300      	movs	r3, #0
 8004030:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004034:	222c      	movs	r2, #44	; 0x2c
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 800403c:	222d      	movs	r2, #45	; 0x2d
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004042:	4b5d      	ldr	r3, [pc, #372]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004044:	2200      	movs	r2, #0
 8004046:	871a      	strh	r2, [r3, #56]	; 0x38
                SX1276.Settings.FskPacketHandler.Size = 0;
 8004048:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 800404a:	2200      	movs	r2, #0
 800404c:	86da      	strh	r2, [r3, #54]	; 0x36
                break;
 800404e:	e10d      	b.n	800426c <SX1276OnDio0Irq+0x41c>
                    int8_t snr = 0;
 8004050:	1dfb      	adds	r3, r7, #7
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	2012      	movs	r0, #18
 800405a:	f7ff fd82 	bl	8003b62 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800405e:	2012      	movs	r0, #18
 8004060:	f7ff fd93 	bl	8003b8a <SX1276Read>
 8004064:	0003      	movs	r3, r0
 8004066:	001a      	movs	r2, r3
 8004068:	1cfb      	adds	r3, r7, #3
 800406a:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800406c:	1cfb      	adds	r3, r7, #3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	001a      	movs	r2, r3
 8004074:	2320      	movs	r3, #32
 8004076:	4013      	ands	r3, r2
 8004078:	2b20      	cmp	r3, #32
 800407a:	d122      	bne.n	80040c2 <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800407c:	2120      	movs	r1, #32
 800407e:	2012      	movs	r0, #18
 8004080:	f7ff fd6f 	bl	8003b62 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004084:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004086:	2252      	movs	r2, #82	; 0x52
 8004088:	5c9b      	ldrb	r3, [r3, r2]
 800408a:	2201      	movs	r2, #1
 800408c:	4053      	eors	r3, r2
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <SX1276OnDio0Irq+0x24a>
                            SX1276.Settings.State = RF_IDLE;
 8004094:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004096:	2200      	movs	r2, #0
 8004098:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 800409a:	4b48      	ldr	r3, [pc, #288]	; (80041bc <SX1276OnDio0Irq+0x36c>)
 800409c:	0018      	movs	r0, r3
 800409e:	f004 fe5b 	bl	8008d58 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80040a2:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d100      	bne.n	80040ac <SX1276OnDio0Irq+0x25c>
 80040aa:	e0dc      	b.n	8004266 <SX1276OnDio0Irq+0x416>
 80040ac:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d100      	bne.n	80040b8 <SX1276OnDio0Irq+0x268>
 80040b6:	e0d6      	b.n	8004266 <SX1276OnDio0Irq+0x416>
                            RadioEvents->RxError( );
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	4798      	blx	r3
                        break;
 80040c0:	e0d1      	b.n	8004266 <SX1276OnDio0Irq+0x416>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 80040c2:	2019      	movs	r0, #25
 80040c4:	f7ff fd61 	bl	8003b8a <SX1276Read>
 80040c8:	0003      	movs	r3, r0
 80040ca:	b259      	sxtb	r1, r3
 80040cc:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80040ce:	2258      	movs	r2, #88	; 0x58
 80040d0:	5499      	strb	r1, [r3, r2]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80040d4:	2258      	movs	r2, #88	; 0x58
 80040d6:	569b      	ldrsb	r3, [r3, r2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da10      	bge.n	80040fe <SX1276OnDio0Irq+0x2ae>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80040de:	2258      	movs	r2, #88	; 0x58
 80040e0:	569b      	ldrsb	r3, [r3, r2]
 80040e2:	425b      	negs	r3, r3
 80040e4:	109b      	asrs	r3, r3, #2
 80040e6:	b25a      	sxtb	r2, r3
 80040e8:	1dfb      	adds	r3, r7, #7
 80040ea:	213f      	movs	r1, #63	; 0x3f
 80040ec:	400a      	ands	r2, r1
 80040ee:	701a      	strb	r2, [r3, #0]
                        snr = -snr;
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	425b      	negs	r3, r3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e008      	b.n	8004110 <SX1276OnDio0Irq+0x2c0>
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004100:	2258      	movs	r2, #88	; 0x58
 8004102:	569b      	ldrsb	r3, [r3, r2]
 8004104:	109b      	asrs	r3, r3, #2
 8004106:	b25a      	sxtb	r2, r3
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	213f      	movs	r1, #63	; 0x3f
 800410c:	400a      	ands	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004110:	201a      	movs	r0, #26
 8004112:	f7ff fd3a 	bl	8003b8a <SX1276Read>
 8004116:	0003      	movs	r3, r0
 8004118:	001a      	movs	r2, r3
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	801a      	strh	r2, [r3, #0]
                    if( snr < 0 )
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b7f      	cmp	r3, #127	; 0x7f
 8004124:	d932      	bls.n	800418c <SX1276OnDio0Irq+0x33c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <SX1276OnDio0Irq+0x380>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d916      	bls.n	800415e <SX1276OnDio0Irq+0x30e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	2200      	movs	r2, #0
 8004134:	5e9b      	ldrsh	r3, [r3, r2]
 8004136:	111b      	asrs	r3, r3, #4
 8004138:	b21b      	sxth	r3, r3
 800413a:	b29a      	uxth	r2, r3
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	b29a      	uxth	r2, r3
 8004144:	1dfb      	adds	r3, r7, #7
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b25b      	sxtb	r3, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b9d      	subs	r3, #157	; 0x9d
 8004152:	b29b      	uxth	r3, r3
 8004154:	b219      	sxth	r1, r3
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004158:	225a      	movs	r2, #90	; 0x5a
 800415a:	5299      	strh	r1, [r3, r2]
 800415c:	e04a      	b.n	80041f4 <SX1276OnDio0Irq+0x3a4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	2200      	movs	r2, #0
 8004162:	5e9b      	ldrsh	r3, [r3, r2]
 8004164:	111b      	asrs	r3, r3, #4
 8004166:	b21b      	sxth	r3, r3
 8004168:	b29a      	uxth	r2, r3
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	b29a      	uxth	r2, r3
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	b29b      	uxth	r3, r3
 800417e:	3ba4      	subs	r3, #164	; 0xa4
 8004180:	b29b      	uxth	r3, r3
 8004182:	b219      	sxth	r1, r3
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004186:	225a      	movs	r2, #90	; 0x5a
 8004188:	5299      	strh	r1, [r3, r2]
 800418a:	e033      	b.n	80041f4 <SX1276OnDio0Irq+0x3a4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <SX1276OnDio0Irq+0x380>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d91e      	bls.n	80041d4 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2200      	movs	r2, #0
 800419a:	5e9b      	ldrsh	r3, [r3, r2]
 800419c:	111b      	asrs	r3, r3, #4
 800419e:	b21b      	sxth	r3, r3
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	18d3      	adds	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b9d      	subs	r3, #157	; 0x9d
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b219      	sxth	r1, r3
 80041b0:	4b01      	ldr	r3, [pc, #4]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80041b2:	225a      	movs	r2, #90	; 0x5a
 80041b4:	5299      	strh	r1, [r3, r2]
 80041b6:	e01d      	b.n	80041f4 <SX1276OnDio0Irq+0x3a4>
 80041b8:	20000500 	.word	0x20000500
 80041bc:	20000560 	.word	0x20000560
 80041c0:	200004ec 	.word	0x200004ec
 80041c4:	200000b0 	.word	0x200000b0
 80041c8:	20000536 	.word	0x20000536
 80041cc:	200000b4 	.word	0x200000b4
 80041d0:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	5e9b      	ldrsh	r3, [r3, r2]
 80041da:	111b      	asrs	r3, r3, #4
 80041dc:	b21b      	sxth	r3, r3
 80041de:	b29a      	uxth	r2, r3
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3ba4      	subs	r3, #164	; 0xa4
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b219      	sxth	r1, r3
 80041ee:	4b33      	ldr	r3, [pc, #204]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 80041f0:	225a      	movs	r2, #90	; 0x5a
 80041f2:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80041f4:	2013      	movs	r0, #19
 80041f6:	f7ff fcc8 	bl	8003b8a <SX1276Read>
 80041fa:	0003      	movs	r3, r0
 80041fc:	0019      	movs	r1, r3
 80041fe:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004200:	225c      	movs	r2, #92	; 0x5c
 8004202:	5499      	strb	r1, [r3, r2]
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004206:	225c      	movs	r2, #92	; 0x5c
 8004208:	5c9a      	ldrb	r2, [r3, r2]
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <SX1276OnDio0Irq+0x470>)
 800420c:	0011      	movs	r1, r2
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fd6e 	bl	8003cf0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8004214:	4b29      	ldr	r3, [pc, #164]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004216:	2252      	movs	r2, #82	; 0x52
 8004218:	5c9b      	ldrb	r3, [r3, r2]
 800421a:	2201      	movs	r2, #1
 800421c:	4053      	eors	r3, r2
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <SX1276OnDio0Irq+0x3da>
                        SX1276.Settings.State = RF_IDLE;
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004226:	2200      	movs	r2, #0
 8004228:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <SX1276OnDio0Irq+0x474>)
 800422c:	0018      	movs	r0, r3
 800422e:	f004 fd93 	bl	8008d58 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004232:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d017      	beq.n	800426a <SX1276OnDio0Irq+0x41a>
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <SX1276OnDio0Irq+0x41a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8004244:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689c      	ldr	r4, [r3, #8]
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 800424c:	225c      	movs	r2, #92	; 0x5c
 800424e:	5c9b      	ldrb	r3, [r3, r2]
 8004250:	b299      	uxth	r1, r3
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004254:	225a      	movs	r2, #90	; 0x5a
 8004256:	5e9d      	ldrsh	r5, [r3, r2]
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 800425a:	2258      	movs	r2, #88	; 0x58
 800425c:	569b      	ldrsb	r3, [r3, r2]
 800425e:	4818      	ldr	r0, [pc, #96]	; (80042c0 <SX1276OnDio0Irq+0x470>)
 8004260:	002a      	movs	r2, r5
 8004262:	47a0      	blx	r4
                break;
 8004264:	e001      	b.n	800426a <SX1276OnDio0Irq+0x41a>
                        break;
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	e023      	b.n	80042b2 <SX1276OnDio0Irq+0x462>
                break;
 800426a:	46c0      	nop			; (mov r8, r8)
            break;
 800426c:	e021      	b.n	80042b2 <SX1276OnDio0Irq+0x462>
            TimerStop( &TxTimeoutTimer );
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <SX1276OnDio0Irq+0x47c>)
 8004270:	0018      	movs	r0, r3
 8004272:	f004 fd71 	bl	8008d58 <TimerStop>
            switch( SX1276.Settings.Modem )
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004278:	795b      	ldrb	r3, [r3, #5]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d103      	bne.n	8004286 <SX1276OnDio0Irq+0x436>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800427e:	2108      	movs	r1, #8
 8004280:	2012      	movs	r0, #18
 8004282:	f7ff fc6e 	bl	8003b62 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004288:	2200      	movs	r2, #0
 800428a:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00c      	beq.n	80042ae <SX1276OnDio0Irq+0x45e>
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <SX1276OnDio0Irq+0x45e>
                    RadioEvents->TxDone( );
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4798      	blx	r3
                   PRINTF("txDone\n\r");
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <SX1276OnDio0Irq+0x480>)
 80042a8:	0018      	movs	r0, r3
 80042aa:	f005 ffe7 	bl	800a27c <vcom_Send>
                break;
 80042ae:	46c0      	nop			; (mov r8, r8)
            break;
 80042b0:	46c0      	nop			; (mov r8, r8)
    }
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	20000500 	.word	0x20000500
 80042c0:	200000b4 	.word	0x200000b4
 80042c4:	20000560 	.word	0x20000560
 80042c8:	200000b0 	.word	0x200000b0
 80042cc:	200004d8 	.word	0x200004d8
 80042d0:	0800b1cc 	.word	0x0800b1cc

080042d4 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 80042d8:	4b60      	ldr	r3, [pc, #384]	; (800445c <SX1276OnDio1Irq+0x188>)
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d003      	beq.n	80042e8 <SX1276OnDio1Irq+0x14>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d100      	bne.n	80042e6 <SX1276OnDio1Irq+0x12>
 80042e4:	e078      	b.n	80043d8 <SX1276OnDio1Irq+0x104>
            default:
                break;
            }
            break;
        default:
            break;
 80042e6:	e0b6      	b.n	8004456 <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 80042e8:	4b5c      	ldr	r3, [pc, #368]	; (800445c <SX1276OnDio1Irq+0x188>)
 80042ea:	795b      	ldrb	r3, [r3, #5]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SX1276OnDio1Irq+0x22>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d053      	beq.n	800439c <SX1276OnDio1Irq+0xc8>
                break;
 80042f4:	e06f      	b.n	80043d6 <SX1276OnDio1Irq+0x102>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80042f6:	4b59      	ldr	r3, [pc, #356]	; (800445c <SX1276OnDio1Irq+0x188>)
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <SX1276OnDio1Irq+0x5c>
 80042fe:	4b57      	ldr	r3, [pc, #348]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004300:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004302:	2b00      	cmp	r3, #0
 8004304:	d114      	bne.n	8004330 <SX1276OnDio1Irq+0x5c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004306:	4b55      	ldr	r3, [pc, #340]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004308:	2222      	movs	r2, #34	; 0x22
 800430a:	5c9b      	ldrb	r3, [r3, r2]
 800430c:	2201      	movs	r2, #1
 800430e:	4053      	eors	r3, r2
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <SX1276OnDio1Irq+0x4e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004316:	4b52      	ldr	r3, [pc, #328]	; (8004460 <SX1276OnDio1Irq+0x18c>)
 8004318:	2101      	movs	r1, #1
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fce8 	bl	8003cf0 <SX1276ReadFifo>
 8004320:	e006      	b.n	8004330 <SX1276OnDio1Irq+0x5c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004322:	2032      	movs	r0, #50	; 0x32
 8004324:	f7ff fc31 	bl	8003b8a <SX1276Read>
 8004328:	0003      	movs	r3, r0
 800432a:	b29a      	uxth	r2, r3
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <SX1276OnDio1Irq+0x188>)
 800432e:	86da      	strh	r2, [r3, #54]	; 0x36
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8004330:	4b4a      	ldr	r3, [pc, #296]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	001a      	movs	r2, r3
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004338:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	4a47      	ldr	r2, [pc, #284]	; (800445c <SX1276OnDio1Irq+0x188>)
 800433e:	213a      	movs	r1, #58	; 0x3a
 8004340:	5c52      	ldrb	r2, [r2, r1]
 8004342:	4293      	cmp	r3, r2
 8004344:	dd15      	ble.n	8004372 <SX1276OnDio1Irq+0x9e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 8004346:	4b45      	ldr	r3, [pc, #276]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004348:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800434a:	001a      	movs	r2, r3
 800434c:	4b45      	ldr	r3, [pc, #276]	; (8004464 <SX1276OnDio1Irq+0x190>)
 800434e:	18d0      	adds	r0, r2, r3
 8004350:	4b42      	ldr	r3, [pc, #264]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004352:	223a      	movs	r2, #58	; 0x3a
 8004354:	5c9b      	ldrb	r3, [r3, r2]
 8004356:	0019      	movs	r1, r3
 8004358:	f7ff fcca 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800435c:	4b3f      	ldr	r3, [pc, #252]	; (800445c <SX1276OnDio1Irq+0x188>)
 800435e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004362:	213a      	movs	r1, #58	; 0x3a
 8004364:	5c5b      	ldrb	r3, [r3, r1]
 8004366:	b29b      	uxth	r3, r3
 8004368:	18d3      	adds	r3, r2, r3
 800436a:	b29a      	uxth	r2, r3
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <SX1276OnDio1Irq+0x188>)
 800436e:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004370:	e031      	b.n	80043d6 <SX1276OnDio1Irq+0x102>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004374:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004376:	001a      	movs	r2, r3
 8004378:	4b3a      	ldr	r3, [pc, #232]	; (8004464 <SX1276OnDio1Irq+0x190>)
 800437a:	18d0      	adds	r0, r2, r3
 800437c:	4b37      	ldr	r3, [pc, #220]	; (800445c <SX1276OnDio1Irq+0x188>)
 800437e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004384:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004386:	b2db      	uxtb	r3, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	0019      	movs	r1, r3
 800438e:	f7ff fcaf 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004394:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004398:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 800439a:	e01c      	b.n	80043d6 <SX1276OnDio1Irq+0x102>
                TimerStop( &RxTimeoutTimer );
 800439c:	4b32      	ldr	r3, [pc, #200]	; (8004468 <SX1276OnDio1Irq+0x194>)
 800439e:	0018      	movs	r0, r3
 80043a0:	f004 fcda 	bl	8008d58 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	2012      	movs	r0, #18
 80043a8:	f7ff fbdb 	bl	8003b62 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <SX1276OnDio1Irq+0x198>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <SX1276OnDio1Irq+0x100>
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <SX1276OnDio1Irq+0x198>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <SX1276OnDio1Irq+0x100>
                    RadioEvents->RxTimeout( );
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <SX1276OnDio1Irq+0x198>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4798      	blx	r3
                    PRINTF("rxTimeOut\n\r");
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <SX1276OnDio1Irq+0x19c>)
 80043ce:	0018      	movs	r0, r3
 80043d0:	f005 ff54 	bl	800a27c <vcom_Send>
                break;
 80043d4:	46c0      	nop			; (mov r8, r8)
            break;
 80043d6:	e03e      	b.n	8004456 <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043da:	795b      	ldrb	r3, [r3, #5]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <SX1276OnDio1Irq+0x112>
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d036      	beq.n	8004452 <SX1276OnDio1Irq+0x17e>
                break;
 80043e4:	e036      	b.n	8004454 <SX1276OnDio1Irq+0x180>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ea:	001a      	movs	r2, r3
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	4a1a      	ldr	r2, [pc, #104]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043f4:	213b      	movs	r1, #59	; 0x3b
 80043f6:	5c52      	ldrb	r2, [r2, r1]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	dd15      	ble.n	8004428 <SX1276OnDio1Irq+0x154>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004400:	001a      	movs	r2, r3
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <SX1276OnDio1Irq+0x190>)
 8004404:	18d0      	adds	r0, r2, r3
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004408:	223b      	movs	r2, #59	; 0x3b
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	0019      	movs	r1, r3
 800440e:	f7ff fc5d 	bl	8003ccc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004414:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004418:	213b      	movs	r1, #59	; 0x3b
 800441a:	5c5b      	ldrb	r3, [r3, r1]
 800441c:	b29b      	uxth	r3, r3
 800441e:	18d3      	adds	r3, r2, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004424:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004426:	e015      	b.n	8004454 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <SX1276OnDio1Irq+0x188>)
 800442a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800442c:	001a      	movs	r2, r3
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <SX1276OnDio1Irq+0x190>)
 8004430:	18d0      	adds	r0, r2, r3
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <SX1276OnDio1Irq+0x188>)
 800443a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800443c:	b2db      	uxtb	r3, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	0019      	movs	r1, r3
 8004444:	f7ff fc42 	bl	8003ccc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <SX1276OnDio1Irq+0x188>)
 800444a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <SX1276OnDio1Irq+0x188>)
 800444e:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004450:	e000      	b.n	8004454 <SX1276OnDio1Irq+0x180>
                break;
 8004452:	46c0      	nop			; (mov r8, r8)
            break;
 8004454:	46c0      	nop			; (mov r8, r8)
    }
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000500 	.word	0x20000500
 8004460:	20000536 	.word	0x20000536
 8004464:	200000b4 	.word	0x200000b4
 8004468:	20000560 	.word	0x20000560
 800446c:	200000b0 	.word	0x200000b0
 8004470:	0800b1d8 	.word	0x0800b1d8

08004474 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
    
    switch( SX1276.Settings.State )
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004480:	791b      	ldrb	r3, [r3, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d003      	beq.n	800448e <SX1276OnDio2Irq+0x1a>
 8004486:	2b02      	cmp	r3, #2
 8004488:	d100      	bne.n	800448c <SX1276OnDio2Irq+0x18>
 800448a:	e079      	b.n	8004580 <SX1276OnDio2Irq+0x10c>
            default:
                break;
            }
            break;
        default:
            break;
 800448c:	e0a3      	b.n	80045d6 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004490:	795b      	ldrb	r3, [r3, #5]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <SX1276OnDio2Irq+0x28>
 8004496:	2b01      	cmp	r3, #1
 8004498:	d04e      	beq.n	8004538 <SX1276OnDio2Irq+0xc4>
                break;
 800449a:	e070      	b.n	800457e <SX1276OnDio2Irq+0x10a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800449c:	4b50      	ldr	r3, [pc, #320]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 800449e:	222c      	movs	r2, #44	; 0x2c
 80044a0:	2101      	movs	r1, #1
 80044a2:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 80044a4:	4b4e      	ldr	r3, [pc, #312]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044a6:	222c      	movs	r2, #44	; 0x2c
 80044a8:	5c9b      	ldrb	r3, [r3, r2]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d164      	bne.n	8004578 <SX1276OnDio2Irq+0x104>
 80044ae:	4b4c      	ldr	r3, [pc, #304]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044b0:	222d      	movs	r2, #45	; 0x2d
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d15f      	bne.n	8004578 <SX1276OnDio2Irq+0x104>
                    TimerStop( &RxTimeoutSyncWord );
 80044b8:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <SX1276OnDio2Irq+0x170>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f004 fc4c 	bl	8008d58 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80044c0:	4b47      	ldr	r3, [pc, #284]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044c2:	222d      	movs	r2, #45	; 0x2d
 80044c4:	2101      	movs	r1, #1
 80044c6:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80044c8:	2011      	movs	r0, #17
 80044ca:	f7ff fb5e 	bl	8003b8a <SX1276Read>
 80044ce:	0003      	movs	r3, r0
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	425b      	negs	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	b259      	sxtb	r1, r3
 80044da:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044dc:	222e      	movs	r2, #46	; 0x2e
 80044de:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80044e0:	201b      	movs	r0, #27
 80044e2:	f7ff fb52 	bl	8003b8a <SX1276Read>
 80044e6:	0003      	movs	r3, r0
 80044e8:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80044ea:	201c      	movs	r0, #28
 80044ec:	f7ff fb4d 	bl	8003b8a <SX1276Read>
 80044f0:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80044f2:	4323      	orrs	r3, r4
 80044f4:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <SX1276OnDio2Irq+0x174>)
 800450a:	435a      	muls	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4936      	ldr	r1, [pc, #216]	; (80045e8 <SX1276OnDio2Irq+0x174>)
 8004510:	434b      	muls	r3, r1
 8004512:	3380      	adds	r3, #128	; 0x80
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	001a      	movs	r2, r3
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800451e:	200c      	movs	r0, #12
 8004520:	f7ff fb33 	bl	8003b8a <SX1276Read>
 8004524:	0003      	movs	r3, r0
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2207      	movs	r2, #7
 800452c:	4013      	ands	r3, r2
 800452e:	b2d9      	uxtb	r1, r3
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004532:	2234      	movs	r2, #52	; 0x34
 8004534:	5499      	strb	r1, [r3, r2]
                break;
 8004536:	e01f      	b.n	8004578 <SX1276OnDio2Irq+0x104>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 800453a:	224f      	movs	r2, #79	; 0x4f
 800453c:	5c9b      	ldrb	r3, [r3, r2]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01c      	beq.n	800457c <SX1276OnDio2Irq+0x108>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004542:	2102      	movs	r1, #2
 8004544:	2012      	movs	r0, #18
 8004546:	f7ff fb0c 	bl	8003b62 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800454a:	4b28      	ldr	r3, [pc, #160]	; (80045ec <SX1276OnDio2Irq+0x178>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d014      	beq.n	800457c <SX1276OnDio2Irq+0x108>
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <SX1276OnDio2Irq+0x178>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00f      	beq.n	800457c <SX1276OnDio2Irq+0x108>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800455c:	4b23      	ldr	r3, [pc, #140]	; (80045ec <SX1276OnDio2Irq+0x178>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695c      	ldr	r4, [r3, #20]
 8004562:	201c      	movs	r0, #28
 8004564:	f7ff fb11 	bl	8003b8a <SX1276Read>
 8004568:	0003      	movs	r3, r0
 800456a:	001a      	movs	r2, r3
 800456c:	233f      	movs	r3, #63	; 0x3f
 800456e:	4013      	ands	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	0018      	movs	r0, r3
 8004574:	47a0      	blx	r4
                break;
 8004576:	e001      	b.n	800457c <SX1276OnDio2Irq+0x108>
                break;
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	e02c      	b.n	80045d6 <SX1276OnDio2Irq+0x162>
                break;
 800457c:	46c0      	nop			; (mov r8, r8)
            break;
 800457e:	e02a      	b.n	80045d6 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004582:	795b      	ldrb	r3, [r3, #5]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d022      	beq.n	80045ce <SX1276OnDio2Irq+0x15a>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d000      	beq.n	800458e <SX1276OnDio2Irq+0x11a>
                break;
 800458c:	e022      	b.n	80045d4 <SX1276OnDio2Irq+0x160>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004590:	224f      	movs	r2, #79	; 0x4f
 8004592:	5c9b      	ldrb	r3, [r3, r2]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004598:	2102      	movs	r1, #2
 800459a:	2012      	movs	r0, #18
 800459c:	f7ff fae1 	bl	8003b62 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <SX1276OnDio2Irq+0x178>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <SX1276OnDio2Irq+0x15e>
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <SX1276OnDio2Irq+0x178>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00f      	beq.n	80045d2 <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <SX1276OnDio2Irq+0x178>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695c      	ldr	r4, [r3, #20]
 80045b8:	201c      	movs	r0, #28
 80045ba:	f7ff fae6 	bl	8003b8a <SX1276Read>
 80045be:	0003      	movs	r3, r0
 80045c0:	001a      	movs	r2, r3
 80045c2:	233f      	movs	r3, #63	; 0x3f
 80045c4:	4013      	ands	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	0018      	movs	r0, r3
 80045ca:	47a0      	blx	r4
                break;
 80045cc:	e001      	b.n	80045d2 <SX1276OnDio2Irq+0x15e>
                break;
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	e000      	b.n	80045d4 <SX1276OnDio2Irq+0x160>
                break;
 80045d2:	46c0      	nop			; (mov r8, r8)
            break;
 80045d4:	46c0      	nop			; (mov r8, r8)
    }
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b005      	add	sp, #20
 80045dc:	bd90      	pop	{r4, r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20000500 	.word	0x20000500
 80045e4:	200004ec 	.word	0x200004ec
 80045e8:	00003d09 	.word	0x00003d09
 80045ec:	200000b0 	.word	0x200000b0

080045f0 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <SX1276OnDio3Irq+0x7c>)
 80045f6:	795b      	ldrb	r3, [r3, #5]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d031      	beq.n	8004660 <SX1276OnDio3Irq+0x70>
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d000      	beq.n	8004602 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8004600:	e031      	b.n	8004666 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004602:	2012      	movs	r0, #18
 8004604:	f7ff fac1 	bl	8003b8a <SX1276Read>
 8004608:	0003      	movs	r3, r0
 800460a:	001a      	movs	r2, r3
 800460c:	2301      	movs	r3, #1
 800460e:	4013      	ands	r3, r2
 8004610:	2b01      	cmp	r3, #1
 8004612:	d112      	bne.n	800463a <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8004614:	2105      	movs	r1, #5
 8004616:	2012      	movs	r0, #18
 8004618:	f7ff faa3 	bl	8003b62 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <SX1276OnDio3Irq+0x80>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01f      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01a      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2001      	movs	r0, #1
 8004636:	4798      	blx	r3
        break;
 8004638:	e014      	b.n	8004664 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800463a:	2104      	movs	r1, #4
 800463c:	2012      	movs	r0, #18
 800463e:	f7ff fa90 	bl	8003b62 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00c      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <SX1276OnDio3Irq+0x80>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2000      	movs	r0, #0
 800465c:	4798      	blx	r3
        break;
 800465e:	e001      	b.n	8004664 <SX1276OnDio3Irq+0x74>
        break;
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	e000      	b.n	8004666 <SX1276OnDio3Irq+0x76>
        break;
 8004664:	46c0      	nop			; (mov r8, r8)
    }
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000500 	.word	0x20000500
 8004670:	200000b0 	.word	0x200000b0

08004674 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <SX1276OnDio4Irq+0x34>)
 800467a:	795b      	ldrb	r3, [r3, #5]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <SX1276OnDio4Irq+0x12>
 8004680:	2b01      	cmp	r3, #1
 8004682:	d00a      	beq.n	800469a <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8004684:	e00c      	b.n	80046a0 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <SX1276OnDio4Irq+0x34>)
 8004688:	222c      	movs	r2, #44	; 0x2c
 800468a:	5c9b      	ldrb	r3, [r3, r2]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SX1276OnDio4Irq+0x34>)
 8004692:	222c      	movs	r2, #44	; 0x2c
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]
        break;
 8004698:	e001      	b.n	800469e <SX1276OnDio4Irq+0x2a>
        break;
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	e000      	b.n	80046a0 <SX1276OnDio4Irq+0x2c>
        break;
 800469e:	46c0      	nop			; (mov r8, r8)
    }
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20000500 	.word	0x20000500

080046ac <SX1276IoInit>:
  SX1276SetMaxPayloadLength
};


void SX1276IoInit( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	0018      	movs	r0, r3
 80046b6:	2314      	movs	r3, #20
 80046b8:	001a      	movs	r2, r3
 80046ba:	2100      	movs	r1, #0
 80046bc:	f005 ff83 	bl	800a5c6 <memset>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <SX1276IoInit+0x7c>)
 80046c4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	2201      	movs	r2, #1
 80046ca:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80046cc:	1d3b      	adds	r3, r7, #4
 80046ce:	2203      	movs	r2, #3
 80046d0:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	4815      	ldr	r0, [pc, #84]	; (800472c <SX1276IoInit+0x80>)
 80046d6:	001a      	movs	r2, r3
 80046d8:	2110      	movs	r1, #16
 80046da:	f004 fc39 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	4812      	ldr	r0, [pc, #72]	; (800472c <SX1276IoInit+0x80>)
 80046e2:	001a      	movs	r2, r3
 80046e4:	2102      	movs	r1, #2
 80046e6:	f004 fc33 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	480f      	ldr	r0, [pc, #60]	; (800472c <SX1276IoInit+0x80>)
 80046ee:	001a      	movs	r2, r3
 80046f0:	2101      	movs	r1, #1
 80046f2:	f004 fc2d 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80046f6:	1d3a      	adds	r2, r7, #4
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	019b      	lsls	r3, r3, #6
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <SX1276IoInit+0x84>)
 80046fe:	0019      	movs	r1, r3
 8004700:	f004 fc26 	bl	8008f50 <HW_GPIO_Init>
  
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	2201      	movs	r2, #1
 8004708:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8004710:	1d3a      	adds	r2, r7, #4
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	0159      	lsls	r1, r3, #5
 8004716:	23a0      	movs	r3, #160	; 0xa0
 8004718:	05db      	lsls	r3, r3, #23
 800471a:	0018      	movs	r0, r3
 800471c:	f004 fc18 	bl	8008f50 <HW_GPIO_Init>
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b006      	add	sp, #24
 8004726:	bd80      	pop	{r7, pc}
 8004728:	10110000 	.word	0x10110000
 800472c:	50000400 	.word	0x50000400
 8004730:	50000800 	.word	0x50000800

08004734 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4811      	ldr	r0, [pc, #68]	; (8004788 <SX1276IoIrqInit+0x54>)
 8004742:	2200      	movs	r2, #0
 8004744:	2110      	movs	r1, #16
 8004746:	f004 fc77 	bl	8009038 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	480d      	ldr	r0, [pc, #52]	; (8004788 <SX1276IoIrqInit+0x54>)
 8004752:	2200      	movs	r2, #0
 8004754:	2102      	movs	r1, #2
 8004756:	f004 fc6f 	bl	8009038 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3308      	adds	r3, #8
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <SX1276IoIrqInit+0x54>)
 8004762:	2200      	movs	r2, #0
 8004764:	2101      	movs	r1, #1
 8004766:	f004 fc67 	bl	8009038 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	330c      	adds	r3, #12
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	0199      	lsls	r1, r3, #6
 8004774:	4805      	ldr	r0, [pc, #20]	; (800478c <SX1276IoIrqInit+0x58>)
 8004776:	0013      	movs	r3, r2
 8004778:	2200      	movs	r2, #0
 800477a:	f004 fc5d 	bl	8009038 <HW_GPIO_SetIrq>
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	50000400 	.word	0x50000400
 800478c:	50000800 	.word	0x50000800

08004790 <SX1276IoDeInit>:


void SX1276IoDeInit( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	0018      	movs	r0, r3
 800479a:	2314      	movs	r3, #20
 800479c:	001a      	movs	r2, r3
 800479e:	2100      	movs	r1, #0
 80047a0:	f005 ff11 	bl	800a5c6 <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	4a11      	ldr	r2, [pc, #68]	; (80047ec <SX1276IoDeInit+0x5c>)
 80047a8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	2202      	movs	r2, #2
 80047ae:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80047b0:	1d3b      	adds	r3, r7, #4
 80047b2:	480f      	ldr	r0, [pc, #60]	; (80047f0 <SX1276IoDeInit+0x60>)
 80047b4:	001a      	movs	r2, r3
 80047b6:	2110      	movs	r1, #16
 80047b8:	f004 fbca 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	480c      	ldr	r0, [pc, #48]	; (80047f0 <SX1276IoDeInit+0x60>)
 80047c0:	001a      	movs	r2, r3
 80047c2:	2102      	movs	r1, #2
 80047c4:	f004 fbc4 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	4809      	ldr	r0, [pc, #36]	; (80047f0 <SX1276IoDeInit+0x60>)
 80047cc:	001a      	movs	r2, r3
 80047ce:	2101      	movs	r1, #1
 80047d0:	f004 fbbe 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80047d4:	1d3a      	adds	r2, r7, #4
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	4806      	ldr	r0, [pc, #24]	; (80047f4 <SX1276IoDeInit+0x64>)
 80047dc:	0019      	movs	r1, r3
 80047de:	f004 fbb7 	bl	8008f50 <HW_GPIO_Init>
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b006      	add	sp, #24
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	10110000 	.word	0x10110000
 80047f0:	50000400 	.word	0x50000400
 80047f4:	50000800 	.word	0x50000800

080047f8 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	0002      	movs	r2, r0
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8004804:	230f      	movs	r3, #15
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 800480c:	230e      	movs	r3, #14
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8004814:	230f      	movs	r3, #15
 8004816:	18fc      	adds	r4, r7, r3
 8004818:	2009      	movs	r0, #9
 800481a:	f7ff f9b6 	bl	8003b8a <SX1276Read>
 800481e:	0003      	movs	r3, r0
 8004820:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8004822:	230e      	movs	r3, #14
 8004824:	18fc      	adds	r4, r7, r3
 8004826:	204d      	movs	r0, #77	; 0x4d
 8004828:	f7ff f9af 	bl	8003b8a <SX1276Read>
 800482c:	0003      	movs	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8004830:	230f      	movs	r3, #15
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b25b      	sxtb	r3, r3
 8004838:	227f      	movs	r2, #127	; 0x7f
 800483a:	4013      	ands	r3, r2
 800483c:	b25c      	sxtb	r4, r3
 800483e:	4b5e      	ldr	r3, [pc, #376]	; (80049b8 <SX1276SetRfTxPower+0x1c0>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	0018      	movs	r0, r3
 8004844:	f000 f8ba 	bl	80049bc <SX1276GetPaSelect>
 8004848:	0003      	movs	r3, r0
 800484a:	b25b      	sxtb	r3, r3
 800484c:	4323      	orrs	r3, r4
 800484e:	b25a      	sxtb	r2, r3
 8004850:	230f      	movs	r3, #15
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8004856:	230f      	movs	r3, #15
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	220f      	movs	r2, #15
 800485c:	18ba      	adds	r2, r7, r2
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	2170      	movs	r1, #112	; 0x70
 8004862:	430a      	orrs	r2, r1
 8004864:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004866:	230f      	movs	r3, #15
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b25b      	sxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	da6b      	bge.n	800494a <SX1276SetRfTxPower+0x152>
    {
        if( power > 17 )
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b25b      	sxtb	r3, r3
 8004878:	2b11      	cmp	r3, #17
 800487a:	dd08      	ble.n	800488e <SX1276SetRfTxPower+0x96>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800487c:	230e      	movs	r3, #14
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	220e      	movs	r2, #14
 8004882:	18ba      	adds	r2, r7, r2
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	2107      	movs	r1, #7
 8004888:	430a      	orrs	r2, r1
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e00c      	b.n	80048a8 <SX1276SetRfTxPower+0xb0>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800488e:	230e      	movs	r3, #14
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	2207      	movs	r2, #7
 8004898:	4393      	bics	r3, r2
 800489a:	b25b      	sxtb	r3, r3
 800489c:	2204      	movs	r2, #4
 800489e:	4313      	orrs	r3, r2
 80048a0:	b25a      	sxtb	r2, r3
 80048a2:	230e      	movs	r3, #14
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80048a8:	230e      	movs	r3, #14
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b07      	cmp	r3, #7
 80048b4:	d124      	bne.n	8004900 <SX1276SetRfTxPower+0x108>
        {
            if( power < 5 )
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b25b      	sxtb	r3, r3
 80048bc:	2b04      	cmp	r3, #4
 80048be:	dc02      	bgt.n	80048c6 <SX1276SetRfTxPower+0xce>
            {
                power = 5;
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	2205      	movs	r2, #5
 80048c4:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 80048c6:	1dfb      	adds	r3, r7, #7
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b25b      	sxtb	r3, r3
 80048cc:	2b14      	cmp	r3, #20
 80048ce:	dd02      	ble.n	80048d6 <SX1276SetRfTxPower+0xde>
            {
                power = 20;
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	2214      	movs	r2, #20
 80048d4:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	220f      	movs	r2, #15
 80048e0:	4393      	bics	r3, r2
 80048e2:	b25a      	sxtb	r2, r3
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3b05      	subs	r3, #5
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	210f      	movs	r1, #15
 80048f0:	400b      	ands	r3, r1
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	230f      	movs	r3, #15
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e048      	b.n	8004992 <SX1276SetRfTxPower+0x19a>
        }
        else
        {
            if( power < 2 )
 8004900:	1dfb      	adds	r3, r7, #7
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b25b      	sxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	dc02      	bgt.n	8004910 <SX1276SetRfTxPower+0x118>
            {
                power = 2;
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	2202      	movs	r2, #2
 800490e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b25b      	sxtb	r3, r3
 8004916:	2b11      	cmp	r3, #17
 8004918:	dd02      	ble.n	8004920 <SX1276SetRfTxPower+0x128>
            {
                power = 17;
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	2211      	movs	r2, #17
 800491e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8004920:	230f      	movs	r3, #15
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b25b      	sxtb	r3, r3
 8004928:	220f      	movs	r2, #15
 800492a:	4393      	bics	r3, r2
 800492c:	b25a      	sxtb	r2, r3
 800492e:	1dfb      	adds	r3, r7, #7
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	3b02      	subs	r3, #2
 8004934:	b2db      	uxtb	r3, r3
 8004936:	b25b      	sxtb	r3, r3
 8004938:	210f      	movs	r1, #15
 800493a:	400b      	ands	r3, r1
 800493c:	b25b      	sxtb	r3, r3
 800493e:	4313      	orrs	r3, r2
 8004940:	b25a      	sxtb	r2, r3
 8004942:	230f      	movs	r3, #15
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e023      	b.n	8004992 <SX1276SetRfTxPower+0x19a>
        }
    }
    else
    {
        if( power < -1 )
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b25b      	sxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	da02      	bge.n	800495a <SX1276SetRfTxPower+0x162>
        {
            power = -1;
 8004954:	1dfb      	adds	r3, r7, #7
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 800495a:	1dfb      	adds	r3, r7, #7
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b25b      	sxtb	r3, r3
 8004960:	2b0e      	cmp	r3, #14
 8004962:	dd02      	ble.n	800496a <SX1276SetRfTxPower+0x172>
        {
            power = 14;
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	220e      	movs	r2, #14
 8004968:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800496a:	230f      	movs	r3, #15
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b25b      	sxtb	r3, r3
 8004972:	220f      	movs	r2, #15
 8004974:	4393      	bics	r3, r2
 8004976:	b25a      	sxtb	r2, r3
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	b25b      	sxtb	r3, r3
 8004982:	210f      	movs	r1, #15
 8004984:	400b      	ands	r3, r1
 8004986:	b25b      	sxtb	r3, r3
 8004988:	4313      	orrs	r3, r2
 800498a:	b25a      	sxtb	r2, r3
 800498c:	230f      	movs	r3, #15
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8004992:	230f      	movs	r3, #15
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	0019      	movs	r1, r3
 800499a:	2009      	movs	r0, #9
 800499c:	f7ff f8e1 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80049a0:	230e      	movs	r3, #14
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	0019      	movs	r1, r3
 80049a8:	204d      	movs	r0, #77	; 0x4d
 80049aa:	f7ff f8da 	bl	8003b62 <SX1276Write>
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b005      	add	sp, #20
 80049b4:	bd90      	pop	{r4, r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	20000500 	.word	0x20000500

080049bc <SX1276GetPaSelect>:
uint8_t SX1276GetPaSelect( uint32_t channel )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <SX1276SetAntSwLowPower>:



void SX1276SetAntSwLowPower( bool status )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	0002      	movs	r2, r0
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	701a      	strb	r2, [r3, #0]
  if( RadioIsActive != status )
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <SX1276SetAntSwLowPower+0x7c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	1dfa      	adds	r2, r7, #7
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d02d      	beq.n	8004a44 <SX1276SetAntSwLowPower+0x74>
  {
    RadioIsActive = status;
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <SX1276SetAntSwLowPower+0x7c>)
 80049ea:	1dfa      	adds	r2, r7, #7
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	701a      	strb	r2, [r3, #0]
    
    if( status == false )
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4053      	eors	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <SX1276SetAntSwLowPower+0x52>
    {
      TimerStop( &TcxoStopTimer );
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f004 f9a9 	bl	8008d58 <TimerStop>
      
      MLM_TCXO_ON();  //TCXO ON
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	23a0      	movs	r3, #160	; 0xa0
 8004a0c:	05db      	lsls	r3, r3, #23
 8004a0e:	2201      	movs	r2, #1
 8004a10:	0018      	movs	r0, r3
 8004a12:	f004 fb69 	bl	80090e8 <HW_GPIO_Write>
      
      DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8004a16:	2003      	movs	r0, #3
 8004a18:	f004 f81c 	bl	8008a54 <DelayMs>
      
      SX1276AntSwInit( );
 8004a1c:	f000 f81c 	bl	8004a58 <SX1276AntSwInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
      
      TimerStart( &TcxoStopTimer );
    }
  }
}
 8004a20:	e010      	b.n	8004a44 <SX1276SetAntSwLowPower+0x74>
      SX1276AntSwDeInit( );
 8004a22:	f000 f859 	bl	8004ad8 <SX1276AntSwDeInit>
      TimerInit( &TcxoStopTimer, OnTcxoStopTimerEvent );
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <SX1276SetAntSwLowPower+0x84>)
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a2a:	0011      	movs	r1, r2
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f004 f865 	bl	8008afc <TimerInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a34:	2102      	movs	r1, #2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f004 fa22 	bl	8008e80 <TimerSetValue>
      TimerStart( &TcxoStopTimer );
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f004 f874 	bl	8008b2c <TimerStart>
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200001c8 	.word	0x200001c8
 8004a50:	200001b4 	.word	0x200001b4
 8004a54:	08004bd1 	.word	0x08004bd1

08004a58 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	0018      	movs	r0, r3
 8004a62:	2314      	movs	r3, #20
 8004a64:	001a      	movs	r2, r3
 8004a66:	2100      	movs	r1, #0
 8004a68:	f005 fdad 	bl	800a5c6 <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	2201      	movs	r2, #1
 8004a70:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004a78:	1d3b      	adds	r3, r7, #4
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8004a7e:	1d3a      	adds	r2, r7, #4
 8004a80:	23a0      	movs	r3, #160	; 0xa0
 8004a82:	05db      	lsls	r3, r3, #23
 8004a84:	2102      	movs	r1, #2
 8004a86:	0018      	movs	r0, r3
 8004a88:	f004 fa62 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8004a8c:	23a0      	movs	r3, #160	; 0xa0
 8004a8e:	05db      	lsls	r3, r3, #23
 8004a90:	2200      	movs	r2, #0
 8004a92:	2102      	movs	r1, #2
 8004a94:	0018      	movs	r0, r3
 8004a96:	f004 fb27 	bl	80090e8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	f004 fa55 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2102      	movs	r1, #2
 8004aac:	0018      	movs	r0, r3
 8004aae:	f004 fb1b 	bl	80090e8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004ab6:	001a      	movs	r2, r3
 8004ab8:	2104      	movs	r1, #4
 8004aba:	f004 fa49 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f004 fb0f 	bl	80090e8 <HW_GPIO_Write>
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b006      	add	sp, #24
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	50000800 	.word	0x50000800

08004ad8 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	2314      	movs	r3, #20
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f005 fd6d 	bl	800a5c6 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	2203      	movs	r2, #3
 8004af0:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	2203      	movs	r2, #3
 8004afc:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8004afe:	1d3a      	adds	r2, r7, #4
 8004b00:	23a0      	movs	r3, #160	; 0xa0
 8004b02:	05db      	lsls	r3, r3, #23
 8004b04:	2102      	movs	r1, #2
 8004b06:	0018      	movs	r0, r3
 8004b08:	f004 fa22 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8004b0c:	23a0      	movs	r3, #160	; 0xa0
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	2200      	movs	r2, #0
 8004b12:	2102      	movs	r1, #2
 8004b14:	0018      	movs	r0, r3
 8004b16:	f004 fae7 	bl	80090e8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	480d      	ldr	r0, [pc, #52]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b1e:	001a      	movs	r2, r3
 8004b20:	2102      	movs	r1, #2
 8004b22:	f004 fa15 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f004 fadb 	bl	80090e8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	4807      	ldr	r0, [pc, #28]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b36:	001a      	movs	r2, r3
 8004b38:	2104      	movs	r1, #4
 8004b3a:	f004 fa09 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	2104      	movs	r1, #4
 8004b44:	0018      	movs	r0, r3
 8004b46:	f004 facf 	bl	80090e8 <HW_GPIO_Write>
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b006      	add	sp, #24
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	50000800 	.word	0x50000800

08004b58 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	0002      	movs	r2, r0
 8004b60:	1dfb      	adds	r3, r7, #7
 8004b62:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8004b64:	230f      	movs	r3, #15
 8004b66:	18fc      	adds	r4, r7, r3
 8004b68:	2009      	movs	r0, #9
 8004b6a:	f7ff f80e 	bl	8003b8a <SX1276Read>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	7023      	strb	r3, [r4, #0]
      switch( opMode )
 8004b72:	1dfb      	adds	r3, r7, #7
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d116      	bne.n	8004ba8 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004b7a:	230f      	movs	r3, #15
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da06      	bge.n	8004b94 <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <SX1276SetAntSw+0x70>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f004 faab 	bl	80090e8 <HW_GPIO_Write>
 8004b92:	e005      	b.n	8004ba0 <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <SX1276SetAntSw+0x70>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	2104      	movs	r1, #4
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f004 faa4 	bl	80090e8 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <SX1276SetAntSw+0x74>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
	  break;
 8004ba6:	e00a      	b.n	8004bbe <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
    	SX1276.RxTx = 0;
 8004ba8:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <SX1276SetAntSw+0x74>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8004bae:	23a0      	movs	r3, #160	; 0xa0
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f004 fa96 	bl	80090e8 <HW_GPIO_Write>
        break;
 8004bbc:	46c0      	nop			; (mov r8, r8)
    }
  
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b005      	add	sp, #20
 8004bc4:	bd90      	pop	{r4, r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	50000800 	.word	0x50000800
 8004bcc:	20000500 	.word	0x20000500

08004bd0 <OnTcxoStopTimerEvent>:

static void OnTcxoStopTimerEvent( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  TimerStop( &TcxoStopTimer );
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <OnTcxoStopTimerEvent+0x24>)
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f004 f8be 	bl	8008d58 <TimerStop>

  MLM_TCXO_OFF();  //TCXO OFF
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	0159      	lsls	r1, r3, #5
 8004be0:	23a0      	movs	r3, #160	; 0xa0
 8004be2:	05db      	lsls	r3, r3, #23
 8004be4:	2200      	movs	r2, #0
 8004be6:	0018      	movs	r0, r3
 8004be8:	f004 fa7e 	bl	80090e8 <HW_GPIO_Write>
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	200001b4 	.word	0x200001b4

08004bf8 <SX1276CheckRfFrequency>:



bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8004c00:	2301      	movs	r3, #1
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b002      	add	sp, #8
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_Init+0x30>)
 8004c12:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_Init+0x30>)
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	2140      	movs	r1, #64	; 0x40
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <HAL_Init+0x30>)
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <HAL_Init+0x30>)
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	2102      	movs	r1, #2
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004c28:	2003      	movs	r0, #3
 8004c2a:	f005 f803 	bl	8009c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c2e:	f005 f80b 	bl	8009c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	40022000 	.word	0x40022000

08004c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  uwTick++;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_IncTick+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <HAL_IncTick+0x14>)
 8004c4c:	601a      	str	r2, [r3, #0]
}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000574 	.word	0x20000574

08004c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <HAL_GetTick+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	20000574 	.word	0x20000574

08004c6c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e153      	b.n	8004f26 <HAL_ADC_Init+0x2ba>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2254      	movs	r2, #84	; 0x54
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 f956 	bl	8004f48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d105      	bne.n	8004cb2 <HAL_ADC_Init+0x46>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2204      	movs	r2, #4
 8004cae:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cb0:	d00b      	beq.n	8004cca <HAL_ADC_Init+0x5e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	659a      	str	r2, [r3, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2254      	movs	r2, #84	; 0x54
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e12d      	b.n	8004f26 <HAL_ADC_Init+0x2ba>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	4a98      	ldr	r2, [pc, #608]	; (8004f30 <HAL_ADC_Init+0x2c4>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <HAL_ADC_Init+0x8e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_Init+0x8e>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_ADC_Init+0x90>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d149      	bne.n	8004d94 <HAL_ADC_Init+0x128>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	23c0      	movs	r3, #192	; 0xc0
 8004d06:	061b      	lsls	r3, r3, #24
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d00b      	beq.n	8004d24 <HAL_ADC_Init+0xb8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d005      	beq.n	8004d24 <HAL_ADC_Init+0xb8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d111      	bne.n	8004d48 <HAL_ADC_Init+0xdc>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	6912      	ldr	r2, [r2, #16]
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	0892      	lsrs	r2, r2, #2
 8004d32:	611a      	str	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6911      	ldr	r1, [r2, #16]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6852      	ldr	r2, [r2, #4]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	611a      	str	r2, [r3, #16]
 8004d46:	e014      	b.n	8004d72 <HAL_ADC_Init+0x106>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	6912      	ldr	r2, [r2, #16]
 8004d52:	0092      	lsls	r2, r2, #2
 8004d54:	0892      	lsrs	r2, r2, #2
 8004d56:	611a      	str	r2, [r3, #16]
 8004d58:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d5a:	4a76      	ldr	r2, [pc, #472]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	4976      	ldr	r1, [pc, #472]	; (8004f38 <HAL_ADC_Init+0x2cc>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	4a73      	ldr	r2, [pc, #460]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	68d2      	ldr	r2, [r2, #12]
 8004d7c:	2118      	movs	r1, #24
 8004d7e:	438a      	bics	r2, r1
 8004d80:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	68d1      	ldr	r1, [r2, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6892      	ldr	r2, [r2, #8]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004d94:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d96:	4a67      	ldr	r2, [pc, #412]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4968      	ldr	r1, [pc, #416]	; (8004f3c <HAL_ADC_Init+0x2d0>)
 8004d9c:	400a      	ands	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004da0:	4a64      	ldr	r2, [pc, #400]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004da2:	4b64      	ldr	r3, [pc, #400]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	065b      	lsls	r3, r3, #25
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	055b      	lsls	r3, r3, #21
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <HAL_ADC_Init+0x164>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0549      	lsls	r1, r1, #21
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	4959      	ldr	r1, [pc, #356]	; (8004f40 <HAL_ADC_Init+0x2d4>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	68d1      	ldr	r1, [r2, #12]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	2a02      	cmp	r2, #2
 8004df4:	d101      	bne.n	8004dfa <HAL_ADC_Init+0x18e>
 8004df6:	2204      	movs	r2, #4
 8004df8:	e000      	b.n	8004dfc <HAL_ADC_Init+0x190>
 8004dfa:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dfc:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6a12      	ldr	r2, [r2, #32]
 8004e02:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e04:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e0a:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004e0c:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6b52      	ldr	r2, [r2, #52]	; 0x34
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004e12:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6992      	ldr	r2, [r2, #24]
 8004e18:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8004e1a:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	69d2      	ldr	r2, [r2, #28]
 8004e20:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e22:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	23c2      	movs	r3, #194	; 0xc2
 8004e2e:	33ff      	adds	r3, #255	; 0xff
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d00b      	beq.n	8004e4c <HAL_ADC_Init+0x1e0>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	68d1      	ldr	r1, [r2, #12]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a90      	ldr	r0, [r2, #40]	; 0x28
                             hadc->Init.ExternalTrigConvEdge;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e46:	4302      	orrs	r2, r0
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d119      	bne.n	8004e88 <HAL_ADC_Init+0x21c>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_ADC_Init+0x204>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	68d2      	ldr	r2, [r2, #12]
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	0249      	lsls	r1, r1, #9
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e00b      	b.n	8004e88 <HAL_ADC_Init+0x21c>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	2220      	movs	r2, #32
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	2201      	movs	r2, #1
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d11f      	bne.n	8004ed0 <HAL_ADC_Init+0x264>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	6912      	ldr	r2, [r2, #16]
 8004e9a:	492a      	ldr	r1, [pc, #168]	; (8004f44 <HAL_ADC_Init+0x2d8>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	6911      	ldr	r1, [r2, #16]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6c50      	ldr	r0, [r2, #68]	; 0x44
                               hadc->Init.Oversample.RightBitShift             |
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004eb2:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                               hadc->Init.Oversample.RightBitShift             |
 8004eb8:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6912      	ldr	r2, [r2, #16]
 8004ec8:	2101      	movs	r1, #1
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	611a      	str	r2, [r3, #16]
 8004ece:	e00d      	b.n	8004eec <HAL_ADC_Init+0x280>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d007      	beq.n	8004eec <HAL_ADC_Init+0x280>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	6912      	ldr	r2, [r2, #16]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	438a      	bics	r2, r1
 8004eea:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	6952      	ldr	r2, [r2, #20]
 8004ef6:	2107      	movs	r1, #7
 8004ef8:	438a      	bics	r2, r1
 8004efa:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	6951      	ldr	r1, [r2, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	2203      	movs	r2, #3
 8004f1a:	4393      	bics	r3, r2
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	659a      	str	r2, [r3, #88]	; 0x58
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffffefd 	.word	0xfffffefd
 8004f34:	40012708 	.word	0x40012708
 8004f38:	ffc3ffff 	.word	0xffc3ffff
 8004f3c:	fdffffff 	.word	0xfdffffff
 8004f40:	fffe0219 	.word	0xfffe0219
 8004f44:	fffffc03 	.word	0xfffffc03

08004f48 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f60:	230f      	movs	r3, #15
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	4013      	ands	r3, r2
 8004f72:	d138      	bne.n	8004fe6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2254      	movs	r2, #84	; 0x54
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_Start+0x2a>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e038      	b.n	8004ff4 <HAL_ADC_Start+0x9c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2254      	movs	r2, #84	; 0x54
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d007      	beq.n	8004fa2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004f92:	230f      	movs	r3, #15
 8004f94:	18fc      	adds	r4, r7, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f000 f957 	bl	800524c <ADC_Enable>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004fa2:	230f      	movs	r3, #15
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d120      	bne.n	8004fee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_ADC_Start+0xa4>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	0052      	lsls	r2, r2, #1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2254      	movs	r2, #84	; 0x54
 8004fc8:	2100      	movs	r1, #0
 8004fca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	221c      	movs	r2, #28
 8004fd2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	6892      	ldr	r2, [r2, #8]
 8004fde:	2104      	movs	r1, #4
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	e003      	b.n	8004fee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fe6:	230f      	movs	r3, #15
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004fee:	230f      	movs	r3, #15
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b005      	add	sp, #20
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	fffff0fe 	.word	0xfffff0fe

08005000 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d102      	bne.n	8005020 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800501a:	2308      	movs	r3, #8
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e013      	b.n	8005048 <HAL_ADC_PollForConversion+0x48>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	4013      	ands	r3, r2
 800502a:	d00b      	beq.n	8005044 <HAL_ADC_PollForConversion+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	2220      	movs	r2, #32
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2254      	movs	r2, #84	; 0x54
 800503c:	2100      	movs	r1, #0
 800503e:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e06b      	b.n	800511c <HAL_ADC_PollForConversion+0x11c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8005044:	230c      	movs	r3, #12
 8005046:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005048:	f7ff fe06 	bl	8004c58 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005050:	e019      	b.n	8005086 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	d016      	beq.n	8005086 <HAL_ADC_PollForConversion+0x86>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <HAL_ADC_PollForConversion+0x6e>
 800505e:	f7ff fdfb 	bl	8004c58 <HAL_GetTick>
 8005062:	0002      	movs	r2, r0
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d90b      	bls.n	8005086 <HAL_ADC_PollForConversion+0x86>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	2204      	movs	r2, #4
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2254      	movs	r2, #84	; 0x54
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e04a      	b.n	800511c <HAL_ADC_PollForConversion+0x11c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4013      	ands	r3, r2
 8005090:	d0df      	beq.n	8005052 <HAL_ADC_PollForConversion+0x52>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	0092      	lsls	r2, r2, #2
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	23c0      	movs	r3, #192	; 0xc0
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4013      	ands	r3, r2
 80050ac:	d12d      	bne.n	800510a <HAL_ADC_PollForConversion+0x10a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d129      	bne.n	800510a <HAL_ADC_PollForConversion+0x10a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	4013      	ands	r3, r2
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d122      	bne.n	800510a <HAL_ADC_PollForConversion+0x10a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2204      	movs	r2, #4
 80050cc:	4013      	ands	r3, r2
 80050ce:	d110      	bne.n	80050f2 <HAL_ADC_PollForConversion+0xf2>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	6852      	ldr	r2, [r2, #4]
 80050da:	210c      	movs	r1, #12
 80050dc:	438a      	bics	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <HAL_ADC_PollForConversion+0x124>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	2201      	movs	r2, #1
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	659a      	str	r2, [r3, #88]	; 0x58
 80050f0:	e00b      	b.n	800510a <HAL_ADC_PollForConversion+0x10a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	2220      	movs	r2, #32
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005102:	2201      	movs	r2, #1
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <HAL_ADC_PollForConversion+0x11a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	220c      	movs	r2, #12
 8005118:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bd80      	pop	{r7, pc}
 8005124:	fffffefe 	.word	0xfffffefe

08005128 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b002      	add	sp, #8
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2254      	movs	r2, #84	; 0x54
 800514e:	5c9b      	ldrb	r3, [r3, r2]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x18>
 8005154:	2302      	movs	r3, #2
 8005156:	e06c      	b.n	8005232 <HAL_ADC_ConfigChannel+0xf2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2254      	movs	r2, #84	; 0x54
 800515c:	2101      	movs	r1, #1
 800515e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2204      	movs	r2, #4
 8005168:	4013      	ands	r3, r2
 800516a:	d00b      	beq.n	8005184 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	2220      	movs	r2, #32
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	659a      	str	r2, [r3, #88]	; 0x58
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2254      	movs	r2, #84	; 0x54
 800517c:	2100      	movs	r1, #0
 800517e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e056      	b.n	8005232 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <HAL_ADC_ConfigChannel+0xfc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d028      	beq.n	80051e0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	0352      	lsls	r2, r2, #13
 800519e:	0b52      	lsrs	r2, r2, #13
 80051a0:	430a      	orrs	r2, r1
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* internal measurement paths enable: If internal channel selected, enable  */
    /* dedicated internal buffers and path.                                     */
    
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	02db      	lsls	r3, r3, #11
 80051ac:	4013      	ands	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80051b0:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 80051b2:	4a23      	ldr	r2, [pc, #140]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	0409      	lsls	r1, r1, #16
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80051be:	200a      	movs	r0, #10
 80051c0:	f000 f8a4 	bl	800530c <ADC_DelayMicroSecond>
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	029b      	lsls	r3, r3, #10
 80051cc:	4013      	ands	r3, r2
 80051ce:	d02b      	beq.n	8005228 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80051d0:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	03c9      	lsls	r1, r1, #15
 80051da:	430a      	orrs	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e023      	b.n	8005228 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	0352      	lsls	r2, r2, #13
 80051f0:	0b52      	lsrs	r2, r2, #13
 80051f2:	43d2      	mvns	r2, r2
 80051f4:	400a      	ands	r2, r1
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	02db      	lsls	r3, r3, #11
 8005200:	4013      	ands	r3, r2
 8005202:	d005      	beq.n	8005210 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 8005206:	4a0e      	ldr	r2, [pc, #56]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	490e      	ldr	r1, [pc, #56]	; (8005244 <HAL_ADC_ConfigChannel+0x104>)
 800520c:	400a      	ands	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	4013      	ands	r3, r2
 800521a:	d005      	beq.n	8005228 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 800521e:	4a08      	ldr	r2, [pc, #32]	; (8005240 <HAL_ADC_ConfigChannel+0x100>)
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	4909      	ldr	r1, [pc, #36]	; (8005248 <HAL_ADC_ConfigChannel+0x108>)
 8005224:	400a      	ands	r2, r1
 8005226:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2254      	movs	r2, #84	; 0x54
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b002      	add	sp, #8
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	00001001 	.word	0x00001001
 8005240:	40012708 	.word	0x40012708
 8005244:	ff7fffff 	.word	0xff7fffff
 8005248:	ffbfffff 	.word	0xffbfffff

0800524c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2203      	movs	r2, #3
 8005260:	4013      	ands	r3, r2
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <ADC_Enable+0x2c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	4013      	ands	r3, r2
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <ADC_Enable+0x2c>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <ADC_Enable+0x2e>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d13f      	bne.n	80052fe <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a20      	ldr	r2, [pc, #128]	; (8005308 <ADC_Enable+0xbc>)
 8005286:	4013      	ands	r3, r2
 8005288:	d00d      	beq.n	80052a6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	2210      	movs	r2, #16
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	2201      	movs	r2, #1
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e02c      	b.n	8005300 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	2101      	movs	r1, #1
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80052b6:	2001      	movs	r0, #1
 80052b8:	f000 f828 	bl	800530c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80052bc:	f7ff fccc 	bl	8004c58 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052c4:	e014      	b.n	80052f0 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052c6:	f7ff fcc7 	bl	8004c58 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b0a      	cmp	r3, #10
 80052d2:	d90d      	bls.n	80052f0 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	2210      	movs	r2, #16
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	2201      	movs	r2, #1
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e007      	b.n	8005300 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2201      	movs	r2, #1
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d1e3      	bne.n	80052c6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b004      	add	sp, #16
 8005306:	bd80      	pop	{r7, pc}
 8005308:	80000017 	.word	0x80000017

0800530c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond : delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <ADC_DelayMicroSecond+0x34>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	490a      	ldr	r1, [pc, #40]	; (8005344 <ADC_DelayMicroSecond+0x38>)
 800531a:	0018      	movs	r0, r3
 800531c:	f7fa fef4 	bl	8000108 <__udivsi3>
 8005320:	0003      	movs	r3, r0
 8005322:	001a      	movs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4353      	muls	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800532a:	e002      	b.n	8005332 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3b01      	subs	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f9      	bne.n	800532c <ADC_DelayMicroSecond+0x20>
  } 
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b004      	add	sp, #16
 800533e:	bd80      	pop	{r7, pc}
 8005340:	2000002c 	.word	0x2000002c
 8005344:	000f4240 	.word	0x000f4240

08005348 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005352:	2317      	movs	r3, #23
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2254      	movs	r2, #84	; 0x54
 8005366:	5c9b      	ldrb	r3, [r3, r2]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_ADCEx_Calibration_Start+0x28>
 800536c:	2302      	movs	r3, #2
 800536e:	e076      	b.n	800545e <HAL_ADCEx_Calibration_Start+0x116>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2254      	movs	r2, #84	; 0x54
 8005374:	2101      	movs	r1, #1
 8005376:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2203      	movs	r2, #3
 8005380:	4013      	ands	r3, r2
 8005382:	2b01      	cmp	r3, #1
 8005384:	d108      	bne.n	8005398 <HAL_ADCEx_Calibration_Start+0x50>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_ADCEx_Calibration_Start+0x50>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_ADCEx_Calibration_Start+0x52>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d14e      	bne.n	800543c <HAL_ADCEx_Calibration_Start+0xf4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	4a31      	ldr	r2, [pc, #196]	; (8005468 <HAL_ADCEx_Calibration_Start+0x120>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	2202      	movs	r2, #2
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2203      	movs	r2, #3
 80053b6:	4013      	ands	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	68d2      	ldr	r2, [r2, #12]
 80053c4:	2103      	movs	r1, #3
 80053c6:	438a      	bics	r2, r1
 80053c8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6892      	ldr	r2, [r2, #8]
 80053d4:	2180      	movs	r1, #128	; 0x80
 80053d6:	0609      	lsls	r1, r1, #24
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80053dc:	f7ff fc3c 	bl	8004c58 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80053e4:	e014      	b.n	8005410 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80053e6:	f7ff fc37 	bl	8004c58 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b0a      	cmp	r3, #10
 80053f2:	d90d      	bls.n	8005410 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	2212      	movs	r2, #18
 80053fa:	4393      	bics	r3, r2
 80053fc:	2210      	movs	r2, #16
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2254      	movs	r2, #84	; 0x54
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e026      	b.n	800545e <HAL_ADCEx_Calibration_Start+0x116>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	dbe5      	blt.n	80053e6 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	68d1      	ldr	r1, [r2, #12]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	430a      	orrs	r2, r1
 8005428:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	2203      	movs	r2, #3
 8005430:	4393      	bics	r3, r2
 8005432:	2201      	movs	r2, #1
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	659a      	str	r2, [r3, #88]	; 0x58
 800543a:	e009      	b.n	8005450 <HAL_ADCEx_Calibration_Start+0x108>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	2220      	movs	r2, #32
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8005448:	2317      	movs	r3, #23
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2254      	movs	r2, #84	; 0x54
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005458:	2317      	movs	r3, #23
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	781b      	ldrb	r3, [r3, #0]
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b006      	add	sp, #24
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	fffffefd 	.word	0xfffffefd

0800546c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	0002      	movs	r2, r0
 8005474:	1dfb      	adds	r3, r7, #7
 8005476:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <NVIC_EnableIRQ+0x28>)
 800547a:	1dfa      	adds	r2, r7, #7
 800547c:	7812      	ldrb	r2, [r2, #0]
 800547e:	0011      	movs	r1, r2
 8005480:	221f      	movs	r2, #31
 8005482:	400a      	ands	r2, r1
 8005484:	2101      	movs	r1, #1
 8005486:	4091      	lsls	r1, r2
 8005488:	000a      	movs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000e100 	.word	0xe000e100

08005498 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	0002      	movs	r2, r0
 80054a0:	1dfb      	adds	r3, r7, #7
 80054a2:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80054a4:	4907      	ldr	r1, [pc, #28]	; (80054c4 <NVIC_SetPendingIRQ+0x2c>)
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	001a      	movs	r2, r3
 80054ac:	231f      	movs	r3, #31
 80054ae:	4013      	ands	r3, r2
 80054b0:	2201      	movs	r2, #1
 80054b2:	409a      	lsls	r2, r3
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	50ca      	str	r2, [r1, r3]
}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b002      	add	sp, #8
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	e000e100 	.word	0xe000e100

080054c8 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	0002      	movs	r2, r0
 80054d0:	1dfb      	adds	r3, r7, #7
 80054d2:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80054d4:	4907      	ldr	r1, [pc, #28]	; (80054f4 <NVIC_ClearPendingIRQ+0x2c>)
 80054d6:	1dfb      	adds	r3, r7, #7
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	001a      	movs	r2, r3
 80054dc:	231f      	movs	r3, #31
 80054de:	4013      	ands	r3, r2
 80054e0:	2201      	movs	r2, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	23c0      	movs	r3, #192	; 0xc0
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	50ca      	str	r2, [r1, r3]
}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b002      	add	sp, #8
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f8:	b5b0      	push	{r4, r5, r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	0002      	movs	r2, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	1dfb      	adds	r3, r7, #7
 8005504:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8005506:	1dfb      	adds	r3, r7, #7
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b7f      	cmp	r3, #127	; 0x7f
 800550c:	d932      	bls.n	8005574 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800550e:	4c2f      	ldr	r4, [pc, #188]	; (80055cc <NVIC_SetPriority+0xd4>)
 8005510:	1dfb      	adds	r3, r7, #7
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	001a      	movs	r2, r3
 8005516:	230f      	movs	r3, #15
 8005518:	4013      	ands	r3, r2
 800551a:	3b08      	subs	r3, #8
 800551c:	0899      	lsrs	r1, r3, #2
 800551e:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <NVIC_SetPriority+0xd4>)
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	0018      	movs	r0, r3
 8005526:	230f      	movs	r3, #15
 8005528:	4003      	ands	r3, r0
 800552a:	3b08      	subs	r3, #8
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	3306      	adds	r3, #6
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	18d3      	adds	r3, r2, r3
 8005534:	3304      	adds	r3, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	1dfa      	adds	r2, r7, #7
 800553a:	7812      	ldrb	r2, [r2, #0]
 800553c:	0010      	movs	r0, r2
 800553e:	2203      	movs	r2, #3
 8005540:	4002      	ands	r2, r0
 8005542:	00d2      	lsls	r2, r2, #3
 8005544:	20ff      	movs	r0, #255	; 0xff
 8005546:	4090      	lsls	r0, r2
 8005548:	0002      	movs	r2, r0
 800554a:	43d2      	mvns	r2, r2
 800554c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	20ff      	movs	r0, #255	; 0xff
 8005554:	4018      	ands	r0, r3
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	001d      	movs	r5, r3
 800555c:	2303      	movs	r3, #3
 800555e:	402b      	ands	r3, r5
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4098      	lsls	r0, r3
 8005564:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005566:	431a      	orrs	r2, r3
 8005568:	1d8b      	adds	r3, r1, #6
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	18e3      	adds	r3, r4, r3
 800556e:	3304      	adds	r3, #4
 8005570:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005572:	e027      	b.n	80055c4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005574:	4c16      	ldr	r4, [pc, #88]	; (80055d0 <NVIC_SetPriority+0xd8>)
 8005576:	1dfb      	adds	r3, r7, #7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	b25b      	sxtb	r3, r3
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	4914      	ldr	r1, [pc, #80]	; (80055d0 <NVIC_SetPriority+0xd8>)
 8005580:	1dfa      	adds	r2, r7, #7
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	b252      	sxtb	r2, r2
 8005586:	0892      	lsrs	r2, r2, #2
 8005588:	32c0      	adds	r2, #192	; 0xc0
 800558a:	0092      	lsls	r2, r2, #2
 800558c:	5852      	ldr	r2, [r2, r1]
 800558e:	1df9      	adds	r1, r7, #7
 8005590:	7809      	ldrb	r1, [r1, #0]
 8005592:	0008      	movs	r0, r1
 8005594:	2103      	movs	r1, #3
 8005596:	4001      	ands	r1, r0
 8005598:	00c9      	lsls	r1, r1, #3
 800559a:	20ff      	movs	r0, #255	; 0xff
 800559c:	4088      	lsls	r0, r1
 800559e:	0001      	movs	r1, r0
 80055a0:	43c9      	mvns	r1, r1
 80055a2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	0192      	lsls	r2, r2, #6
 80055a8:	20ff      	movs	r0, #255	; 0xff
 80055aa:	4010      	ands	r0, r2
 80055ac:	1dfa      	adds	r2, r7, #7
 80055ae:	7812      	ldrb	r2, [r2, #0]
 80055b0:	0015      	movs	r5, r2
 80055b2:	2203      	movs	r2, #3
 80055b4:	402a      	ands	r2, r5
 80055b6:	00d2      	lsls	r2, r2, #3
 80055b8:	4090      	lsls	r0, r2
 80055ba:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055bc:	430a      	orrs	r2, r1
 80055be:	33c0      	adds	r3, #192	; 0xc0
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	511a      	str	r2, [r3, r4]
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bdb0      	pop	{r4, r5, r7, pc}
 80055cc:	e000ed00 	.word	0xe000ed00
 80055d0:	e000e100 	.word	0xe000e100

080055d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	230f      	movs	r3, #15
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	1c02      	adds	r2, r0, #0
 80055e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	230f      	movs	r3, #15
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b25b      	sxtb	r3, r3
 80055f0:	0011      	movs	r1, r2
 80055f2:	0018      	movs	r0, r3
 80055f4:	f7ff ff80 	bl	80054f8 <NVIC_SetPriority>
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b004      	add	sp, #16
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	0002      	movs	r2, r0
 8005608:	1dfb      	adds	r3, r7, #7
 800560a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800560c:	1dfb      	adds	r3, r7, #7
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	b25b      	sxtb	r3, r3
 8005612:	0018      	movs	r0, r3
 8005614:	f7ff ff2a 	bl	800546c <NVIC_EnableIRQ>
}
 8005618:	46c0      	nop			; (mov r8, r8)
 800561a:	46bd      	mov	sp, r7
 800561c:	b002      	add	sp, #8
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	0002      	movs	r2, r0
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	701a      	strb	r2, [r3, #0]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800562c:	1dfb      	adds	r3, r7, #7
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	b25b      	sxtb	r3, r3
 8005632:	0018      	movs	r0, r3
 8005634:	f7ff ff30 	bl	8005498 <NVIC_SetPendingIRQ>
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	0002      	movs	r2, r0
 8005648:	1dfb      	adds	r3, r7, #7
 800564a:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800564c:	1dfb      	adds	r3, r7, #7
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b25b      	sxtb	r3, r3
 8005652:	0018      	movs	r0, r3
 8005654:	f7ff ff38 	bl	80054c8 <NVIC_ClearPendingIRQ>
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005676:	e155      	b.n	8005924 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2101      	movs	r1, #1
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4091      	lsls	r1, r2
 8005682:	000a      	movs	r2, r1
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d100      	bne.n	8005690 <HAL_GPIO_Init+0x30>
 800568e:	e146      	b.n	800591e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x40>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b12      	cmp	r3, #18
 800569e:	d123      	bne.n	80056e8 <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	08da      	lsrs	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3208      	adds	r2, #8
 80056a8:	0092      	lsls	r2, r2, #2
 80056aa:	58d3      	ldr	r3, [r2, r3]
 80056ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2207      	movs	r2, #7
 80056b2:	4013      	ands	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	220f      	movs	r2, #15
 80056b8:	409a      	lsls	r2, r3
 80056ba:	0013      	movs	r3, r2
 80056bc:	43da      	mvns	r2, r3
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2107      	movs	r1, #7
 80056cc:	400b      	ands	r3, r1
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	409a      	lsls	r2, r3
 80056d2:	0013      	movs	r3, r2
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	08da      	lsrs	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3208      	adds	r2, #8
 80056e2:	0092      	lsls	r2, r2, #2
 80056e4:	6939      	ldr	r1, [r7, #16]
 80056e6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d00b      	beq.n	8005708 <HAL_GPIO_Init+0xa8>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d007      	beq.n	8005708 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056fc:	2b11      	cmp	r3, #17
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b12      	cmp	r3, #18
 8005706:	d130      	bne.n	800576a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	409a      	lsls	r2, r3
 8005716:	0013      	movs	r3, r2
 8005718:	43da      	mvns	r2, r3
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	409a      	lsls	r2, r3
 800572a:	0013      	movs	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800573e:	2201      	movs	r2, #1
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	409a      	lsls	r2, r3
 8005744:	0013      	movs	r3, r2
 8005746:	43da      	mvns	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	2201      	movs	r2, #1
 8005756:	401a      	ands	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	409a      	lsls	r2, r3
 800575c:	0013      	movs	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	2203      	movs	r2, #3
 8005776:	409a      	lsls	r2, r3
 8005778:	0013      	movs	r3, r2
 800577a:	43da      	mvns	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2203      	movs	r2, #3
 8005788:	401a      	ands	r2, r3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	409a      	lsls	r2, r3
 8005790:	0013      	movs	r3, r2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2203      	movs	r2, #3
 80057aa:	409a      	lsls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	43da      	mvns	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	0013      	movs	r3, r2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	055b      	lsls	r3, r3, #21
 80057d6:	4013      	ands	r3, r2
 80057d8:	d100      	bne.n	80057dc <HAL_GPIO_Init+0x17c>
 80057da:	e0a0      	b.n	800591e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057dc:	4b57      	ldr	r3, [pc, #348]	; (800593c <HAL_GPIO_Init+0x2dc>)
 80057de:	4a57      	ldr	r2, [pc, #348]	; (800593c <HAL_GPIO_Init+0x2dc>)
 80057e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057e2:	2101      	movs	r1, #1
 80057e4:	430a      	orrs	r2, r1
 80057e6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80057e8:	4a55      	ldr	r2, [pc, #340]	; (8005940 <HAL_GPIO_Init+0x2e0>)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	3302      	adds	r3, #2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	589b      	ldr	r3, [r3, r2]
 80057f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2203      	movs	r2, #3
 80057fa:	4013      	ands	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	220f      	movs	r2, #15
 8005800:	409a      	lsls	r2, r3
 8005802:	0013      	movs	r3, r2
 8005804:	43da      	mvns	r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	23a0      	movs	r3, #160	; 0xa0
 8005810:	05db      	lsls	r3, r3, #23
 8005812:	429a      	cmp	r2, r3
 8005814:	d01f      	beq.n	8005856 <HAL_GPIO_Init+0x1f6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a4a      	ldr	r2, [pc, #296]	; (8005944 <HAL_GPIO_Init+0x2e4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d019      	beq.n	8005852 <HAL_GPIO_Init+0x1f2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a49      	ldr	r2, [pc, #292]	; (8005948 <HAL_GPIO_Init+0x2e8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_GPIO_Init+0x1ee>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a48      	ldr	r2, [pc, #288]	; (800594c <HAL_GPIO_Init+0x2ec>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00d      	beq.n	800584a <HAL_GPIO_Init+0x1ea>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a47      	ldr	r2, [pc, #284]	; (8005950 <HAL_GPIO_Init+0x2f0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_Init+0x1e6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a46      	ldr	r2, [pc, #280]	; (8005954 <HAL_GPIO_Init+0x2f4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_GPIO_Init+0x1e2>
 800583e:	2305      	movs	r3, #5
 8005840:	e00a      	b.n	8005858 <HAL_GPIO_Init+0x1f8>
 8005842:	2306      	movs	r3, #6
 8005844:	e008      	b.n	8005858 <HAL_GPIO_Init+0x1f8>
 8005846:	2304      	movs	r3, #4
 8005848:	e006      	b.n	8005858 <HAL_GPIO_Init+0x1f8>
 800584a:	2303      	movs	r3, #3
 800584c:	e004      	b.n	8005858 <HAL_GPIO_Init+0x1f8>
 800584e:	2302      	movs	r3, #2
 8005850:	e002      	b.n	8005858 <HAL_GPIO_Init+0x1f8>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_GPIO_Init+0x1f8>
 8005856:	2300      	movs	r3, #0
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	2103      	movs	r1, #3
 800585c:	400a      	ands	r2, r1
 800585e:	0092      	lsls	r2, r2, #2
 8005860:	4093      	lsls	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005868:	4935      	ldr	r1, [pc, #212]	; (8005940 <HAL_GPIO_Init+0x2e0>)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	3302      	adds	r3, #2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005876:	4b38      	ldr	r3, [pc, #224]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	43da      	mvns	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	025b      	lsls	r3, r3, #9
 800588e:	4013      	ands	r3, r2
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800589a:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80058a0:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	43da      	mvns	r2, r3
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4013      	ands	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	4013      	ands	r3, r2
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ca:	4b23      	ldr	r3, [pc, #140]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	43da      	mvns	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4013      	ands	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	035b      	lsls	r3, r3, #13
 80058e2:	4013      	ands	r3, r2
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	43da      	mvns	r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4013      	ands	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	039b      	lsls	r3, r3, #14
 800590c:	4013      	ands	r3, r2
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	40da      	lsrs	r2, r3
 800592c:	1e13      	subs	r3, r2, #0
 800592e:	d000      	beq.n	8005932 <HAL_GPIO_Init+0x2d2>
 8005930:	e6a2      	b.n	8005678 <HAL_GPIO_Init+0x18>
  }
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	46bd      	mov	sp, r7
 8005936:	b006      	add	sp, #24
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	40021000 	.word	0x40021000
 8005940:	40010000 	.word	0x40010000
 8005944:	50000400 	.word	0x50000400
 8005948:	50000800 	.word	0x50000800
 800594c:	50000c00 	.word	0x50000c00
 8005950:	50001000 	.word	0x50001000
 8005954:	50001c00 	.word	0x50001c00
 8005958:	40010400 	.word	0x40010400

0800595c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	0008      	movs	r0, r1
 8005966:	0011      	movs	r1, r2
 8005968:	1cbb      	adds	r3, r7, #2
 800596a:	1c02      	adds	r2, r0, #0
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	1c7b      	adds	r3, r7, #1
 8005970:	1c0a      	adds	r2, r1, #0
 8005972:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005974:	1c7b      	adds	r3, r7, #1
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800597c:	1cbb      	adds	r3, r7, #2
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005984:	e003      	b.n	800598e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005986:	1cbb      	adds	r3, r7, #2
 8005988:	881a      	ldrh	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b002      	add	sp, #8
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	0002      	movs	r2, r0
 80059a0:	1dbb      	adds	r3, r7, #6
 80059a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	1dba      	adds	r2, r7, #6
 80059aa:	8812      	ldrh	r2, [r2, #0]
 80059ac:	4013      	ands	r3, r2
 80059ae:	d008      	beq.n	80059c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80059b2:	1dba      	adds	r2, r7, #6
 80059b4:	8812      	ldrh	r2, [r2, #0]
 80059b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059b8:	1dbb      	adds	r3, r7, #6
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	0018      	movs	r0, r3
 80059be:	f004 f9a9 	bl	8009d14 <HAL_GPIO_EXTI_Callback>
  }
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b002      	add	sp, #8
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	40010400 	.word	0x40010400

080059d0 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80059d4:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <HAL_PWR_DisablePVD+0x18>)
 80059d6:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_PWR_DisablePVD+0x18>)
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	2110      	movs	r1, #16
 80059dc:	438a      	bics	r2, r1
 80059de:	601a      	str	r2, [r3, #0]
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	40007000 	.word	0x40007000

080059ec <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80059f2:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	00c9      	lsls	r1, r1, #3
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40007000 	.word	0x40007000

08005a08 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005a0e:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	0089      	lsls	r1, r1, #2
 8005a16:	430a      	orrs	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40007000 	.word	0x40007000

08005a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2201      	movs	r2, #1
 8005a36:	4013      	ands	r3, r2
 8005a38:	d100      	bne.n	8005a3c <HAL_RCC_OscConfig+0x18>
 8005a3a:	e087      	b.n	8005b4c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a3c:	4bc0      	ldr	r3, [pc, #768]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	220c      	movs	r2, #12
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d00e      	beq.n	8005a66 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a48:	4bbd      	ldr	r3, [pc, #756]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	220c      	movs	r2, #12
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b0c      	cmp	r3, #12
 8005a52:	d116      	bne.n	8005a82 <HAL_RCC_OscConfig+0x5e>
 8005a54:	4bba      	ldr	r3, [pc, #744]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	025b      	lsls	r3, r3, #9
 8005a5c:	401a      	ands	r2, r3
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	025b      	lsls	r3, r3, #9
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10d      	bne.n	8005a82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a66:	4bb6      	ldr	r3, [pc, #728]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	2380      	movs	r3, #128	; 0x80
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d100      	bne.n	8005a74 <HAL_RCC_OscConfig+0x50>
 8005a72:	e06a      	b.n	8005b4a <HAL_RCC_OscConfig+0x126>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d166      	bne.n	8005b4a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f000 fb69 	bl	8006154 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	025b      	lsls	r3, r3, #9
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d107      	bne.n	8005a9e <HAL_RCC_OscConfig+0x7a>
 8005a8e:	4bac      	ldr	r3, [pc, #688]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005a90:	4aab      	ldr	r2, [pc, #684]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	2180      	movs	r1, #128	; 0x80
 8005a96:	0249      	lsls	r1, r1, #9
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e027      	b.n	8005aee <HAL_RCC_OscConfig+0xca>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	23a0      	movs	r3, #160	; 0xa0
 8005aa4:	02db      	lsls	r3, r3, #11
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_RCC_OscConfig+0xa4>
 8005aaa:	4ba5      	ldr	r3, [pc, #660]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005aac:	4aa4      	ldr	r2, [pc, #656]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	02c9      	lsls	r1, r1, #11
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	4ba1      	ldr	r3, [pc, #644]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005aba:	4aa1      	ldr	r2, [pc, #644]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	0249      	lsls	r1, r1, #9
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e012      	b.n	8005aee <HAL_RCC_OscConfig+0xca>
 8005ac8:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005aca:	4a9d      	ldr	r2, [pc, #628]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	499d      	ldr	r1, [pc, #628]	; (8005d44 <HAL_RCC_OscConfig+0x320>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	4b9a      	ldr	r3, [pc, #616]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	025b      	lsls	r3, r3, #9
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4b97      	ldr	r3, [pc, #604]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005ae4:	4a96      	ldr	r2, [pc, #600]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4997      	ldr	r1, [pc, #604]	; (8005d48 <HAL_RCC_OscConfig+0x324>)
 8005aea:	400a      	ands	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7ff f8af 	bl	8004c58 <HAL_GetTick>
 8005afa:	0003      	movs	r3, r0
 8005afc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b00:	f7ff f8aa 	bl	8004c58 <HAL_GetTick>
 8005b04:	0002      	movs	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	; 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e320      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	029b      	lsls	r3, r3, #10
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0xdc>
 8005b1e:	e015      	b.n	8005b4c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b20:	f7ff f89a 	bl	8004c58 <HAL_GetTick>
 8005b24:	0003      	movs	r3, r0
 8005b26:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b2a:	f7ff f895 	bl	8004c58 <HAL_GetTick>
 8005b2e:	0002      	movs	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	; 0x64
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e30b      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3c:	4b80      	ldr	r3, [pc, #512]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	4013      	ands	r3, r2
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x106>
 8005b48:	e000      	b.n	8005b4c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2202      	movs	r2, #2
 8005b52:	4013      	ands	r3, r2
 8005b54:	d100      	bne.n	8005b58 <HAL_RCC_OscConfig+0x134>
 8005b56:	e06c      	b.n	8005c32 <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005b58:	4b79      	ldr	r3, [pc, #484]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	220c      	movs	r2, #12
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d00b      	beq.n	8005b7c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b64:	4b76      	ldr	r3, [pc, #472]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	220c      	movs	r2, #12
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b0c      	cmp	r3, #12
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x184>
 8005b70:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	025b      	lsls	r3, r3, #9
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d115      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7c:	4b70      	ldr	r3, [pc, #448]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2204      	movs	r2, #4
 8005b82:	4013      	ands	r3, r2
 8005b84:	d005      	beq.n	8005b92 <HAL_RCC_OscConfig+0x16e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e2e0      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b92:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	496c      	ldr	r1, [pc, #432]	; (8005d4c <HAL_RCC_OscConfig+0x328>)
 8005b9a:	4019      	ands	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba6:	e044      	b.n	8005c32 <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d027      	beq.n	8005c00 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bb0:	4a63      	ldr	r2, [pc, #396]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005bb2:	4b63      	ldr	r3, [pc, #396]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2109      	movs	r1, #9
 8005bb8:	438b      	bics	r3, r1
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7ff f848 	bl	8004c58 <HAL_GetTick>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bce:	f7ff f843 	bl	8004c58 <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e2b9      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be0:	4b57      	ldr	r3, [pc, #348]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2204      	movs	r2, #4
 8005be6:	4013      	ands	r3, r2
 8005be8:	d0f1      	beq.n	8005bce <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bea:	4a55      	ldr	r2, [pc, #340]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005bec:	4b54      	ldr	r3, [pc, #336]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4956      	ldr	r1, [pc, #344]	; (8005d4c <HAL_RCC_OscConfig+0x328>)
 8005bf2:	4019      	ands	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	e018      	b.n	8005c32 <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c00:	4b4f      	ldr	r3, [pc, #316]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c02:	4a4f      	ldr	r2, [pc, #316]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	2101      	movs	r1, #1
 8005c08:	438a      	bics	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7ff f824 	bl	8004c58 <HAL_GetTick>
 8005c10:	0003      	movs	r3, r0
 8005c12:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c16:	f7ff f81f 	bl	8004c58 <HAL_GetTick>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e295      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c28:	4b45      	ldr	r3, [pc, #276]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d1f1      	bne.n	8005c16 <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2210      	movs	r2, #16
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d100      	bne.n	8005c3e <HAL_RCC_OscConfig+0x21a>
 8005c3c:	e0c2      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	220c      	movs	r2, #12
 8005c44:	4013      	ands	r3, r2
 8005c46:	d162      	bne.n	8005d0e <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c48:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4013      	ands	r3, r2
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_OscConfig+0x23c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e279      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	23e0      	movs	r3, #224	; 0xe0
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	400b      	ands	r3, r1
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d91c      	bls.n	8005cac <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	0018      	movs	r0, r3
 8005c78:	f000 fc44 	bl	8006504 <RCC_SetFlashLatencyFromMSIRange>
 8005c7c:	1e03      	subs	r3, r0, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e267      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c84:	4a2e      	ldr	r2, [pc, #184]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4931      	ldr	r1, [pc, #196]	; (8005d50 <HAL_RCC_OscConfig+0x32c>)
 8005c8c:	4019      	ands	r1, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c96:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	0a19      	lsrs	r1, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	061b      	lsls	r3, r3, #24
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	6053      	str	r3, [r2, #4]
 8005caa:	e01b      	b.n	8005ce4 <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cac:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4927      	ldr	r1, [pc, #156]	; (8005d50 <HAL_RCC_OscConfig+0x32c>)
 8005cb4:	4019      	ands	r1, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cbe:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	0a19      	lsrs	r1, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 fc14 	bl	8006504 <RCC_SetFlashLatencyFromMSIRange>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e237      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	0b5b      	lsrs	r3, r3, #13
 8005cea:	3301      	adds	r3, #1
 8005cec:	2280      	movs	r2, #128	; 0x80
 8005cee:	0212      	lsls	r2, r2, #8
 8005cf0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8005cf2:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	210f      	movs	r1, #15
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	4915      	ldr	r1, [pc, #84]	; (8005d54 <HAL_RCC_OscConfig+0x330>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_RCC_OscConfig+0x334>)
 8005d04:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8005d06:	2003      	movs	r0, #3
 8005d08:	f003 ff94 	bl	8009c34 <HAL_InitTick>
 8005d0c:	e05a      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03c      	beq.n	8005d90 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <HAL_RCC_OscConfig+0x31c>)
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	0049      	lsls	r1, r1, #1
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fe ff98 	bl	8004c58 <HAL_GetTick>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005d2c:	e016      	b.n	8005d5c <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d2e:	f7fe ff93 	bl	8004c58 <HAL_GetTick>
 8005d32:	0002      	movs	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d90f      	bls.n	8005d5c <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e209      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	fffeffff 	.word	0xfffeffff
 8005d48:	fffbffff 	.word	0xfffbffff
 8005d4c:	ffffe0ff 	.word	0xffffe0ff
 8005d50:	ffff1fff 	.word	0xffff1fff
 8005d54:	0800b2c0 	.word	0x0800b2c0
 8005d58:	2000002c 	.word	0x2000002c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005d5c:	4bc7      	ldr	r3, [pc, #796]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4013      	ands	r3, r2
 8005d66:	d0e2      	beq.n	8005d2e <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d68:	4ac4      	ldr	r2, [pc, #784]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d6a:	4bc4      	ldr	r3, [pc, #784]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	49c4      	ldr	r1, [pc, #784]	; (8006080 <HAL_RCC_OscConfig+0x65c>)
 8005d70:	4019      	ands	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	430b      	orrs	r3, r1
 8005d78:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d7a:	4ac0      	ldr	r2, [pc, #768]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d7c:	4bbf      	ldr	r3, [pc, #764]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	0a19      	lsrs	r1, r3, #8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	061b      	lsls	r3, r3, #24
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	6053      	str	r3, [r2, #4]
 8005d8e:	e019      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d90:	4bba      	ldr	r3, [pc, #744]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d92:	4aba      	ldr	r2, [pc, #744]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	49bb      	ldr	r1, [pc, #748]	; (8006084 <HAL_RCC_OscConfig+0x660>)
 8005d98:	400a      	ands	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fe ff5c 	bl	8004c58 <HAL_GetTick>
 8005da0:	0003      	movs	r3, r0
 8005da2:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005da6:	f7fe ff57 	bl	8004c58 <HAL_GetTick>
 8005daa:	0002      	movs	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e1cd      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8005db8:	4bb0      	ldr	r3, [pc, #704]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d1f0      	bne.n	8005da6 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d036      	beq.n	8005e3c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dd6:	4ba9      	ldr	r3, [pc, #676]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005dd8:	4aa8      	ldr	r2, [pc, #672]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005dda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ddc:	2101      	movs	r1, #1
 8005dde:	430a      	orrs	r2, r1
 8005de0:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de2:	f7fe ff39 	bl	8004c58 <HAL_GetTick>
 8005de6:	0003      	movs	r3, r0
 8005de8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dec:	f7fe ff34 	bl	8004c58 <HAL_GetTick>
 8005df0:	0002      	movs	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e1aa      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfe:	4b9f      	ldr	r3, [pc, #636]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	2202      	movs	r2, #2
 8005e04:	4013      	ands	r3, r2
 8005e06:	d0f1      	beq.n	8005dec <HAL_RCC_OscConfig+0x3c8>
 8005e08:	e018      	b.n	8005e3c <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e0a:	4b9c      	ldr	r3, [pc, #624]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e0c:	4a9b      	ldr	r2, [pc, #620]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e10:	2101      	movs	r1, #1
 8005e12:	438a      	bics	r2, r1
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e16:	f7fe ff1f 	bl	8004c58 <HAL_GetTick>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e20:	f7fe ff1a 	bl	8004c58 <HAL_GetTick>
 8005e24:	0002      	movs	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e190      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e32:	4b92      	ldr	r3, [pc, #584]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d1f1      	bne.n	8005e20 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2204      	movs	r2, #4
 8005e42:	4013      	ands	r3, r2
 8005e44:	d100      	bne.n	8005e48 <HAL_RCC_OscConfig+0x424>
 8005e46:	e0af      	b.n	8005fa8 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e48:	2317      	movs	r3, #23
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e50:	4b8a      	ldr	r3, [pc, #552]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	055b      	lsls	r3, r3, #21
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d10a      	bne.n	8005e72 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e5c:	4b87      	ldr	r3, [pc, #540]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e5e:	4a87      	ldr	r2, [pc, #540]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005e60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e62:	2180      	movs	r1, #128	; 0x80
 8005e64:	0549      	lsls	r1, r1, #21
 8005e66:	430a      	orrs	r2, r1
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e6a:	2317      	movs	r3, #23
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	4b85      	ldr	r3, [pc, #532]	; (8006088 <HAL_RCC_OscConfig+0x664>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d11a      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e7e:	4b82      	ldr	r3, [pc, #520]	; (8006088 <HAL_RCC_OscConfig+0x664>)
 8005e80:	4a81      	ldr	r2, [pc, #516]	; (8006088 <HAL_RCC_OscConfig+0x664>)
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	0049      	lsls	r1, r1, #1
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8c:	f7fe fee4 	bl	8004c58 <HAL_GetTick>
 8005e90:	0003      	movs	r3, r0
 8005e92:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fe fedf 	bl	8004c58 <HAL_GetTick>
 8005e9a:	0002      	movs	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b64      	cmp	r3, #100	; 0x64
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e155      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea8:	4b77      	ldr	r3, [pc, #476]	; (8006088 <HAL_RCC_OscConfig+0x664>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x4ac>
 8005ec0:	4b6e      	ldr	r3, [pc, #440]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005ec2:	4a6e      	ldr	r2, [pc, #440]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005ec4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ec6:	2180      	movs	r1, #128	; 0x80
 8005ec8:	0049      	lsls	r1, r1, #1
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8005ece:	e031      	b.n	8005f34 <HAL_RCC_OscConfig+0x510>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x4ce>
 8005ed8:	4b68      	ldr	r3, [pc, #416]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005eda:	4a68      	ldr	r2, [pc, #416]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005edc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ede:	4969      	ldr	r1, [pc, #420]	; (8006084 <HAL_RCC_OscConfig+0x660>)
 8005ee0:	400a      	ands	r2, r1
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50
 8005ee4:	4b65      	ldr	r3, [pc, #404]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005ee6:	4a65      	ldr	r2, [pc, #404]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005ee8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005eea:	4968      	ldr	r1, [pc, #416]	; (800608c <HAL_RCC_OscConfig+0x668>)
 8005eec:	400a      	ands	r2, r1
 8005eee:	651a      	str	r2, [r3, #80]	; 0x50
 8005ef0:	e020      	b.n	8005f34 <HAL_RCC_OscConfig+0x510>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	23a0      	movs	r3, #160	; 0xa0
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d10e      	bne.n	8005f1c <HAL_RCC_OscConfig+0x4f8>
 8005efe:	4b5f      	ldr	r3, [pc, #380]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f00:	4a5e      	ldr	r2, [pc, #376]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f04:	2180      	movs	r1, #128	; 0x80
 8005f06:	00c9      	lsls	r1, r1, #3
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	651a      	str	r2, [r3, #80]	; 0x50
 8005f0c:	4b5b      	ldr	r3, [pc, #364]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f0e:	4a5b      	ldr	r2, [pc, #364]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	0049      	lsls	r1, r1, #1
 8005f16:	430a      	orrs	r2, r1
 8005f18:	651a      	str	r2, [r3, #80]	; 0x50
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCC_OscConfig+0x510>
 8005f1c:	4b57      	ldr	r3, [pc, #348]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f1e:	4a57      	ldr	r2, [pc, #348]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f22:	4958      	ldr	r1, [pc, #352]	; (8006084 <HAL_RCC_OscConfig+0x660>)
 8005f24:	400a      	ands	r2, r1
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
 8005f28:	4b54      	ldr	r3, [pc, #336]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f2a:	4a54      	ldr	r2, [pc, #336]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f2e:	4957      	ldr	r1, [pc, #348]	; (800608c <HAL_RCC_OscConfig+0x668>)
 8005f30:	400a      	ands	r2, r1
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3c:	f7fe fe8c 	bl	8004c58 <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
 8005f42:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f44:	e009      	b.n	8005f5a <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f46:	f7fe fe87 	bl	8004c58 <HAL_GetTick>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	4a4f      	ldr	r2, [pc, #316]	; (8006090 <HAL_RCC_OscConfig+0x66c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e0fc      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	4b48      	ldr	r3, [pc, #288]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4013      	ands	r3, r2
 8005f64:	d0ef      	beq.n	8005f46 <HAL_RCC_OscConfig+0x522>
 8005f66:	e014      	b.n	8005f92 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f68:	f7fe fe76 	bl	8004c58 <HAL_GetTick>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f70:	e009      	b.n	8005f86 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f72:	f7fe fe71 	bl	8004c58 <HAL_GetTick>
 8005f76:	0002      	movs	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	4a44      	ldr	r2, [pc, #272]	; (8006090 <HAL_RCC_OscConfig+0x66c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e0e6      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f86:	4b3d      	ldr	r3, [pc, #244]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d1ef      	bne.n	8005f72 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f92:	2317      	movs	r3, #23
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005f9e:	4a37      	ldr	r2, [pc, #220]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005fa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fa2:	493c      	ldr	r1, [pc, #240]	; (8006094 <HAL_RCC_OscConfig+0x670>)
 8005fa4:	400a      	ands	r2, r1
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2220      	movs	r2, #32
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d049      	beq.n	8006046 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d026      	beq.n	8006008 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005fbc:	4a2f      	ldr	r2, [pc, #188]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005fbe:	6892      	ldr	r2, [r2, #8]
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005fc8:	4a2c      	ldr	r2, [pc, #176]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005fca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fcc:	2101      	movs	r1, #1
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <HAL_RCC_OscConfig+0x674>)
 8005fd4:	4a30      	ldr	r2, [pc, #192]	; (8006098 <HAL_RCC_OscConfig+0x674>)
 8005fd6:	6a12      	ldr	r2, [r2, #32]
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	0189      	lsls	r1, r1, #6
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe0:	f7fe fe3a 	bl	8004c58 <HAL_GetTick>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fea:	f7fe fe35 	bl	8004c58 <HAL_GetTick>
 8005fee:	0002      	movs	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e0ab      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005ffc:	4b1f      	ldr	r3, [pc, #124]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2202      	movs	r2, #2
 8006002:	4013      	ands	r3, r2
 8006004:	d0f1      	beq.n	8005fea <HAL_RCC_OscConfig+0x5c6>
 8006006:	e01e      	b.n	8006046 <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006008:	4b1c      	ldr	r3, [pc, #112]	; (800607c <HAL_RCC_OscConfig+0x658>)
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_RCC_OscConfig+0x658>)
 800600c:	6892      	ldr	r2, [r2, #8]
 800600e:	2101      	movs	r1, #1
 8006010:	438a      	bics	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	4b20      	ldr	r3, [pc, #128]	; (8006098 <HAL_RCC_OscConfig+0x674>)
 8006016:	4a20      	ldr	r2, [pc, #128]	; (8006098 <HAL_RCC_OscConfig+0x674>)
 8006018:	6a12      	ldr	r2, [r2, #32]
 800601a:	4920      	ldr	r1, [pc, #128]	; (800609c <HAL_RCC_OscConfig+0x678>)
 800601c:	400a      	ands	r2, r1
 800601e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fe fe1a 	bl	8004c58 <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800602a:	f7fe fe15 	bl	8004c58 <HAL_GetTick>
 800602e:	0002      	movs	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e08b      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <HAL_RCC_OscConfig+0x658>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2202      	movs	r2, #2
 8006042:	4013      	ands	r3, r2
 8006044:	d1f1      	bne.n	800602a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d100      	bne.n	8006050 <HAL_RCC_OscConfig+0x62c>
 800604e:	e080      	b.n	8006152 <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	220c      	movs	r2, #12
 8006056:	4013      	ands	r3, r2
 8006058:	2b0c      	cmp	r3, #12
 800605a:	d100      	bne.n	800605e <HAL_RCC_OscConfig+0x63a>
 800605c:	e077      	b.n	800614e <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	2b02      	cmp	r3, #2
 8006064:	d158      	bne.n	8006118 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_RCC_OscConfig+0x658>)
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <HAL_RCC_OscConfig+0x658>)
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	490c      	ldr	r1, [pc, #48]	; (80060a0 <HAL_RCC_OscConfig+0x67c>)
 800606e:	400a      	ands	r2, r1
 8006070:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fe fdf1 	bl	8004c58 <HAL_GetTick>
 8006076:	0003      	movs	r3, r0
 8006078:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800607a:	e01c      	b.n	80060b6 <HAL_RCC_OscConfig+0x692>
 800607c:	40021000 	.word	0x40021000
 8006080:	ffff1fff 	.word	0xffff1fff
 8006084:	fffffeff 	.word	0xfffffeff
 8006088:	40007000 	.word	0x40007000
 800608c:	fffffbff 	.word	0xfffffbff
 8006090:	00001388 	.word	0x00001388
 8006094:	efffffff 	.word	0xefffffff
 8006098:	40010000 	.word	0x40010000
 800609c:	ffffdfff 	.word	0xffffdfff
 80060a0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a4:	f7fe fdd8 	bl	8004c58 <HAL_GetTick>
 80060a8:	0002      	movs	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e04e      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060b6:	4b29      	ldr	r3, [pc, #164]	; (800615c <HAL_RCC_OscConfig+0x738>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	049b      	lsls	r3, r3, #18
 80060be:	4013      	ands	r3, r2
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c2:	4a26      	ldr	r2, [pc, #152]	; (800615c <HAL_RCC_OscConfig+0x738>)
 80060c4:	4b25      	ldr	r3, [pc, #148]	; (800615c <HAL_RCC_OscConfig+0x738>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	4925      	ldr	r1, [pc, #148]	; (8006160 <HAL_RCC_OscConfig+0x73c>)
 80060ca:	4019      	ands	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	4318      	orrs	r0, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	4303      	orrs	r3, r0
 80060dc:	430b      	orrs	r3, r1
 80060de:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060e0:	4b1e      	ldr	r3, [pc, #120]	; (800615c <HAL_RCC_OscConfig+0x738>)
 80060e2:	4a1e      	ldr	r2, [pc, #120]	; (800615c <HAL_RCC_OscConfig+0x738>)
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	0449      	lsls	r1, r1, #17
 80060ea:	430a      	orrs	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ee:	f7fe fdb3 	bl	8004c58 <HAL_GetTick>
 80060f2:	0003      	movs	r3, r0
 80060f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fe fdae 	bl	8004c58 <HAL_GetTick>
 80060fc:	0002      	movs	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e024      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800610a:	4b14      	ldr	r3, [pc, #80]	; (800615c <HAL_RCC_OscConfig+0x738>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	049b      	lsls	r3, r3, #18
 8006112:	4013      	ands	r3, r2
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x6d4>
 8006116:	e01c      	b.n	8006152 <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006118:	4b10      	ldr	r3, [pc, #64]	; (800615c <HAL_RCC_OscConfig+0x738>)
 800611a:	4a10      	ldr	r2, [pc, #64]	; (800615c <HAL_RCC_OscConfig+0x738>)
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	4911      	ldr	r1, [pc, #68]	; (8006164 <HAL_RCC_OscConfig+0x740>)
 8006120:	400a      	ands	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006124:	f7fe fd98 	bl	8004c58 <HAL_GetTick>
 8006128:	0003      	movs	r3, r0
 800612a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612e:	f7fe fd93 	bl	8004c58 <HAL_GetTick>
 8006132:	0002      	movs	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e009      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <HAL_RCC_OscConfig+0x738>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	049b      	lsls	r3, r3, #18
 8006148:	4013      	ands	r3, r2
 800614a:	d1f0      	bne.n	800612e <HAL_RCC_OscConfig+0x70a>
 800614c:	e001      	b.n	8006152 <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	0018      	movs	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	b006      	add	sp, #24
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40021000 	.word	0x40021000
 8006160:	ff02ffff 	.word	0xff02ffff
 8006164:	feffffff 	.word	0xfeffffff

08006168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006176:	4b82      	ldr	r3, [pc, #520]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	401a      	ands	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d211      	bcs.n	80061a8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006184:	4b7e      	ldr	r3, [pc, #504]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 8006186:	4a7e      	ldr	r2, [pc, #504]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	2101      	movs	r1, #1
 800618c:	438a      	bics	r2, r1
 800618e:	0011      	movs	r1, r2
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006196:	4b7a      	ldr	r3, [pc, #488]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2201      	movs	r2, #1
 800619c:	401a      	ands	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0e6      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2202      	movs	r2, #2
 80061ae:	4013      	ands	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b2:	4a74      	ldr	r2, [pc, #464]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 80061b4:	4b73      	ldr	r3, [pc, #460]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	21f0      	movs	r1, #240	; 0xf0
 80061ba:	438b      	bics	r3, r1
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	430b      	orrs	r3, r1
 80061c4:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2201      	movs	r2, #1
 80061cc:	4013      	ands	r3, r2
 80061ce:	d100      	bne.n	80061d2 <HAL_RCC_ClockConfig+0x6a>
 80061d0:	e089      	b.n	80062e6 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d107      	bne.n	80061ea <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	4b6a      	ldr	r3, [pc, #424]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	4013      	ands	r3, r2
 80061e4:	d120      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e0c5      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f2:	4b64      	ldr	r3, [pc, #400]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	049b      	lsls	r3, r3, #18
 80061fa:	4013      	ands	r3, r2
 80061fc:	d114      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e0b9      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d106      	bne.n	8006218 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620a:	4b5e      	ldr	r3, [pc, #376]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2204      	movs	r2, #4
 8006210:	4013      	ands	r3, r2
 8006212:	d109      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e0ae      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4013      	ands	r3, r2
 8006222:	d101      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0a6      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006228:	4a56      	ldr	r2, [pc, #344]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 800622a:	4b56      	ldr	r3, [pc, #344]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2103      	movs	r1, #3
 8006230:	438b      	bics	r3, r1
 8006232:	0019      	movs	r1, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	430b      	orrs	r3, r1
 800623a:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800623c:	f7fe fd0c 	bl	8004c58 <HAL_GetTick>
 8006240:	0003      	movs	r3, r0
 8006242:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d111      	bne.n	8006270 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800624c:	e009      	b.n	8006262 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624e:	f7fe fd03 	bl	8004c58 <HAL_GetTick>
 8006252:	0002      	movs	r2, r0
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	4a4b      	ldr	r2, [pc, #300]	; (8006388 <HAL_RCC_ClockConfig+0x220>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e089      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006262:	4b48      	ldr	r3, [pc, #288]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	220c      	movs	r2, #12
 8006268:	4013      	ands	r3, r2
 800626a:	2b08      	cmp	r3, #8
 800626c:	d1ef      	bne.n	800624e <HAL_RCC_ClockConfig+0xe6>
 800626e:	e03a      	b.n	80062e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d111      	bne.n	800629c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006278:	e009      	b.n	800628e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800627a:	f7fe fced 	bl	8004c58 <HAL_GetTick>
 800627e:	0002      	movs	r2, r0
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	4a40      	ldr	r2, [pc, #256]	; (8006388 <HAL_RCC_ClockConfig+0x220>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e073      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800628e:	4b3d      	ldr	r3, [pc, #244]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	220c      	movs	r2, #12
 8006294:	4013      	ands	r3, r2
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d1ef      	bne.n	800627a <HAL_RCC_ClockConfig+0x112>
 800629a:	e024      	b.n	80062e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d11b      	bne.n	80062dc <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80062a4:	e009      	b.n	80062ba <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a6:	f7fe fcd7 	bl	8004c58 <HAL_GetTick>
 80062aa:	0002      	movs	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	4a35      	ldr	r2, [pc, #212]	; (8006388 <HAL_RCC_ClockConfig+0x220>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e05d      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80062ba:	4b32      	ldr	r3, [pc, #200]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	220c      	movs	r2, #12
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d1ef      	bne.n	80062a6 <HAL_RCC_ClockConfig+0x13e>
 80062c6:	e00e      	b.n	80062e6 <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c8:	f7fe fcc6 	bl	8004c58 <HAL_GetTick>
 80062cc:	0002      	movs	r2, r0
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <HAL_RCC_ClockConfig+0x220>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e04c      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80062dc:	4b29      	ldr	r3, [pc, #164]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	220c      	movs	r2, #12
 80062e2:	4013      	ands	r3, r2
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2201      	movs	r2, #1
 80062ec:	401a      	ands	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d911      	bls.n	8006318 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f4:	4b22      	ldr	r3, [pc, #136]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 80062f6:	4a22      	ldr	r2, [pc, #136]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	2101      	movs	r1, #1
 80062fc:	438a      	bics	r2, r1
 80062fe:	0011      	movs	r1, r2
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006306:	4b1e      	ldr	r3, [pc, #120]	; (8006380 <HAL_RCC_ClockConfig+0x218>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	401a      	ands	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d001      	beq.n	8006318 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e02e      	b.n	8006376 <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2204      	movs	r2, #4
 800631e:	4013      	ands	r3, r2
 8006320:	d008      	beq.n	8006334 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 8006324:	4b17      	ldr	r3, [pc, #92]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4918      	ldr	r1, [pc, #96]	; (800638c <HAL_RCC_ClockConfig+0x224>)
 800632a:	4019      	ands	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	430b      	orrs	r3, r1
 8006332:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2208      	movs	r2, #8
 800633a:	4013      	ands	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800633e:	4a11      	ldr	r2, [pc, #68]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 8006340:	4b10      	ldr	r3, [pc, #64]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4912      	ldr	r1, [pc, #72]	; (8006390 <HAL_RCC_ClockConfig+0x228>)
 8006346:	4019      	ands	r1, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	430b      	orrs	r3, r1
 8006350:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006352:	f000 f823 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006356:	0001      	movs	r1, r0
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <HAL_RCC_ClockConfig+0x21c>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	220f      	movs	r2, #15
 8006360:	4013      	ands	r3, r2
 8006362:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <HAL_RCC_ClockConfig+0x22c>)
 8006364:	5cd3      	ldrb	r3, [r2, r3]
 8006366:	000a      	movs	r2, r1
 8006368:	40da      	lsrs	r2, r3
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCC_ClockConfig+0x230>)
 800636c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800636e:	2003      	movs	r0, #3
 8006370:	f003 fc60 	bl	8009c34 <HAL_InitTick>
  
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b004      	add	sp, #16
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	40022000 	.word	0x40022000
 8006384:	40021000 	.word	0x40021000
 8006388:	00001388 	.word	0x00001388
 800638c:	fffff8ff 	.word	0xfffff8ff
 8006390:	ffffc7ff 	.word	0xffffc7ff
 8006394:	0800b2c0 	.word	0x0800b2c0
 8006398:	2000002c 	.word	0x2000002c

0800639c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	2300      	movs	r3, #0
 80063b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80063ba:	4b32      	ldr	r3, [pc, #200]	; (8006484 <HAL_RCC_GetSysClockFreq+0xe8>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	220c      	movs	r2, #12
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d00e      	beq.n	80063e8 <HAL_RCC_GetSysClockFreq+0x4c>
 80063ca:	2b0c      	cmp	r3, #12
 80063cc:	d00f      	beq.n	80063ee <HAL_RCC_GetSysClockFreq+0x52>
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d145      	bne.n	800645e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80063d2:	4b2c      	ldr	r3, [pc, #176]	; (8006484 <HAL_RCC_GetSysClockFreq+0xe8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2210      	movs	r2, #16
 80063d8:	4013      	ands	r3, r2
 80063da:	d002      	beq.n	80063e2 <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80063dc:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <HAL_RCC_GetSysClockFreq+0xec>)
 80063de:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80063e0:	e04b      	b.n	800647a <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <HAL_RCC_GetSysClockFreq+0xf0>)
 80063e4:	613b      	str	r3, [r7, #16]
      break;
 80063e6:	e048      	b.n	800647a <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063e8:	4b29      	ldr	r3, [pc, #164]	; (8006490 <HAL_RCC_GetSysClockFreq+0xf4>)
 80063ea:	613b      	str	r3, [r7, #16]
      break;
 80063ec:	e045      	b.n	800647a <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0c9b      	lsrs	r3, r3, #18
 80063f2:	220f      	movs	r2, #15
 80063f4:	4013      	ands	r3, r2
 80063f6:	4a27      	ldr	r2, [pc, #156]	; (8006494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
 80063fa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	0d9b      	lsrs	r3, r3, #22
 8006400:	2203      	movs	r2, #3
 8006402:	4013      	ands	r3, r2
 8006404:	3301      	adds	r3, #1
 8006406:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <HAL_RCC_GetSysClockFreq+0xe8>)
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	025b      	lsls	r3, r3, #9
 8006410:	4013      	ands	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006418:	4353      	muls	r3, r2
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	0018      	movs	r0, r3
 800641e:	f7f9 fe73 	bl	8000108 <__udivsi3>
 8006422:	0003      	movs	r3, r0
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e017      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <HAL_RCC_GetSysClockFreq+0xe8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2210      	movs	r2, #16
 800642e:	4013      	ands	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <HAL_RCC_GetSysClockFreq+0xec>)
 8006436:	4353      	muls	r3, r2
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	0018      	movs	r0, r3
 800643c:	f7f9 fe64 	bl	8000108 <__udivsi3>
 8006440:	0003      	movs	r3, r0
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e008      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4a10      	ldr	r2, [pc, #64]	; (800648c <HAL_RCC_GetSysClockFreq+0xf0>)
 800644a:	4353      	muls	r3, r2
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	0018      	movs	r0, r3
 8006450:	f7f9 fe5a 	bl	8000108 <__udivsi3>
 8006454:	0003      	movs	r3, r0
 8006456:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	613b      	str	r3, [r7, #16]
      break;
 800645c:	e00d      	b.n	800647a <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 800645e:	4b09      	ldr	r3, [pc, #36]	; (8006484 <HAL_RCC_GetSysClockFreq+0xe8>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	0b5b      	lsrs	r3, r3, #13
 8006464:	2207      	movs	r2, #7
 8006466:	4013      	ands	r3, r2
 8006468:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	2280      	movs	r2, #128	; 0x80
 8006470:	0212      	lsls	r2, r2, #8
 8006472:	409a      	lsls	r2, r3
 8006474:	0013      	movs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
      break;
 8006478:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800647a:	693b      	ldr	r3, [r7, #16]
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b006      	add	sp, #24
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40021000 	.word	0x40021000
 8006488:	003d0900 	.word	0x003d0900
 800648c:	00f42400 	.word	0x00f42400
 8006490:	007a1200 	.word	0x007a1200
 8006494:	0800b2d8 	.word	0x0800b2d8

08006498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800649c:	4b02      	ldr	r3, [pc, #8]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	2000002c 	.word	0x2000002c

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80064b0:	f7ff fff2 	bl	8006498 <HAL_RCC_GetHCLKFreq>
 80064b4:	0001      	movs	r1, r0
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	2207      	movs	r2, #7
 80064be:	4013      	ands	r3, r2
 80064c0:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	40d9      	lsrs	r1, r3
 80064c6:	000b      	movs	r3, r1
}    
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	40021000 	.word	0x40021000
 80064d4:	0800b2d0 	.word	0x0800b2d0

080064d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064dc:	f7ff ffdc 	bl	8006498 <HAL_RCC_GetHCLKFreq>
 80064e0:	0001      	movs	r1, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	0adb      	lsrs	r3, r3, #11
 80064e8:	2207      	movs	r2, #7
 80064ea:	4013      	ands	r3, r2
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ee:	5cd3      	ldrb	r3, [r2, r3]
 80064f0:	40d9      	lsrs	r1, r3
 80064f2:	000b      	movs	r3, r1
} 
 80064f4:	0018      	movs	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	40021000 	.word	0x40021000
 8006500:	0800b2d0 	.word	0x0800b2d0

08006504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006510:	2300      	movs	r3, #0
 8006512:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006514:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	22f0      	movs	r2, #240	; 0xf0
 800651a:	4013      	ands	r3, r2
 800651c:	d12b      	bne.n	8006576 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800651e:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	055b      	lsls	r3, r3, #21
 8006526:	4013      	ands	r3, r2
 8006528:	d006      	beq.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800652a:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	23c0      	movs	r3, #192	; 0xc0
 8006530:	015b      	lsls	r3, r3, #5
 8006532:	4013      	ands	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e012      	b.n	800655e <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800653c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	0549      	lsls	r1, r1, #21
 8006542:	430a      	orrs	r2, r1
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	23c0      	movs	r3, #192	; 0xc0
 800654c:	015b      	lsls	r3, r3, #5
 800654e:	4013      	ands	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006554:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006558:	4914      	ldr	r1, [pc, #80]	; (80065ac <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 800655a:	400a      	ands	r2, r1
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	23c0      	movs	r3, #192	; 0xc0
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	429a      	cmp	r2, r3
 8006566:	d106      	bne.n	8006576 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	23c0      	movs	r3, #192	; 0xc0
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	429a      	cmp	r2, r3
 8006570:	d101      	bne.n	8006576 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006572:	2301      	movs	r3, #1
 8006574:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8006576:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006578:	4a0d      	ldr	r2, [pc, #52]	; (80065b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	2101      	movs	r1, #1
 800657e:	438a      	bics	r2, r1
 8006580:	0011      	movs	r1, r2
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2201      	movs	r2, #1
 800658e:	401a      	ands	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	d001      	beq.n	800659a <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b004      	add	sp, #16
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40007000 	.word	0x40007000
 80065ac:	efffffff 	.word	0xefffffff
 80065b0:	40022000 	.word	0x40022000

080065b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	4013      	ands	r3, r2
 80065cc:	d100      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80065ce:	e0c3      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80065d0:	2317      	movs	r3, #23
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d8:	4b94      	ldr	r3, [pc, #592]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80065da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065dc:	2380      	movs	r3, #128	; 0x80
 80065de:	055b      	lsls	r3, r3, #21
 80065e0:	4013      	ands	r3, r2
 80065e2:	d10a      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e4:	4b91      	ldr	r3, [pc, #580]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80065e6:	4a91      	ldr	r2, [pc, #580]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80065e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065ea:	2180      	movs	r1, #128	; 0x80
 80065ec:	0549      	lsls	r1, r1, #21
 80065ee:	430a      	orrs	r2, r1
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80065f2:	2317      	movs	r3, #23
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4013      	ands	r3, r2
 8006604:	d11a      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006606:	4b8a      	ldr	r3, [pc, #552]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006608:	4a89      	ldr	r2, [pc, #548]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	0049      	lsls	r1, r1, #1
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006614:	f7fe fb20 	bl	8004c58 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	e008      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fe fb1b 	bl	8004c58 <HAL_GetTick>
 8006622:	0002      	movs	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b64      	cmp	r3, #100	; 0x64
 800662a:	d901      	bls.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e0f9      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x270>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006630:	4b7f      	ldr	r3, [pc, #508]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4013      	ands	r3, r2
 800663a:	d0f0      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x6a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800663c:	4b7b      	ldr	r3, [pc, #492]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	23c0      	movs	r3, #192	; 0xc0
 8006642:	039b      	lsls	r3, r3, #14
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	23c0      	movs	r3, #192	; 0xc0
 800664e:	039b      	lsls	r3, r3, #14
 8006650:	401a      	ands	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	429a      	cmp	r2, r3
 8006656:	d010      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc6>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	401a      	ands	r2, r3
 8006662:	23c0      	movs	r3, #192	; 0xc0
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	429a      	cmp	r2, r3
 8006668:	d107      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800666a:	4b70      	ldr	r3, [pc, #448]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	4013      	ands	r3, r2
 8006674:	d001      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8006676:	2301      	movs	r3, #1
 8006678:	e0d4      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x270>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800667a:	4b6c      	ldr	r3, [pc, #432]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800667c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800667e:	23c0      	movs	r3, #192	; 0xc0
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	4013      	ands	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d03b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	23c0      	movs	r3, #192	; 0xc0
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	401a      	ands	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	429a      	cmp	r2, r3
 800669a:	d033      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x150>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2220      	movs	r2, #32
 80066a2:	4013      	ands	r3, r2
 80066a4:	d02e      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x150>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80066a6:	4b61      	ldr	r3, [pc, #388]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	4a62      	ldr	r2, [pc, #392]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066b0:	4b5e      	ldr	r3, [pc, #376]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066b2:	4a5e      	ldr	r2, [pc, #376]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	0309      	lsls	r1, r1, #12
 80066ba:	430a      	orrs	r2, r1
 80066bc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066be:	4b5b      	ldr	r3, [pc, #364]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066c0:	4a5a      	ldr	r2, [pc, #360]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066c4:	495c      	ldr	r1, [pc, #368]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066c6:	400a      	ands	r2, r1
 80066c8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80066ca:	4b58      	ldr	r3, [pc, #352]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4013      	ands	r3, r2
 80066d8:	d014      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066da:	f7fe fabd 	bl	8004c58 <HAL_GetTick>
 80066de:	0003      	movs	r3, r0
 80066e0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e2:	e009      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e4:	f7fe fab8 	bl	8004c58 <HAL_GetTick>
 80066e8:	0002      	movs	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	4a53      	ldr	r2, [pc, #332]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e095      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	4b4c      	ldr	r3, [pc, #304]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80066fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4013      	ands	r3, r2
 8006702:	d0ef      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	23c0      	movs	r3, #192	; 0xc0
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	401a      	ands	r2, r3
 800670e:	23c0      	movs	r3, #192	; 0xc0
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	429a      	cmp	r2, r3
 8006714:	d10b      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006716:	4a45      	ldr	r2, [pc, #276]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006718:	4b44      	ldr	r3, [pc, #272]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4948      	ldr	r1, [pc, #288]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800671e:	4019      	ands	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6858      	ldr	r0, [r3, #4]
 8006724:	23c0      	movs	r3, #192	; 0xc0
 8006726:	039b      	lsls	r3, r3, #14
 8006728:	4003      	ands	r3, r0
 800672a:	430b      	orrs	r3, r1
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4a3f      	ldr	r2, [pc, #252]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006730:	4b3e      	ldr	r3, [pc, #248]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006732:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6858      	ldr	r0, [r3, #4]
 8006738:	23c0      	movs	r3, #192	; 0xc0
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	4003      	ands	r3, r0
 800673e:	430b      	orrs	r3, r1
 8006740:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006742:	2317      	movs	r3, #23
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d105      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674c:	4b37      	ldr	r3, [pc, #220]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800674e:	4a37      	ldr	r2, [pc, #220]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006752:	493c      	ldr	r1, [pc, #240]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006754:	400a      	ands	r2, r1
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2201      	movs	r2, #1
 800675e:	4013      	ands	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006762:	4a32      	ldr	r2, [pc, #200]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006764:	4b31      	ldr	r3, [pc, #196]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006768:	2103      	movs	r1, #3
 800676a:	438b      	bics	r3, r1
 800676c:	0019      	movs	r1, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	430b      	orrs	r3, r1
 8006774:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2202      	movs	r2, #2
 800677c:	4013      	ands	r3, r2
 800677e:	d009      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006782:	4b2a      	ldr	r3, [pc, #168]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	210c      	movs	r1, #12
 8006788:	438b      	bics	r3, r1
 800678a:	0019      	movs	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	430b      	orrs	r3, r1
 8006792:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2204      	movs	r2, #4
 800679a:	4013      	ands	r3, r2
 800679c:	d008      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800679e:	4a23      	ldr	r2, [pc, #140]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a4:	4928      	ldr	r1, [pc, #160]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80067a6:	4019      	ands	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2208      	movs	r2, #8
 80067b6:	4013      	ands	r3, r2
 80067b8:	d008      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ba:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c0:	4922      	ldr	r1, [pc, #136]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80067c2:	4019      	ands	r1, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	430b      	orrs	r3, r1
 80067ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4013      	ands	r3, r2
 80067d6:	d008      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067da:	4b14      	ldr	r3, [pc, #80]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067de:	4915      	ldr	r1, [pc, #84]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e0:	4019      	ands	r1, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	430b      	orrs	r3, r1
 80067e8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2240      	movs	r2, #64	; 0x40
 80067f0:	4013      	ands	r3, r2
 80067f2:	d008      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067f4:	4a0d      	ldr	r2, [pc, #52]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	4915      	ldr	r1, [pc, #84]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067fc:	4019      	ands	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	430b      	orrs	r3, r1
 8006804:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2280      	movs	r2, #128	; 0x80
 800680c:	4013      	ands	r3, r2
 800680e:	d008      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006810:	4a06      	ldr	r2, [pc, #24]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	490f      	ldr	r1, [pc, #60]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006818:	4019      	ands	r1, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	430b      	orrs	r3, r1
 8006820:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b006      	add	sp, #24
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	40007000 	.word	0x40007000
 8006834:	fffcffff 	.word	0xfffcffff
 8006838:	fff7ffff 	.word	0xfff7ffff
 800683c:	00001388 	.word	0x00001388
 8006840:	ffcfffff 	.word	0xffcfffff
 8006844:	efffffff 	.word	0xefffffff
 8006848:	fffff3ff 	.word	0xfffff3ff
 800684c:	ffffcfff 	.word	0xffffcfff
 8006850:	fbffffff 	.word	0xfbffffff
 8006854:	fff3ffff 	.word	0xfff3ffff

08006858 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	2300      	movs	r3, #0
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	2300      	movs	r3, #0
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t srcclk = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	2300      	movs	r3, #0
 800687a:	623b      	str	r3, [r7, #32]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b08      	cmp	r3, #8
 8006880:	d100      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8006882:	e159      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006884:	d809      	bhi.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006886:	2b02      	cmp	r3, #2
 8006888:	d100      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 800688a:	e0ec      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800688c:	2b04      	cmp	r3, #4
 800688e:	d100      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006890:	e11a      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8006892:	2b01      	cmp	r3, #1
 8006894:	d100      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006896:	e0b5      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 8006898:	e1c4      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 800689a:	2b20      	cmp	r3, #32
 800689c:	d00c      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800689e:	d803      	bhi.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d100      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 80068a4:	e170      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
      break;
 80068a6:	e1bd      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d058      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 80068ac:	2280      	movs	r2, #128	; 0x80
 80068ae:	0052      	lsls	r2, r2, #1
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d100      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80068b4:	e18e      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
      break;
 80068b6:	e1b5      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      temp_reg = RCC->CSR;
 80068b8:	4bbc      	ldr	r3, [pc, #752]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80068ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068bc:	61fb      	str	r3, [r7, #28]
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80068be:	4bbb      	ldr	r3, [pc, #748]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80068c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068c2:	23c0      	movs	r3, #192	; 0xc0
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	4013      	ands	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	025b      	lsls	r3, r3, #9
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d108      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4013      	ands	r3, r2
 80068dc:	d003      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        frequency = LSE_VALUE;
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
 80068e4:	e03a      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	029b      	lsls	r3, r3, #10
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d106      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2202      	movs	r2, #2
 80068f4:	4013      	ands	r3, r2
 80068f6:	d002      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSI_VALUE;
 80068f8:	4bad      	ldr	r3, [pc, #692]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
 80068fc:	e02e      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	23c0      	movs	r3, #192	; 0xc0
 8006902:	029b      	lsls	r3, r3, #10
 8006904:	429a      	cmp	r2, r3
 8006906:	d126      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006908:	4ba8      	ldr	r3, [pc, #672]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	4013      	ands	r3, r2
 8006912:	d020      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8006914:	4ba5      	ldr	r3, [pc, #660]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	23c0      	movs	r3, #192	; 0xc0
 800691a:	039b      	lsls	r3, r3, #14
 800691c:	4013      	ands	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
        switch (clkprediv)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	0392      	lsls	r2, r2, #14
 8006926:	4293      	cmp	r3, r2
 8006928:	d00b      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800692a:	22c0      	movs	r2, #192	; 0xc0
 800692c:	0392      	lsls	r2, r2, #14
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	0352      	lsls	r2, r2, #13
 8006936:	4293      	cmp	r3, r2
 8006938:	d006      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800693a:	e008      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
            frequency = HSE_VALUE / 16U;
 800693c:	4b9d      	ldr	r3, [pc, #628]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 8U;
 8006942:	4b9d      	ldr	r3, [pc, #628]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006946:	e005      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 4U;
 8006948:	4b9c      	ldr	r3, [pc, #624]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 2U;
 800694e:	4b9c      	ldr	r3, [pc, #624]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006952:	46c0      	nop			; (mov r8, r8)
      }
 8006954:	e002      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
        frequency = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800695a:	e163      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800695c:	e162      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800695e:	4b93      	ldr	r3, [pc, #588]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006962:	2380      	movs	r3, #128	; 0x80
 8006964:	04db      	lsls	r3, r3, #19
 8006966:	4013      	ands	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d138      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8006970:	4b8e      	ldr	r3, [pc, #568]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	2380      	movs	r3, #128	; 0x80
 8006976:	049b      	lsls	r3, r3, #18
 8006978:	4013      	ands	r3, r2
 800697a:	d032      	beq.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800697c:	4b8b      	ldr	r3, [pc, #556]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	23f0      	movs	r3, #240	; 0xf0
 8006982:	039b      	lsls	r3, r3, #14
 8006984:	4013      	ands	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8006988:	4b88      	ldr	r3, [pc, #544]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	23c0      	movs	r3, #192	; 0xc0
 800698e:	041b      	lsls	r3, r3, #16
 8006990:	4013      	ands	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	0c9b      	lsrs	r3, r3, #18
 8006998:	4a8a      	ldr	r2, [pc, #552]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800699a:	5cd3      	ldrb	r3, [r2, r3]
 800699c:	613b      	str	r3, [r7, #16]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	0d9b      	lsrs	r3, r3, #22
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 80069a6:	4b81      	ldr	r3, [pc, #516]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	025b      	lsls	r3, r3, #9
 80069ae:	4013      	ands	r3, r2
 80069b0:	d10a      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80069b2:	4b7e      	ldr	r3, [pc, #504]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2210      	movs	r2, #16
 80069b8:	4013      	ands	r3, r2
 80069ba:	d002      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
                    pllvco =  (HSI_VALUE >> 2U);
 80069bc:	4b80      	ldr	r3, [pc, #512]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80069be:	623b      	str	r3, [r7, #32]
 80069c0:	e004      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                    pllvco =  HSI_VALUE;
 80069c2:	4b81      	ldr	r3, [pc, #516]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80069c4:	623b      	str	r3, [r7, #32]
 80069c6:	e001      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                pllvco = HSE_VALUE;
 80069c8:	4b80      	ldr	r3, [pc, #512]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80069ca:	623b      	str	r3, [r7, #32]
            pllvco = (pllvco * pllmul);
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4353      	muls	r3, r2
 80069d2:	623b      	str	r3, [r7, #32]
            frequency = (pllvco/ plldiv);
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	6a38      	ldr	r0, [r7, #32]
 80069d8:	f7f9 fb96 	bl	8000108 <__udivsi3>
 80069dc:	0003      	movs	r3, r0
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	e00f      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	2380      	movs	r3, #128	; 0x80
 80069e6:	04db      	lsls	r3, r3, #19
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80069ec:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2202      	movs	r2, #2
 80069f2:	4013      	ands	r3, r2
 80069f4:	d002      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
            frequency = HSI48_VALUE;
 80069f6:	4b76      	ldr	r3, [pc, #472]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	e002      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
            frequency = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a00:	e110      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a02:	e10f      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a04:	4b69      	ldr	r3, [pc, #420]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a08:	2203      	movs	r2, #3
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7ff fd60 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a1c:	e102      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d107      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006a24:	4b61      	ldr	r3, [pc, #388]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d002      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        frequency = HSI_VALUE;
 8006a2e:	4b66      	ldr	r3, [pc, #408]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	e017      	b.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d104      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        frequency = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7ff fcaf 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006a3e:	0003      	movs	r3, r0
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a42:	e0ef      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d109      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006a4a:	4b58      	ldr	r3, [pc, #352]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a4e:	2380      	movs	r3, #128	; 0x80
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4013      	ands	r3, r2
 8006a54:	d003      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        frequency = LSE_VALUE;
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	e002      	b.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
        frequency = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a62:	e0df      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a64:	e0de      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a66:	4b51      	ldr	r3, [pc, #324]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6a:	220c      	movs	r2, #12
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a76:	f7ff fd19 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8006a7a:	0003      	movs	r3, r0
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a7e:	e0d1      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d107      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a86:	4b49      	ldr	r3, [pc, #292]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d002      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        frequency = HSI_VALUE;
 8006a90:	4b4d      	ldr	r3, [pc, #308]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
 8006a94:	e017      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d104      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
        frequency = HAL_RCC_GetSysClockFreq();
 8006a9c:	f7ff fc7e 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006aa0:	0003      	movs	r3, r0
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aa4:	e0be      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b0c      	cmp	r3, #12
 8006aaa:	d109      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006aac:	4b3f      	ldr	r3, [pc, #252]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = LSE_VALUE;
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
        frequency = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ac4:	e0ae      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006ac6:	e0ad      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006ac8:	4b38      	ldr	r3, [pc, #224]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006acc:	23c0      	movs	r3, #192	; 0xc0
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ada:	f7ff fce7 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ae2:	e09f      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	2380      	movs	r3, #128	; 0x80
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d107      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006aee:	4b2f      	ldr	r3, [pc, #188]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2204      	movs	r2, #4
 8006af4:	4013      	ands	r3, r2
 8006af6:	d002      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HSI_VALUE;
 8006af8:	4b33      	ldr	r3, [pc, #204]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	e01b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d104      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetSysClockFreq();
 8006b08:	f7ff fc48 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b10:	e088      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	23c0      	movs	r3, #192	; 0xc0
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d109      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8006b1c:	4b23      	ldr	r3, [pc, #140]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4013      	ands	r3, r2
 8006b26:	d003      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = LSE_VALUE;
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2e:	e002      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
        frequency = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b34:	e076      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006b36:	e075      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b38:	4b1c      	ldr	r3, [pc, #112]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b3c:	23c0      	movs	r3, #192	; 0xc0
 8006b3e:	019b      	lsls	r3, r3, #6
 8006b40:	4013      	ands	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b4a:	f7ff fcaf 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b52:	e067      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	2380      	movs	r3, #128	; 0x80
 8006b58:	019b      	lsls	r3, r3, #6
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	d002      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
        frequency = HSI_VALUE;
 8006b68:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b6c:	e05a      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	2380      	movs	r3, #128	; 0x80
 8006b72:	015b      	lsls	r3, r3, #5
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d104      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006b78:	f7ff fc10 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b80:	e050      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b86:	e04d      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	03db      	lsls	r3, r3, #15
 8006b90:	401a      	ands	r2, r3
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	03db      	lsls	r3, r3, #15
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d104      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b9a:	f7ff fc87 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8006b9e:	0003      	movs	r3, r0
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ba2:	e03f      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ba8:	e03c      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	00009088 	.word	0x00009088
 8006bb4:	0007a120 	.word	0x0007a120
 8006bb8:	000f4240 	.word	0x000f4240
 8006bbc:	001e8480 	.word	0x001e8480
 8006bc0:	003d0900 	.word	0x003d0900
 8006bc4:	0800b2d8 	.word	0x0800b2d8
 8006bc8:	00f42400 	.word	0x00f42400
 8006bcc:	007a1200 	.word	0x007a1200
 8006bd0:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006bd4:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8006bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bd8:	23c0      	movs	r3, #192	; 0xc0
 8006bda:	029b      	lsls	r3, r3, #10
 8006bdc:	4013      	ands	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006be6:	f7ff fc61 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8006bea:	0003      	movs	r3, r0
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006bee:	e018      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	2380      	movs	r3, #128	; 0x80
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	4013      	ands	r3, r2
 8006c02:	d002      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        frequency = HSI_VALUE;
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>)
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006c08:	e00b      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	025b      	lsls	r3, r3, #9
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d104      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8006c14:	f7ff fbc2 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006c1c:	e001      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006c22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c26:	0018      	movs	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b00a      	add	sp, #40	; 0x28
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	40021000 	.word	0x40021000
 8006c34:	00f42400 	.word	0x00f42400

08006c38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e074      	b.n	8006d34 <HAL_RTC_Init+0xfc>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2221      	movs	r2, #33	; 0x21
 8006c4e:	5c9b      	ldrb	r3, [r3, r2]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d107      	bne.n	8006c66 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f003 f80b 	bl	8009c7c <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2221      	movs	r2, #33	; 0x21
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	22ca      	movs	r2, #202	; 0xca
 8006c74:	625a      	str	r2, [r3, #36]	; 0x24
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2253      	movs	r2, #83	; 0x53
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	0018      	movs	r0, r3
 8006c82:	f000 fd20 	bl	80076c6 <RTC_EnterInitMode>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d009      	beq.n	8006c9e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	22ff      	movs	r2, #255	; 0xff
 8006c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2221      	movs	r2, #33	; 0x21
 8006c96:	2104      	movs	r1, #4
 8006c98:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e04a      	b.n	8006d34 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	6892      	ldr	r2, [r2, #8]
 8006ca8:	4924      	ldr	r1, [pc, #144]	; (8006d3c <HAL_RTC_Init+0x104>)
 8006caa:	400a      	ands	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	6891      	ldr	r1, [r2, #8]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6850      	ldr	r0, [r2, #4]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6912      	ldr	r2, [r2, #16]
 8006cc0:	4310      	orrs	r0, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6992      	ldr	r2, [r2, #24]
 8006cc6:	4302      	orrs	r2, r0
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	68d2      	ldr	r2, [r2, #12]
 8006cd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	6911      	ldr	r1, [r2, #16]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6892      	ldr	r2, [r2, #8]
 8006ce4:	0412      	lsls	r2, r2, #16
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	68d2      	ldr	r2, [r2, #12]
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	438a      	bics	r2, r1
 8006cf8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006d04:	2103      	movs	r1, #3
 8006d06:	438a      	bics	r2, r1
 8006d08:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	69d0      	ldr	r0, [r2, #28]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6952      	ldr	r2, [r2, #20]
 8006d1c:	4302      	orrs	r2, r0
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	22ff      	movs	r2, #255	; 0xff
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2221      	movs	r2, #33	; 0x21
 8006d2e:	2101      	movs	r1, #1
 8006d30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
  }
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b002      	add	sp, #8
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	ff8fffbf 	.word	0xff8fffbf

08006d40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d40:	b590      	push	{r4, r7, lr}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	5c9b      	ldrb	r3, [r3, r2]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_RTC_SetTime+0x1e>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e0b5      	b.n	8006eca <HAL_RTC_SetTime+0x18a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	2101      	movs	r1, #1
 8006d64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2221      	movs	r2, #33	; 0x21
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d125      	bne.n	8006dc0 <HAL_RTC_SetTime+0x80>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d102      	bne.n	8006d86 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 fcc7 	bl	800771e <RTC_ByteToBcd2>
 8006d90:	0003      	movs	r3, r0
 8006d92:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fcc0 	bl	800771e <RTC_ByteToBcd2>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006da2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	789b      	ldrb	r3, [r3, #2]
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fcb8 	bl	800771e <RTC_ByteToBcd2>
 8006dae:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006db0:	0022      	movs	r2, r4
 8006db2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	78db      	ldrb	r3, [r3, #3]
 8006db8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	e01f      	b.n	8006e00 <HAL_RTC_SetTime+0xc0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d007      	beq.n	8006ddc <HAL_RTC_SetTime+0x9c>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 fcc5 	bl	8007760 <RTC_Bcd2ToByte>
 8006dd6:	0003      	movs	r3, r0
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e002      	b.n	8006de2 <HAL_RTC_SetTime+0xa2>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006df4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	78db      	ldrb	r3, [r3, #3]
 8006dfa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	22ca      	movs	r2, #202	; 0xca
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2253      	movs	r2, #83	; 0x53
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 fc57 	bl	80076c6 <RTC_EnterInitMode>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d00d      	beq.n	8006e38 <HAL_RTC_SetTime+0xf8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2221      	movs	r2, #33	; 0x21
 8006e28:	2104      	movs	r1, #4
 8006e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	2100      	movs	r1, #0
 8006e32:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e048      	b.n	8006eca <HAL_RTC_SetTime+0x18a>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4925      	ldr	r1, [pc, #148]	; (8006ed4 <HAL_RTC_SetTime+0x194>)
 8006e40:	400a      	ands	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	6892      	ldr	r2, [r2, #8]
 8006e4e:	4922      	ldr	r1, [pc, #136]	; (8006ed8 <HAL_RTC_SetTime+0x198>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	6891      	ldr	r1, [r2, #8]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	68d0      	ldr	r0, [r2, #12]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	6912      	ldr	r2, [r2, #16]
 8006e66:	4302      	orrs	r2, r0
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	68d2      	ldr	r2, [r2, #12]
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	438a      	bics	r2, r1
 8006e7a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2220      	movs	r2, #32
 8006e84:	4013      	ands	r3, r2
 8006e86:	d113      	bne.n	8006eb0 <HAL_RTC_SetTime+0x170>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f000 fbf2 	bl	8007674 <HAL_RTC_WaitForSynchro>
 8006e90:	1e03      	subs	r3, r0, #0
 8006e92:	d00d      	beq.n	8006eb0 <HAL_RTC_SetTime+0x170>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	22ff      	movs	r2, #255	; 0xff
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2221      	movs	r2, #33	; 0x21
 8006ea0:	2104      	movs	r1, #4
 8006ea2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e00c      	b.n	8006eca <HAL_RTC_SetTime+0x18a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	22ff      	movs	r2, #255	; 0xff
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2221      	movs	r2, #33	; 0x21
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	5499      	strb	r1, [r3, r2]

   __HAL_UNLOCK(hrtc); 
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	5499      	strb	r1, [r3, r2]

   return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
  }
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b007      	add	sp, #28
 8006ed0:	bd90      	pop	{r4, r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	007f7f7f 	.word	0x007f7f7f
 8006ed8:	fffbffff 	.word	0xfffbffff

08006edc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	045b      	lsls	r3, r3, #17
 8006efe:	0c5a      	lsrs	r2, r3, #17
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <HAL_RTC_GetTime+0xb8>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	223f      	movs	r2, #63	; 0x3f
 8006f18:	4013      	ands	r3, r2
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	227f      	movs	r2, #127	; 0x7f
 8006f28:	4013      	ands	r3, r2
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	227f      	movs	r2, #127	; 0x7f
 8006f36:	4013      	ands	r3, r2
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	4013      	ands	r3, r2
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d11a      	bne.n	8006f8a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f000 fc01 	bl	8007760 <RTC_Bcd2ToByte>
 8006f5e:	0003      	movs	r3, r0
 8006f60:	001a      	movs	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f000 fbf8 	bl	8007760 <RTC_Bcd2ToByte>
 8006f70:	0003      	movs	r3, r0
 8006f72:	001a      	movs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f000 fbef 	bl	8007760 <RTC_Bcd2ToByte>
 8006f82:	0003      	movs	r3, r0
 8006f84:	001a      	movs	r2, r3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b006      	add	sp, #24
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	007f7f7f 	.word	0x007f7f7f

08006f98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	5c9b      	ldrb	r3, [r3, r2]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RTC_SetDate+0x1e>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e0a7      	b.n	8007106 <HAL_RTC_SetDate+0x16e>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	2101      	movs	r1, #1
 8006fbc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2221      	movs	r2, #33	; 0x21
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10e      	bne.n	8006fea <HAL_RTC_SetDate+0x52>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	d008      	beq.n	8006fea <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2210      	movs	r2, #16
 8006fde:	4393      	bics	r3, r2
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	330a      	adds	r3, #10
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d11c      	bne.n	800702a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f000 fb92 	bl	800771e <RTC_ByteToBcd2>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	0018      	movs	r0, r3
 8007004:	f000 fb8b 	bl	800771e <RTC_ByteToBcd2>
 8007008:	0003      	movs	r3, r0
 800700a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800700c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	789b      	ldrb	r3, [r3, #2]
 8007012:	0018      	movs	r0, r3
 8007014:	f000 fb83 	bl	800771e <RTC_ByteToBcd2>
 8007018:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800701a:	0022      	movs	r2, r4
 800701c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e01c      	b.n	8007064 <HAL_RTC_SetDate+0xcc>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	0018      	movs	r0, r3
 8007030:	f000 fb96 	bl	8007760 <RTC_Bcd2ToByte>
 8007034:	0003      	movs	r3, r0
 8007036:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	789b      	ldrb	r3, [r3, #2]
 800703c:	0018      	movs	r0, r3
 800703e:	f000 fb8f 	bl	8007760 <RTC_Bcd2ToByte>
 8007042:	0003      	movs	r3, r0
 8007044:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	78db      	ldrb	r3, [r3, #3]
 800704a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007052:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007058:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	22ca      	movs	r2, #202	; 0xca
 800706a:	625a      	str	r2, [r3, #36]	; 0x24
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2253      	movs	r2, #83	; 0x53
 8007072:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	0018      	movs	r0, r3
 8007078:	f000 fb25 	bl	80076c6 <RTC_EnterInitMode>
 800707c:	1e03      	subs	r3, r0, #0
 800707e:	d00d      	beq.n	800709c <HAL_RTC_SetDate+0x104>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2221      	movs	r2, #33	; 0x21
 800708c:	2104      	movs	r1, #4
 800708e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	2100      	movs	r1, #0
 8007096:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e034      	b.n	8007106 <HAL_RTC_SetDate+0x16e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	491b      	ldr	r1, [pc, #108]	; (8007110 <HAL_RTC_SetDate+0x178>)
 80070a4:	400a      	ands	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	68d2      	ldr	r2, [r2, #12]
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	438a      	bics	r2, r1
 80070b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2220      	movs	r2, #32
 80070c0:	4013      	ands	r3, r2
 80070c2:	d113      	bne.n	80070ec <HAL_RTC_SetDate+0x154>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	0018      	movs	r0, r3
 80070c8:	f000 fad4 	bl	8007674 <HAL_RTC_WaitForSynchro>
 80070cc:	1e03      	subs	r3, r0, #0
 80070ce:	d00d      	beq.n	80070ec <HAL_RTC_SetDate+0x154>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2221      	movs	r2, #33	; 0x21
 80070dc:	2104      	movs	r1, #4
 80070de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	2100      	movs	r1, #0
 80070e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e00c      	b.n	8007106 <HAL_RTC_SetDate+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2221      	movs	r2, #33	; 0x21
 80070f8:	2101      	movs	r1, #1
 80070fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	2100      	movs	r1, #0
 8007102:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007104:	2300      	movs	r3, #0
  }
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b007      	add	sp, #28
 800710c:	bd90      	pop	{r4, r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	00ffff3f 	.word	0x00ffff3f

08007114 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <HAL_RTC_GetDate+0x9c>)
 800712c:	4013      	ands	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b2da      	uxtb	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	b2db      	uxtb	r3, r3
 8007140:	221f      	movs	r2, #31
 8007142:	4013      	ands	r3, r2
 8007144:	b2da      	uxtb	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	223f      	movs	r2, #63	; 0x3f
 8007150:	4013      	ands	r3, r2
 8007152:	b2da      	uxtb	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	0b5b      	lsrs	r3, r3, #13
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2207      	movs	r2, #7
 8007160:	4013      	ands	r3, r2
 8007162:	b2da      	uxtb	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d11a      	bne.n	80071a4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	78db      	ldrb	r3, [r3, #3]
 8007172:	0018      	movs	r0, r3
 8007174:	f000 faf4 	bl	8007760 <RTC_Bcd2ToByte>
 8007178:	0003      	movs	r3, r0
 800717a:	001a      	movs	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	0018      	movs	r0, r3
 8007186:	f000 faeb 	bl	8007760 <RTC_Bcd2ToByte>
 800718a:	0003      	movs	r3, r0
 800718c:	001a      	movs	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	789b      	ldrb	r3, [r3, #2]
 8007196:	0018      	movs	r0, r3
 8007198:	f000 fae2 	bl	8007760 <RTC_Bcd2ToByte>
 800719c:	0003      	movs	r3, r0
 800719e:	001a      	movs	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	0018      	movs	r0, r3
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b006      	add	sp, #24
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	00ffff3f 	.word	0x00ffff3f

080071b4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b089      	sub	sp, #36	; 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	5c9b      	ldrb	r3, [r3, r2]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_RTC_SetAlarm_IT+0x26>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e14d      	b.n	8007476 <HAL_RTC_SetAlarm_IT+0x2c2>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2221      	movs	r2, #33	; 0x21
 80071e6:	2102      	movs	r1, #2
 80071e8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d136      	bne.n	800725e <HAL_RTC_SetAlarm_IT+0xaa>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	4013      	ands	r3, r2
 80071fa:	d102      	bne.n	8007202 <HAL_RTC_SetAlarm_IT+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	0018      	movs	r0, r3
 8007208:	f000 fa89 	bl	800771e <RTC_ByteToBcd2>
 800720c:	0003      	movs	r3, r0
 800720e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	0018      	movs	r0, r3
 8007216:	f000 fa82 	bl	800771e <RTC_ByteToBcd2>
 800721a:	0003      	movs	r3, r0
 800721c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800721e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	0018      	movs	r0, r3
 8007226:	f000 fa7a 	bl	800771e <RTC_ByteToBcd2>
 800722a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800722c:	0022      	movs	r2, r4
 800722e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	78db      	ldrb	r3, [r3, #3]
 8007234:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007236:	431a      	orrs	r2, r3
 8007238:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2220      	movs	r2, #32
 800723e:	5c9b      	ldrb	r3, [r3, r2]
 8007240:	0018      	movs	r0, r3
 8007242:	f000 fa6c 	bl	800771e <RTC_ByteToBcd2>
 8007246:	0003      	movs	r3, r0
 8007248:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800724a:	0022      	movs	r2, r4
 800724c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007252:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007258:	4313      	orrs	r3, r2
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e03f      	b.n	80072de <HAL_RTC_SetAlarm_IT+0x12a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2240      	movs	r2, #64	; 0x40
 8007266:	4013      	ands	r3, r2
 8007268:	d007      	beq.n	800727a <HAL_RTC_SetAlarm_IT+0xc6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0018      	movs	r0, r3
 8007270:	f000 fa76 	bl	8007760 <RTC_Bcd2ToByte>
 8007274:	0003      	movs	r3, r0
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	e002      	b.n	8007280 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2200      	movs	r2, #0
 800727e:	70da      	strb	r2, [r3, #3]
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <HAL_RTC_SetAlarm_IT+0xe6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2220      	movs	r2, #32
 800728c:	5c9b      	ldrb	r3, [r3, r2]
 800728e:	0018      	movs	r0, r3
 8007290:	f000 fa66 	bl	8007760 <RTC_Bcd2ToByte>
 8007294:	0003      	movs	r3, r0
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e007      	b.n	80072aa <HAL_RTC_SetAlarm_IT+0xf6>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2220      	movs	r2, #32
 800729e:	5c9b      	ldrb	r3, [r3, r2]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f000 fa5d 	bl	8007760 <RTC_Bcd2ToByte>
 80072a6:	0003      	movs	r3, r0
 80072a8:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80072b6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80072bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	78db      	ldrb	r3, [r3, #3]
 80072c2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80072c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2120      	movs	r1, #32
 80072ca:	5c5b      	ldrb	r3, [r3, r1]
 80072cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80072ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80072d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80072da:	4313      	orrs	r3, r2
 80072dc:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	22ca      	movs	r2, #202	; 0xca
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2253      	movs	r2, #83	; 0x53
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072fe:	2380      	movs	r3, #128	; 0x80
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	429a      	cmp	r2, r3
 8007304:	d14e      	bne.n	80073a4 <HAL_RTC_SetAlarm_IT+0x1f0>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6892      	ldr	r2, [r2, #8]
 8007310:	495b      	ldr	r1, [pc, #364]	; (8007480 <HAL_RTC_SetAlarm_IT+0x2cc>)
 8007312:	400a      	ands	r2, r1
 8007314:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	68d2      	ldr	r2, [r2, #12]
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	400a      	ands	r2, r1
 8007324:	4957      	ldr	r1, [pc, #348]	; (8007484 <HAL_RTC_SetAlarm_IT+0x2d0>)
 8007326:	430a      	orrs	r2, r1
 8007328:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800732a:	f7fd fc95 	bl	8004c58 <HAL_GetTick>
 800732e:	0003      	movs	r3, r0
 8007330:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007332:	e016      	b.n	8007362 <HAL_RTC_SetAlarm_IT+0x1ae>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007334:	f7fd fc90 	bl	8004c58 <HAL_GetTick>
 8007338:	0002      	movs	r2, r0
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	1ad2      	subs	r2, r2, r3
 800733e:	23fa      	movs	r3, #250	; 0xfa
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	429a      	cmp	r2, r3
 8007344:	d90d      	bls.n	8007362 <HAL_RTC_SetAlarm_IT+0x1ae>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	22ff      	movs	r2, #255	; 0xff
 800734c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2221      	movs	r2, #33	; 0x21
 8007352:	2103      	movs	r1, #3
 8007354:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	2100      	movs	r1, #0
 800735c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e089      	b.n	8007476 <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	4013      	ands	r3, r2
 800736c:	d0e2      	beq.n	8007334 <HAL_RTC_SetAlarm_IT+0x180>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	6892      	ldr	r2, [r2, #8]
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	0049      	lsls	r1, r1, #1
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	6892      	ldr	r2, [r2, #8]
 800739a:	2180      	movs	r1, #128	; 0x80
 800739c:	0149      	lsls	r1, r1, #5
 800739e:	430a      	orrs	r2, r1
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	e04d      	b.n	8007440 <HAL_RTC_SetAlarm_IT+0x28c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	6892      	ldr	r2, [r2, #8]
 80073ae:	4936      	ldr	r1, [pc, #216]	; (8007488 <HAL_RTC_SetAlarm_IT+0x2d4>)
 80073b0:	400a      	ands	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	68d2      	ldr	r2, [r2, #12]
 80073be:	21ff      	movs	r1, #255	; 0xff
 80073c0:	400a      	ands	r2, r1
 80073c2:	4932      	ldr	r1, [pc, #200]	; (800748c <HAL_RTC_SetAlarm_IT+0x2d8>)
 80073c4:	430a      	orrs	r2, r1
 80073c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80073c8:	f7fd fc46 	bl	8004c58 <HAL_GetTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80073d0:	e016      	b.n	8007400 <HAL_RTC_SetAlarm_IT+0x24c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80073d2:	f7fd fc41 	bl	8004c58 <HAL_GetTick>
 80073d6:	0002      	movs	r2, r0
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	23fa      	movs	r3, #250	; 0xfa
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d90d      	bls.n	8007400 <HAL_RTC_SetAlarm_IT+0x24c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	22ff      	movs	r2, #255	; 0xff
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2221      	movs	r2, #33	; 0x21
 80073f0:	2103      	movs	r1, #3
 80073f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	2100      	movs	r1, #0
 80073fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e03a      	b.n	8007476 <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	2202      	movs	r2, #2
 8007408:	4013      	ands	r3, r2
 800740a:	d0e2      	beq.n	80073d2 <HAL_RTC_SetAlarm_IT+0x21e>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	6892      	ldr	r2, [r2, #8]
 8007426:	2180      	movs	r1, #128	; 0x80
 8007428:	0089      	lsls	r1, r1, #2
 800742a:	430a      	orrs	r2, r1
 800742c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	6892      	ldr	r2, [r2, #8]
 8007438:	2180      	movs	r1, #128	; 0x80
 800743a:	0189      	lsls	r1, r1, #6
 800743c:	430a      	orrs	r2, r1
 800743e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007440:	4b13      	ldr	r3, [pc, #76]	; (8007490 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007442:	4a13      	ldr	r2, [pc, #76]	; (8007490 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	0289      	lsls	r1, r1, #10
 800744a:	430a      	orrs	r2, r1
 800744c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007450:	4a0f      	ldr	r2, [pc, #60]	; (8007490 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007452:	6892      	ldr	r2, [r2, #8]
 8007454:	2180      	movs	r1, #128	; 0x80
 8007456:	0289      	lsls	r1, r1, #10
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2221      	movs	r2, #33	; 0x21
 8007468:	2101      	movs	r1, #1
 800746a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	2100      	movs	r1, #0
 8007472:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b009      	add	sp, #36	; 0x24
 800747c:	bd90      	pop	{r4, r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	fffffeff 	.word	0xfffffeff
 8007484:	fffffe7f 	.word	0xfffffe7f
 8007488:	fffffdff 	.word	0xfffffdff
 800748c:	fffffd7f 	.word	0xfffffd7f
 8007490:	40010400 	.word	0x40010400

08007494 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	5c9b      	ldrb	r3, [r3, r2]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_RTC_DeactivateAlarm+0x1c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e086      	b.n	80075be <HAL_RTC_DeactivateAlarm+0x12a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	2101      	movs	r1, #1
 80074b6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2221      	movs	r2, #33	; 0x21
 80074bc:	2102      	movs	r1, #2
 80074be:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	22ca      	movs	r2, #202	; 0xca
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2253      	movs	r2, #83	; 0x53
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	2380      	movs	r3, #128	; 0x80
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d132      	bne.n	8007540 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	6892      	ldr	r2, [r2, #8]
 80074e4:	4938      	ldr	r1, [pc, #224]	; (80075c8 <HAL_RTC_DeactivateAlarm+0x134>)
 80074e6:	400a      	ands	r2, r1
 80074e8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	6892      	ldr	r2, [r2, #8]
 80074f4:	4935      	ldr	r1, [pc, #212]	; (80075cc <HAL_RTC_DeactivateAlarm+0x138>)
 80074f6:	400a      	ands	r2, r1
 80074f8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80074fa:	f7fd fbad 	bl	8004c58 <HAL_GetTick>
 80074fe:	0003      	movs	r3, r0
 8007500:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007502:	e016      	b.n	8007532 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007504:	f7fd fba8 	bl	8004c58 <HAL_GetTick>
 8007508:	0002      	movs	r2, r0
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1ad2      	subs	r2, r2, r3
 800750e:	23fa      	movs	r3, #250	; 0xfa
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	429a      	cmp	r2, r3
 8007514:	d90d      	bls.n	8007532 <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	22ff      	movs	r2, #255	; 0xff
 800751c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2221      	movs	r2, #33	; 0x21
 8007522:	2103      	movs	r1, #3
 8007524:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	2100      	movs	r1, #0
 800752c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e045      	b.n	80075be <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	4013      	ands	r3, r2
 800753c:	d0e2      	beq.n	8007504 <HAL_RTC_DeactivateAlarm+0x70>
 800753e:	e031      	b.n	80075a4 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	6892      	ldr	r2, [r2, #8]
 800754a:	4921      	ldr	r1, [pc, #132]	; (80075d0 <HAL_RTC_DeactivateAlarm+0x13c>)
 800754c:	400a      	ands	r2, r1
 800754e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	6892      	ldr	r2, [r2, #8]
 800755a:	491e      	ldr	r1, [pc, #120]	; (80075d4 <HAL_RTC_DeactivateAlarm+0x140>)
 800755c:	400a      	ands	r2, r1
 800755e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8007560:	f7fd fb7a 	bl	8004c58 <HAL_GetTick>
 8007564:	0003      	movs	r3, r0
 8007566:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007568:	e016      	b.n	8007598 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800756a:	f7fd fb75 	bl	8004c58 <HAL_GetTick>
 800756e:	0002      	movs	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	23fa      	movs	r3, #250	; 0xfa
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	429a      	cmp	r2, r3
 800757a:	d90d      	bls.n	8007598 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	22ff      	movs	r2, #255	; 0xff
 8007582:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2221      	movs	r2, #33	; 0x21
 8007588:	2103      	movs	r1, #3
 800758a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	2100      	movs	r1, #0
 8007592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e012      	b.n	80075be <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	2202      	movs	r2, #2
 80075a0:	4013      	ands	r3, r2
 80075a2:	d0e2      	beq.n	800756a <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2221      	movs	r2, #33	; 0x21
 80075b0:	2101      	movs	r1, #1
 80075b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	2100      	movs	r1, #0
 80075ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK; 
 80075bc:	2300      	movs	r3, #0
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b004      	add	sp, #16
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	fffffeff 	.word	0xfffffeff
 80075cc:	ffffefff 	.word	0xffffefff
 80075d0:	fffffdff 	.word	0xfffffdff
 80075d4:	ffffdfff 	.word	0xffffdfff

080075d8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	2380      	movs	r3, #128	; 0x80
 80075e8:	015b      	lsls	r3, r3, #5
 80075ea:	4013      	ands	r3, r2
 80075ec:	d014      	beq.n	8007618 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	2380      	movs	r3, #128	; 0x80
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4013      	ands	r3, r2
 80075fa:	d00d      	beq.n	8007618 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	0018      	movs	r0, r3
 8007600:	f002 fb7e 	bl	8009d00 <HAL_RTC_AlarmAEventCallback>

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	68d2      	ldr	r2, [r2, #12]
 800760e:	21ff      	movs	r1, #255	; 0xff
 8007610:	400a      	ands	r2, r1
 8007612:	4915      	ldr	r1, [pc, #84]	; (8007668 <HAL_RTC_AlarmIRQHandler+0x90>)
 8007614:	430a      	orrs	r2, r1
 8007616:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	019b      	lsls	r3, r3, #6
 8007622:	4013      	ands	r3, r2
 8007624:	d014      	beq.n	8007650 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4013      	ands	r3, r2
 8007632:	d00d      	beq.n	8007650 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	0018      	movs	r0, r3
 8007638:	f000 f8e5 	bl	8007806 <HAL_RTCEx_AlarmBEventCallback>

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	68d2      	ldr	r2, [r2, #12]
 8007646:	21ff      	movs	r1, #255	; 0xff
 8007648:	400a      	ands	r2, r1
 800764a:	4908      	ldr	r1, [pc, #32]	; (800766c <HAL_RTC_AlarmIRQHandler+0x94>)
 800764c:	430a      	orrs	r2, r1
 800764e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <HAL_RTC_AlarmIRQHandler+0x98>)
 8007652:	2280      	movs	r2, #128	; 0x80
 8007654:	0292      	lsls	r2, r2, #10
 8007656:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2221      	movs	r2, #33	; 0x21
 800765c:	2101      	movs	r1, #1
 800765e:	5499      	strb	r1, [r3, r2]
}
 8007660:	46c0      	nop			; (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b002      	add	sp, #8
 8007666:	bd80      	pop	{r7, pc}
 8007668:	fffffe7f 	.word	0xfffffe7f
 800766c:	fffffd7f 	.word	0xfffffd7f
 8007670:	40010400 	.word	0x40010400

08007674 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	68d2      	ldr	r2, [r2, #12]
 800768a:	21a0      	movs	r1, #160	; 0xa0
 800768c:	438a      	bics	r2, r1
 800768e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007690:	f7fd fae2 	bl	8004c58 <HAL_GetTick>
 8007694:	0003      	movs	r3, r0
 8007696:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007698:	e00a      	b.n	80076b0 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800769a:	f7fd fadd 	bl	8004c58 <HAL_GetTick>
 800769e:	0002      	movs	r2, r0
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	1ad2      	subs	r2, r2, r3
 80076a4:	23fa      	movs	r3, #250	; 0xfa
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d901      	bls.n	80076b0 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e006      	b.n	80076be <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	4013      	ands	r3, r2
 80076ba:	d0ee      	beq.n	800769a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	0018      	movs	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b004      	add	sp, #16
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2240      	movs	r2, #64	; 0x40
 80076da:	4013      	ands	r3, r2
 80076dc:	d11a      	bne.n	8007714 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2201      	movs	r2, #1
 80076e4:	4252      	negs	r2, r2
 80076e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80076e8:	f7fd fab6 	bl	8004c58 <HAL_GetTick>
 80076ec:	0003      	movs	r3, r0
 80076ee:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076f0:	e00a      	b.n	8007708 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80076f2:	f7fd fab1 	bl	8004c58 <HAL_GetTick>
 80076f6:	0002      	movs	r2, r0
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	23fa      	movs	r3, #250	; 0xfa
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	429a      	cmp	r2, r3
 8007702:	d901      	bls.n	8007708 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e006      	b.n	8007716 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	2240      	movs	r2, #64	; 0x40
 8007710:	4013      	ands	r3, r2
 8007712:	d0ee      	beq.n	80076f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b004      	add	sp, #16
 800771c:	bd80      	pop	{r7, pc}

0800771e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	0002      	movs	r2, r0
 8007726:	1dfb      	adds	r3, r7, #7
 8007728:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800772e:	e007      	b.n	8007740 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007736:	1dfb      	adds	r3, r7, #7
 8007738:	1dfa      	adds	r2, r7, #7
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	3a0a      	subs	r2, #10
 800773e:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 8007740:	1dfb      	adds	r3, r7, #7
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b09      	cmp	r3, #9
 8007746:	d8f3      	bhi.n	8007730 <RTC_ByteToBcd2+0x12>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	b2da      	uxtb	r2, r3
 8007750:	1dfb      	adds	r3, r7, #7
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	4313      	orrs	r3, r2
 8007756:	b2db      	uxtb	r3, r3
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b004      	add	sp, #16
 800775e:	bd80      	pop	{r7, pc}

08007760 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	0002      	movs	r2, r0
 8007768:	1dfb      	adds	r3, r7, #7
 800776a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007770:	1dfb      	adds	r3, r7, #7
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	b2db      	uxtb	r3, r3
 8007778:	001a      	movs	r2, r3
 800777a:	0013      	movs	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	189b      	adds	r3, r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007784:	1dfb      	adds	r3, r7, #7
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	220f      	movs	r2, #15
 800778a:	4013      	ands	r3, r2
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	18d3      	adds	r3, r2, r3
 8007794:	b2db      	uxtb	r3, r3
}
 8007796:	0018      	movs	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	b004      	add	sp, #16
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	5c9b      	ldrb	r3, [r3, r2]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_RTCEx_EnableBypassShadow+0x16>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e024      	b.n	80077fe <HAL_RTCEx_EnableBypassShadow+0x60>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	2101      	movs	r1, #1
 80077ba:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2221      	movs	r2, #33	; 0x21
 80077c0:	2102      	movs	r1, #2
 80077c2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	22ca      	movs	r2, #202	; 0xca
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2253      	movs	r2, #83	; 0x53
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	6892      	ldr	r2, [r2, #8]
 80077de:	2120      	movs	r1, #32
 80077e0:	430a      	orrs	r2, r1
 80077e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	22ff      	movs	r2, #255	; 0xff
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2221      	movs	r2, #33	; 0x21
 80077f0:	2101      	movs	r1, #1
 80077f2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	2100      	movs	r1, #0
 80077fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	0018      	movs	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	b002      	add	sp, #8
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	46bd      	mov	sp, r7
 8007812:	b002      	add	sp, #8
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e059      	b.n	80078de <HAL_SPI_Init+0xc6>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2251      	movs	r2, #81	; 0x51
 800782e:	5c9b      	ldrb	r3, [r3, r2]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d107      	bne.n	8007846 <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2250      	movs	r2, #80	; 0x50
 800783a:	2100      	movs	r1, #0
 800783c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	0018      	movs	r0, r3
 8007842:	f000 f853 	bl	80078ec <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2251      	movs	r2, #81	; 0x51
 800784a:	2102      	movs	r1, #2
 800784c:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	2140      	movs	r1, #64	; 0x40
 800785a:	438a      	bics	r2, r1
 800785c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6851      	ldr	r1, [r2, #4]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6892      	ldr	r2, [r2, #8]
 800786a:	4311      	orrs	r1, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	68d2      	ldr	r2, [r2, #12]
 8007870:	4311      	orrs	r1, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6912      	ldr	r2, [r2, #16]
 8007876:	4311      	orrs	r1, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6952      	ldr	r2, [r2, #20]
 800787c:	4311      	orrs	r1, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6990      	ldr	r0, [r2, #24]
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	0092      	lsls	r2, r2, #2
 8007886:	4002      	ands	r2, r0
 8007888:	4311      	orrs	r1, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	69d2      	ldr	r2, [r2, #28]
 800788e:	4311      	orrs	r1, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6a12      	ldr	r2, [r2, #32]
 8007894:	4311      	orrs	r1, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6992      	ldr	r2, [r2, #24]
 80078a6:	0c12      	lsrs	r2, r2, #16
 80078a8:	2104      	movs	r1, #4
 80078aa:	4011      	ands	r1, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078b0:	430a      	orrs	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80078bc:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	69d2      	ldr	r2, [r2, #28]
 80078c8:	4907      	ldr	r1, [pc, #28]	; (80078e8 <HAL_SPI_Init+0xd0>)
 80078ca:	400a      	ands	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2251      	movs	r2, #81	; 0x51
 80078d8:	2101      	movs	r1, #1
 80078da:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	0018      	movs	r0, r3
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b002      	add	sp, #8
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	fffff7ff 	.word	0xfffff7ff

080078ec <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
             the HAL_SPI_MspInit could be implenetd in the user file
  */
}
 80078f4:	46c0      	nop			; (mov r8, r8)
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b002      	add	sp, #8
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	001a      	movs	r2, r3
 800790a:	1cbb      	adds	r3, r7, #2
 800790c:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 800790e:	2316      	movs	r3, #22
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	2200      	movs	r2, #0
 8007914:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2251      	movs	r2, #81	; 0x51
 800791a:	5c9b      	ldrb	r3, [r3, r2]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b01      	cmp	r3, #1
 8007920:	d006      	beq.n	8007930 <HAL_SPI_TransmitReceive+0x34>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2251      	movs	r2, #81	; 0x51
 8007926:	5c9b      	ldrb	r3, [r3, r2]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b22      	cmp	r3, #34	; 0x22
 800792c:	d000      	beq.n	8007930 <HAL_SPI_TransmitReceive+0x34>
 800792e:	e256      	b.n	8007dde <HAL_SPI_TransmitReceive+0x4e2>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d006      	beq.n	8007944 <HAL_SPI_TransmitReceive+0x48>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_SPI_TransmitReceive+0x48>
 800793c:	1cbb      	adds	r3, r7, #2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e24b      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2250      	movs	r2, #80	; 0x50
 800794c:	5c9b      	ldrb	r3, [r3, r2]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x5a>
 8007952:	2302      	movs	r3, #2
 8007954:	e244      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2250      	movs	r2, #80	; 0x50
 800795a:	2101      	movs	r1, #1
 800795c:	5499      	strb	r1, [r3, r2]
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2251      	movs	r2, #81	; 0x51
 8007962:	5c9b      	ldrb	r3, [r3, r2]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d103      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x76>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2251      	movs	r2, #81	; 0x51
 800796e:	2132      	movs	r1, #50	; 0x32
 8007970:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1cba      	adds	r2, r7, #2
 8007982:	8812      	ldrh	r2, [r2, #0]
 8007984:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1cba      	adds	r2, r7, #2
 800798a:	8812      	ldrh	r2, [r2, #0]
 800798c:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1cba      	adds	r2, r7, #2
 8007998:	8812      	ldrh	r2, [r2, #0]
 800799a:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	1cba      	adds	r2, r7, #2
 80079a0:	8812      	ldrh	r2, [r2, #0]
 80079a2:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	019b      	lsls	r3, r3, #6
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d110      	bne.n	80079de <HAL_SPI_TransmitReceive+0xe2>
    {
      SPI_RESET_CRC(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	49ca      	ldr	r1, [pc, #808]	; (8007cf0 <HAL_SPI_TransmitReceive+0x3f4>)
 80079c8:	400a      	ands	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	2180      	movs	r1, #128	; 0x80
 80079d8:	0189      	lsls	r1, r1, #6
 80079da:	430a      	orrs	r2, r1
 80079dc:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2240      	movs	r2, #64	; 0x40
 80079e6:	4013      	ands	r3, r2
 80079e8:	2b40      	cmp	r3, #64	; 0x40
 80079ea:	d007      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x100>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	2140      	movs	r1, #64	; 0x40
 80079f8:	430a      	orrs	r2, r1
 80079fa:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	2380      	movs	r3, #128	; 0x80
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d000      	beq.n	8007a0a <HAL_SPI_TransmitReceive+0x10e>
 8007a08:	e0c8      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x2a0>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x12c>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	2382      	movs	r3, #130	; 0x82
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d116      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x150>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d111      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x150>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a30:	8812      	ldrh	r2, [r2, #0]
 8007a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d000      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x15c>
 8007a56:	e079      	b.n	8007b4c <HAL_SPI_TransmitReceive+0x250>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	019b      	lsls	r3, r3, #6
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d108      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x17a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	0149      	lsls	r1, r1, #5
 8007a72:	430a      	orrs	r2, r1
 8007a74:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	f000 f9b5 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007a82:	1e03      	subs	r3, r0, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x18e>
        { 
          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e1aa      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	1c9a      	adds	r2, r3, #2
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ab0:	e131      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2102      	movs	r1, #2
 8007aba:	f000 f997 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007abe:	1e03      	subs	r3, r0, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x1ca>
          { 
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e18c      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	1c9a      	adds	r2, r3, #2
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10e      	bne.n	8007b12 <HAL_SPI_TransmitReceive+0x216>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af8:	2380      	movs	r3, #128	; 0x80
 8007afa:	019b      	lsls	r3, r3, #6
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d108      	bne.n	8007b12 <HAL_SPI_TransmitReceive+0x216>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	2180      	movs	r1, #128	; 0x80
 8007b0c:	0149      	lsls	r1, r1, #5
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	2101      	movs	r1, #1
 8007b1a:	f000 f967 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007b1e:	1e03      	subs	r3, r0, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x22a>
          { 
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e15c      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	1c9a      	adds	r2, r3, #2
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1ad      	bne.n	8007ab2 <HAL_SPI_TransmitReceive+0x1b6>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d000      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x264>
 8007b5e:	e0da      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	2101      	movs	r1, #1
 8007b68:	f000 f940 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007b6c:	1e03      	subs	r3, r0, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x278>
          {
            return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e135      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b9a:	e0bc      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x41a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_SPI_TransmitReceive+0x2be>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	2382      	movs	r3, #130	; 0x82
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d114      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x2de>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10f      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x2de>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007bc2:	1c50      	adds	r0, r2, #1
 8007bc4:	68f9      	ldr	r1, [r7, #12]
 8007bc6:	6308      	str	r0, [r1, #48]	; 0x30
 8007bc8:	7812      	ldrb	r2, [r2, #0]
 8007bca:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d000      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x2ea>
 8007be4:	e070      	b.n	8007cc8 <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bea:	2380      	movs	r3, #128	; 0x80
 8007bec:	019b      	lsls	r3, r3, #6
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d108      	bne.n	8007c04 <HAL_SPI_TransmitReceive+0x308>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	2180      	movs	r1, #128	; 0x80
 8007bfe:	0149      	lsls	r1, r1, #5
 8007c00:	430a      	orrs	r2, r1
 8007c02:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	f000 f8ee 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007c10:	1e03      	subs	r3, r0, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x31c>
        {
          return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e0e3      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c34:	e06f      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	f000 f8d5 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007c42:	1e03      	subs	r3, r0, #0
 8007c44:	d001      	beq.n	8007c4a <HAL_SPI_TransmitReceive+0x34e>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e0ca      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c52:	1c50      	adds	r0, r2, #1
 8007c54:	68f9      	ldr	r1, [r7, #12]
 8007c56:	6308      	str	r0, [r1, #48]	; 0x30
 8007c58:	7812      	ldrb	r2, [r2, #0]
 8007c5a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10e      	bne.n	8007c92 <HAL_SPI_TransmitReceive+0x396>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	019b      	lsls	r3, r3, #6
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d108      	bne.n	8007c92 <HAL_SPI_TransmitReceive+0x396>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	2180      	movs	r1, #128	; 0x80
 8007c8c:	0149      	lsls	r1, r1, #5
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	2101      	movs	r1, #1
 8007c9a:	f000 f8a7 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007c9e:	1e03      	subs	r3, r0, #0
 8007ca0:	d001      	beq.n	8007ca6 <HAL_SPI_TransmitReceive+0x3aa>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e09c      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	1c59      	adds	r1, r3, #1
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	6391      	str	r1, [r2, #56]	; 0x38
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	68d2      	ldr	r2, [r2, #12]
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1b1      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x33a>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d11d      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	f000 f883 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007ce6:	1e03      	subs	r3, r0, #0
 8007ce8:	d004      	beq.n	8007cf4 <HAL_SPI_TransmitReceive+0x3f8>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e078      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	ffffdfff 	.word	0xffffdfff
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	1c59      	adds	r1, r3, #1
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	6391      	str	r1, [r2, #56]	; 0x38
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	68d2      	ldr	r2, [r2, #12]
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	019b      	lsls	r3, r3, #6
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d119      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x45a>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	2101      	movs	r1, #1
 8007d2a:	f000 f85f 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007d2e:	1e03      	subs	r3, r0, #0
 8007d30:	d007      	beq.n	8007d42 <HAL_SPI_TransmitReceive+0x446>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	2202      	movs	r2, #2
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e04e      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	2316      	movs	r3, #22
 8007d4c:	18fb      	adds	r3, r7, r3
 8007d4e:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8007d50:	2316      	movs	r3, #22
 8007d52:	18fb      	adds	r3, r7, r3
 8007d54:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	2180      	movs	r1, #128	; 0x80
 8007d5e:	f000 f845 	bl	8007dec <SPI_WaitOnFlagUntilTimeout>
 8007d62:	1e03      	subs	r3, r0, #0
 8007d64:	d007      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x47a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e034      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2251      	movs	r2, #81	; 0x51
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	019b      	lsls	r3, r3, #6
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d123      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x4d6>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2210      	movs	r2, #16
 8007d92:	4013      	ands	r3, r2
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d11c      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x4d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	490e      	ldr	r1, [pc, #56]	; (8007de8 <HAL_SPI_TransmitReceive+0x4ec>)
 8007db0:	400a      	ands	r2, r1
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	2180      	movs	r1, #128	; 0x80
 8007dc0:	0189      	lsls	r1, r1, #6
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2250      	movs	r2, #80	; 0x50
 8007dca:	2100      	movs	r1, #0
 8007dcc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR; 
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e006      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2250      	movs	r2, #80	; 0x50
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e000      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x4e4>
  }
  else
  {
    return HAL_BUSY;
 8007dde:	2302      	movs	r3, #2
  }
}
 8007de0:	0018      	movs	r0, r3
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b006      	add	sp, #24
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	ffffdfff 	.word	0xffffdfff

08007dec <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007e00:	f7fc ff2a 	bl	8004c58 <HAL_GetTick>
 8007e04:	0003      	movs	r3, r0
 8007e06:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8007e08:	1dfb      	adds	r3, r7, #7
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d000      	beq.n	8007e12 <SPI_WaitOnFlagUntilTimeout+0x26>
 8007e10:	e087      	b.n	8007f22 <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8007e12:	e03e      	b.n	8007e92 <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	d03b      	beq.n	8007e92 <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <SPI_WaitOnFlagUntilTimeout+0x44>
 8007e20:	f7fc ff1a 	bl	8004c58 <HAL_GetTick>
 8007e24:	0002      	movs	r2, r0
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	1ad2      	subs	r2, r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d930      	bls.n	8007e92 <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	6852      	ldr	r2, [r2, #4]
 8007e3a:	21e0      	movs	r1, #224	; 0xe0
 8007e3c:	438a      	bics	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	2140      	movs	r1, #64	; 0x40
 8007e4c:	438a      	bics	r2, r1
 8007e4e:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e54:	2380      	movs	r3, #128	; 0x80
 8007e56:	019b      	lsls	r3, r3, #6
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d110      	bne.n	8007e7e <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	6812      	ldr	r2, [r2, #0]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	4935      	ldr	r1, [pc, #212]	; (8007f3c <SPI_WaitOnFlagUntilTimeout+0x150>)
 8007e68:	400a      	ands	r2, r1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	0189      	lsls	r1, r1, #6
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2251      	movs	r2, #81	; 0x51
 8007e82:	2101      	movs	r1, #1
 8007e84:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2250      	movs	r2, #80	; 0x50
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e050      	b.n	8007f34 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d1b8      	bne.n	8007e14 <SPI_WaitOnFlagUntilTimeout+0x28>
 8007ea2:	e046      	b.n	8007f32 <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	d03b      	beq.n	8007f22 <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8007eb0:	f7fc fed2 	bl	8004c58 <HAL_GetTick>
 8007eb4:	0002      	movs	r2, r0
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d930      	bls.n	8007f22 <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	6852      	ldr	r2, [r2, #4]
 8007eca:	21e0      	movs	r1, #224	; 0xe0
 8007ecc:	438a      	bics	r2, r1
 8007ece:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	2140      	movs	r1, #64	; 0x40
 8007edc:	438a      	bics	r2, r1
 8007ede:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee4:	2380      	movs	r3, #128	; 0x80
 8007ee6:	019b      	lsls	r3, r3, #6
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d110      	bne.n	8007f0e <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	4911      	ldr	r1, [pc, #68]	; (8007f3c <SPI_WaitOnFlagUntilTimeout+0x150>)
 8007ef8:	400a      	ands	r2, r1
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	2180      	movs	r1, #128	; 0x80
 8007f08:	0189      	lsls	r1, r1, #6
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2251      	movs	r2, #81	; 0x51
 8007f12:	2101      	movs	r1, #1
 8007f14:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2250      	movs	r2, #80	; 0x50
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e008      	b.n	8007f34 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d0b8      	beq.n	8007ea4 <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b006      	add	sp, #24
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	ffffdfff 	.word	0xffffdfff

08007f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e047      	b.n	8007fe2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2269      	movs	r2, #105	; 0x69
 8007f56:	5c9b      	ldrb	r3, [r3, r2]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d107      	bne.n	8007f6e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2268      	movs	r2, #104	; 0x68
 8007f62:	2100      	movs	r1, #0
 8007f64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f002 fa65 	bl	800a438 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2269      	movs	r2, #105	; 0x69
 8007f72:	2124      	movs	r1, #36	; 0x24
 8007f74:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	2101      	movs	r1, #1
 8007f82:	438a      	bics	r2, r1
 8007f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_UART_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	0018      	movs	r0, r3
 8007f92:	f000 fc1d 	bl	80087d0 <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f000 f8cb 	bl	8008134 <UART_SetConfig>
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e01c      	b.n	8007fe2 <HAL_UART_Init+0xa2>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	6852      	ldr	r2, [r2, #4]
 8007fb2:	490e      	ldr	r1, [pc, #56]	; (8007fec <HAL_UART_Init+0xac>)
 8007fb4:	400a      	ands	r2, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	6892      	ldr	r2, [r2, #8]
 8007fc2:	212a      	movs	r1, #42	; 0x2a
 8007fc4:	438a      	bics	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6812      	ldr	r2, [r2, #0]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f000 fca4 	bl	8008928 <UART_CheckIdleState>
 8007fe0:	0003      	movs	r3, r0
}
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	b002      	add	sp, #8
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	ffffb7ff 	.word	0xffffb7ff

08007ff0 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	1dbb      	adds	r3, r7, #6
 8007ffe:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2269      	movs	r2, #105	; 0x69
 8008008:	5c9b      	ldrb	r3, [r3, r2]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b20      	cmp	r3, #32
 800800e:	d000      	beq.n	8008012 <HAL_UART_Transmit+0x22>
 8008010:	e08a      	b.n	8008128 <HAL_UART_Transmit+0x138>
  {
    if((pData == NULL ) || (Size == 0U))
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_UART_Transmit+0x30>
 8008018:	1dbb      	adds	r3, r7, #6
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e082      	b.n	800812a <HAL_UART_Transmit+0x13a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	2380      	movs	r3, #128	; 0x80
 800802a:	015b      	lsls	r3, r3, #5
 800802c:	429a      	cmp	r2, r3
 800802e:	d109      	bne.n	8008044 <HAL_UART_Transmit+0x54>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1) != 0)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2201      	movs	r2, #1
 800803c:	4013      	ands	r3, r2
 800803e:	d001      	beq.n	8008044 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e072      	b.n	800812a <HAL_UART_Transmit+0x13a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2268      	movs	r2, #104	; 0x68
 8008048:	5c9b      	ldrb	r3, [r3, r2]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_UART_Transmit+0x62>
 800804e:	2302      	movs	r3, #2
 8008050:	e06b      	b.n	800812a <HAL_UART_Transmit+0x13a>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2268      	movs	r2, #104	; 0x68
 8008056:	2101      	movs	r1, #1
 8008058:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2269      	movs	r2, #105	; 0x69
 8008064:	2121      	movs	r1, #33	; 0x21
 8008066:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008068:	f7fc fdf6 	bl	8004c58 <HAL_GetTick>
 800806c:	0003      	movs	r3, r0
 800806e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	1dba      	adds	r2, r7, #6
 8008074:	2150      	movs	r1, #80	; 0x50
 8008076:	8812      	ldrh	r2, [r2, #0]
 8008078:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	1dba      	adds	r2, r7, #6
 800807e:	2152      	movs	r1, #82	; 0x52
 8008080:	8812      	ldrh	r2, [r2, #0]
 8008082:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0U)
 8008084:	e033      	b.n	80080ee <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2252      	movs	r2, #82	; 0x52
 800808a:	5a9b      	ldrh	r3, [r3, r2]
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b299      	uxth	r1, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2252      	movs	r2, #82	; 0x52
 8008096:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	0013      	movs	r3, r2
 80080a2:	2200      	movs	r2, #0
 80080a4:	2180      	movs	r1, #128	; 0x80
 80080a6:	f000 fc89 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 80080aa:	1e03      	subs	r3, r0, #0
 80080ac:	d001      	beq.n	80080b2 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e03b      	b.n	800812a <HAL_UART_Transmit+0x13a>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	015b      	lsls	r3, r3, #5
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d110      	bne.n	80080e0 <HAL_UART_Transmit+0xf0>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10c      	bne.n	80080e0 <HAL_UART_Transmit+0xf0>
      {
        tmp = (uint16_t*) pData;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	8812      	ldrh	r2, [r2, #0]
 80080d2:	05d2      	lsls	r2, r2, #23
 80080d4:	0dd2      	lsrs	r2, r2, #23
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2U;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	3302      	adds	r3, #2
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	e006      	b.n	80080ee <HAL_UART_Transmit+0xfe>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	1c51      	adds	r1, r2, #1
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2252      	movs	r2, #82	; 0x52
 80080f2:	5a9b      	ldrh	r3, [r3, r2]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1c5      	bne.n	8008086 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	0013      	movs	r3, r2
 8008104:	2200      	movs	r2, #0
 8008106:	2140      	movs	r1, #64	; 0x40
 8008108:	f000 fc58 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 800810c:	1e03      	subs	r3, r0, #0
 800810e:	d001      	beq.n	8008114 <HAL_UART_Transmit+0x124>
    {
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e00a      	b.n	800812a <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2269      	movs	r2, #105	; 0x69
 8008118:	2120      	movs	r1, #32
 800811a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2268      	movs	r2, #104	; 0x68
 8008120:	2100      	movs	r1, #0
 8008122:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	e000      	b.n	800812a <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8008128:	2302      	movs	r3, #2
  }
}
 800812a:	0018      	movs	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	b006      	add	sp, #24
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008134:	b5b0      	push	{r4, r5, r7, lr}
 8008136:	b08c      	sub	sp, #48	; 0x30
 8008138:	af00      	add	r7, sp, #0
 800813a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 800813c:	2300      	movs	r3, #0
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008140:	2313      	movs	r3, #19
 8008142:	2218      	movs	r2, #24
 8008144:	4694      	mov	ip, r2
 8008146:	44bc      	add	ip, r7
 8008148:	4463      	add	r3, ip
 800814a:	2210      	movs	r2, #16
 800814c:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800814e:	230c      	movs	r3, #12
 8008150:	2218      	movs	r2, #24
 8008152:	4694      	mov	ip, r2
 8008154:	44bc      	add	ip, r7
 8008156:	4463      	add	r3, ip
 8008158:	2200      	movs	r2, #0
 800815a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800815c:	2310      	movs	r3, #16
 800815e:	2218      	movs	r2, #24
 8008160:	4694      	mov	ip, r2
 8008162:	44bc      	add	ip, r7
 8008164:	4463      	add	r3, ip
 8008166:	2200      	movs	r2, #0
 8008168:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800816a:	230f      	movs	r3, #15
 800816c:	2218      	movs	r2, #24
 800816e:	4694      	mov	ip, r2
 8008170:	44bc      	add	ip, r7
 8008172:	4463      	add	r3, ip
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	431a      	orrs	r2, r3
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	431a      	orrs	r2, r3
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	4313      	orrs	r3, r2
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	49c7      	ldr	r1, [pc, #796]	; (80084b8 <UART_SetConfig+0x384>)
 800819c:	4011      	ands	r1, r2
 800819e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a0:	430a      	orrs	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	6852      	ldr	r2, [r2, #4]
 80081ae:	49c3      	ldr	r1, [pc, #780]	; (80084bc <UART_SetConfig+0x388>)
 80081b0:	4011      	ands	r1, r2
 80081b2:	69fa      	ldr	r2, [r7, #28]
 80081b4:	68d2      	ldr	r2, [r2, #12]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4abe      	ldr	r2, [pc, #760]	; (80084c0 <UART_SetConfig+0x38c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <UART_SetConfig+0xa0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d0:	4313      	orrs	r3, r2
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	6812      	ldr	r2, [r2, #0]
 80081dc:	6892      	ldr	r2, [r2, #8]
 80081de:	49b9      	ldr	r1, [pc, #740]	; (80084c4 <UART_SetConfig+0x390>)
 80081e0:	4011      	ands	r1, r2
 80081e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e4:	430a      	orrs	r2, r1
 80081e6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4ab6      	ldr	r2, [pc, #728]	; (80084c8 <UART_SetConfig+0x394>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d134      	bne.n	800825c <UART_SetConfig+0x128>
 80081f2:	4bb6      	ldr	r3, [pc, #728]	; (80084cc <UART_SetConfig+0x398>)
 80081f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f6:	2203      	movs	r2, #3
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d015      	beq.n	800822a <UART_SetConfig+0xf6>
 80081fe:	d304      	bcc.n	800820a <UART_SetConfig+0xd6>
 8008200:	2b02      	cmp	r3, #2
 8008202:	d00a      	beq.n	800821a <UART_SetConfig+0xe6>
 8008204:	2b03      	cmp	r3, #3
 8008206:	d018      	beq.n	800823a <UART_SetConfig+0x106>
 8008208:	e01f      	b.n	800824a <UART_SetConfig+0x116>
 800820a:	2313      	movs	r3, #19
 800820c:	2218      	movs	r2, #24
 800820e:	4694      	mov	ip, r2
 8008210:	44bc      	add	ip, r7
 8008212:	4463      	add	r3, ip
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	e0bc      	b.n	8008394 <UART_SetConfig+0x260>
 800821a:	2313      	movs	r3, #19
 800821c:	2218      	movs	r2, #24
 800821e:	4694      	mov	ip, r2
 8008220:	44bc      	add	ip, r7
 8008222:	4463      	add	r3, ip
 8008224:	2202      	movs	r2, #2
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e0b4      	b.n	8008394 <UART_SetConfig+0x260>
 800822a:	2313      	movs	r3, #19
 800822c:	2218      	movs	r2, #24
 800822e:	4694      	mov	ip, r2
 8008230:	44bc      	add	ip, r7
 8008232:	4463      	add	r3, ip
 8008234:	2204      	movs	r2, #4
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e0ac      	b.n	8008394 <UART_SetConfig+0x260>
 800823a:	2313      	movs	r3, #19
 800823c:	2218      	movs	r2, #24
 800823e:	4694      	mov	ip, r2
 8008240:	44bc      	add	ip, r7
 8008242:	4463      	add	r3, ip
 8008244:	2208      	movs	r2, #8
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e0a4      	b.n	8008394 <UART_SetConfig+0x260>
 800824a:	2313      	movs	r3, #19
 800824c:	2218      	movs	r2, #24
 800824e:	4694      	mov	ip, r2
 8008250:	44bc      	add	ip, r7
 8008252:	4463      	add	r3, ip
 8008254:	2210      	movs	r2, #16
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	e09b      	b.n	8008394 <UART_SetConfig+0x260>
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a9b      	ldr	r2, [pc, #620]	; (80084d0 <UART_SetConfig+0x39c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d137      	bne.n	80082d6 <UART_SetConfig+0x1a2>
 8008266:	4b99      	ldr	r3, [pc, #612]	; (80084cc <UART_SetConfig+0x398>)
 8008268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826a:	220c      	movs	r2, #12
 800826c:	4013      	ands	r3, r2
 800826e:	2b04      	cmp	r3, #4
 8008270:	d018      	beq.n	80082a4 <UART_SetConfig+0x170>
 8008272:	d802      	bhi.n	800827a <UART_SetConfig+0x146>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <UART_SetConfig+0x150>
 8008278:	e024      	b.n	80082c4 <UART_SetConfig+0x190>
 800827a:	2b08      	cmp	r3, #8
 800827c:	d00a      	beq.n	8008294 <UART_SetConfig+0x160>
 800827e:	2b0c      	cmp	r3, #12
 8008280:	d018      	beq.n	80082b4 <UART_SetConfig+0x180>
 8008282:	e01f      	b.n	80082c4 <UART_SetConfig+0x190>
 8008284:	2313      	movs	r3, #19
 8008286:	2218      	movs	r2, #24
 8008288:	4694      	mov	ip, r2
 800828a:	44bc      	add	ip, r7
 800828c:	4463      	add	r3, ip
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e07f      	b.n	8008394 <UART_SetConfig+0x260>
 8008294:	2313      	movs	r3, #19
 8008296:	2218      	movs	r2, #24
 8008298:	4694      	mov	ip, r2
 800829a:	44bc      	add	ip, r7
 800829c:	4463      	add	r3, ip
 800829e:	2202      	movs	r2, #2
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	e077      	b.n	8008394 <UART_SetConfig+0x260>
 80082a4:	2313      	movs	r3, #19
 80082a6:	2218      	movs	r2, #24
 80082a8:	4694      	mov	ip, r2
 80082aa:	44bc      	add	ip, r7
 80082ac:	4463      	add	r3, ip
 80082ae:	2204      	movs	r2, #4
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	e06f      	b.n	8008394 <UART_SetConfig+0x260>
 80082b4:	2313      	movs	r3, #19
 80082b6:	2218      	movs	r2, #24
 80082b8:	4694      	mov	ip, r2
 80082ba:	44bc      	add	ip, r7
 80082bc:	4463      	add	r3, ip
 80082be:	2208      	movs	r2, #8
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	e067      	b.n	8008394 <UART_SetConfig+0x260>
 80082c4:	2313      	movs	r3, #19
 80082c6:	2218      	movs	r2, #24
 80082c8:	4694      	mov	ip, r2
 80082ca:	44bc      	add	ip, r7
 80082cc:	4463      	add	r3, ip
 80082ce:	2210      	movs	r2, #16
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	e05e      	b.n	8008394 <UART_SetConfig+0x260>
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a7e      	ldr	r2, [pc, #504]	; (80084d4 <UART_SetConfig+0x3a0>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d107      	bne.n	80082f0 <UART_SetConfig+0x1bc>
 80082e0:	2313      	movs	r3, #19
 80082e2:	2218      	movs	r2, #24
 80082e4:	4694      	mov	ip, r2
 80082e6:	44bc      	add	ip, r7
 80082e8:	4463      	add	r3, ip
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e052      	b.n	8008396 <UART_SetConfig+0x262>
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a78      	ldr	r2, [pc, #480]	; (80084d8 <UART_SetConfig+0x3a4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d107      	bne.n	800830a <UART_SetConfig+0x1d6>
 80082fa:	2313      	movs	r3, #19
 80082fc:	2218      	movs	r2, #24
 80082fe:	4694      	mov	ip, r2
 8008300:	44bc      	add	ip, r7
 8008302:	4463      	add	r3, ip
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e045      	b.n	8008396 <UART_SetConfig+0x262>
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a6c      	ldr	r2, [pc, #432]	; (80084c0 <UART_SetConfig+0x38c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d140      	bne.n	8008396 <UART_SetConfig+0x262>
 8008314:	4b6d      	ldr	r3, [pc, #436]	; (80084cc <UART_SetConfig+0x398>)
 8008316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008318:	23c0      	movs	r3, #192	; 0xc0
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	4013      	ands	r3, r2
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	00d2      	lsls	r2, r2, #3
 8008322:	4293      	cmp	r3, r2
 8008324:	d01f      	beq.n	8008366 <UART_SetConfig+0x232>
 8008326:	2280      	movs	r2, #128	; 0x80
 8008328:	00d2      	lsls	r2, r2, #3
 800832a:	4293      	cmp	r3, r2
 800832c:	d802      	bhi.n	8008334 <UART_SetConfig+0x200>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <UART_SetConfig+0x212>
 8008332:	e028      	b.n	8008386 <UART_SetConfig+0x252>
 8008334:	2280      	movs	r2, #128	; 0x80
 8008336:	0112      	lsls	r2, r2, #4
 8008338:	4293      	cmp	r3, r2
 800833a:	d00c      	beq.n	8008356 <UART_SetConfig+0x222>
 800833c:	22c0      	movs	r2, #192	; 0xc0
 800833e:	0112      	lsls	r2, r2, #4
 8008340:	4293      	cmp	r3, r2
 8008342:	d018      	beq.n	8008376 <UART_SetConfig+0x242>
 8008344:	e01f      	b.n	8008386 <UART_SetConfig+0x252>
 8008346:	2313      	movs	r3, #19
 8008348:	2218      	movs	r2, #24
 800834a:	4694      	mov	ip, r2
 800834c:	44bc      	add	ip, r7
 800834e:	4463      	add	r3, ip
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	e01e      	b.n	8008394 <UART_SetConfig+0x260>
 8008356:	2313      	movs	r3, #19
 8008358:	2218      	movs	r2, #24
 800835a:	4694      	mov	ip, r2
 800835c:	44bc      	add	ip, r7
 800835e:	4463      	add	r3, ip
 8008360:	2202      	movs	r2, #2
 8008362:	701a      	strb	r2, [r3, #0]
 8008364:	e016      	b.n	8008394 <UART_SetConfig+0x260>
 8008366:	2313      	movs	r3, #19
 8008368:	2218      	movs	r2, #24
 800836a:	4694      	mov	ip, r2
 800836c:	44bc      	add	ip, r7
 800836e:	4463      	add	r3, ip
 8008370:	2204      	movs	r2, #4
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e00e      	b.n	8008394 <UART_SetConfig+0x260>
 8008376:	2313      	movs	r3, #19
 8008378:	2218      	movs	r2, #24
 800837a:	4694      	mov	ip, r2
 800837c:	44bc      	add	ip, r7
 800837e:	4463      	add	r3, ip
 8008380:	2208      	movs	r2, #8
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e006      	b.n	8008394 <UART_SetConfig+0x260>
 8008386:	2313      	movs	r3, #19
 8008388:	2218      	movs	r2, #24
 800838a:	4694      	mov	ip, r2
 800838c:	44bc      	add	ip, r7
 800838e:	4463      	add	r3, ip
 8008390:	2210      	movs	r2, #16
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8008396:	2002      	movs	r0, #2
 8008398:	f7fe fa5e 	bl	8006858 <HAL_RCCEx_GetPeriphCLKFreq>
 800839c:	0003      	movs	r3, r0
 800839e:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a46      	ldr	r2, [pc, #280]	; (80084c0 <UART_SetConfig+0x38c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d000      	beq.n	80083ac <UART_SetConfig+0x278>
 80083aa:	e09f      	b.n	80084ec <UART_SetConfig+0x3b8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 80083b0:	2313      	movs	r3, #19
 80083b2:	2218      	movs	r2, #24
 80083b4:	4694      	mov	ip, r2
 80083b6:	44bc      	add	ip, r7
 80083b8:	4463      	add	r3, ip
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d00d      	beq.n	80083dc <UART_SetConfig+0x2a8>
 80083c0:	dc02      	bgt.n	80083c8 <UART_SetConfig+0x294>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <UART_SetConfig+0x29e>
 80083c6:	e01d      	b.n	8008404 <UART_SetConfig+0x2d0>
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d012      	beq.n	80083f2 <UART_SetConfig+0x2be>
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d015      	beq.n	80083fc <UART_SetConfig+0x2c8>
 80083d0:	e018      	b.n	8008404 <UART_SetConfig+0x2d0>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 80083d2:	f7fe f86b 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 80083d6:	0003      	movs	r3, r0
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80083da:	e01b      	b.n	8008414 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083dc:	4b3b      	ldr	r3, [pc, #236]	; (80084cc <UART_SetConfig+0x398>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2210      	movs	r2, #16
 80083e2:	4013      	ands	r3, r2
 80083e4:	d002      	beq.n	80083ec <UART_SetConfig+0x2b8>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 80083e6:	4b3d      	ldr	r3, [pc, #244]	; (80084dc <UART_SetConfig+0x3a8>)
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 80083ea:	e013      	b.n	8008414 <UART_SetConfig+0x2e0>
        tmpreg = (uint32_t) HSI_VALUE;
 80083ec:	4b3c      	ldr	r3, [pc, #240]	; (80084e0 <UART_SetConfig+0x3ac>)
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80083f0:	e010      	b.n	8008414 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80083f2:	f7fd ffd3 	bl	800639c <HAL_RCC_GetSysClockFreq>
 80083f6:	0003      	movs	r3, r0
 80083f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 80083fc:	2380      	movs	r3, #128	; 0x80
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008402:	e007      	b.n	8008414 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008404:	230f      	movs	r3, #15
 8008406:	2218      	movs	r2, #24
 8008408:	4694      	mov	ip, r2
 800840a:	44bc      	add	ip, r7
 800840c:	4463      	add	r3, ip
 800840e:	2201      	movs	r2, #1
 8008410:	701a      	strb	r2, [r3, #0]
      break;
 8008412:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d100      	bne.n	800841c <UART_SetConfig+0x2e8>
 800841a:	e1c0      	b.n	800879e <UART_SetConfig+0x66a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	0013      	movs	r3, r2
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	189a      	adds	r2, r3, r2
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	429a      	cmp	r2, r3
 800842a:	d805      	bhi.n	8008438 <UART_SetConfig+0x304>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	429a      	cmp	r2, r3
 8008436:	d207      	bcs.n	8008448 <UART_SetConfig+0x314>
      {
        ret = HAL_ERROR;
 8008438:	230f      	movs	r3, #15
 800843a:	2218      	movs	r2, #24
 800843c:	4694      	mov	ip, r2
 800843e:	44bc      	add	ip, r7
 8008440:	4463      	add	r3, ip
 8008442:	2201      	movs	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e1aa      	b.n	800879e <UART_SetConfig+0x66a>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	6939      	ldr	r1, [r7, #16]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	000b      	movs	r3, r1
 8008456:	0e1b      	lsrs	r3, r3, #24
 8008458:	0010      	movs	r0, r2
 800845a:	0205      	lsls	r5, r0, #8
 800845c:	431d      	orrs	r5, r3
 800845e:	000b      	movs	r3, r1
 8008460:	021c      	lsls	r4, r3, #8
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	60bb      	str	r3, [r7, #8]
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	68b8      	ldr	r0, [r7, #8]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	1900      	adds	r0, r0, r4
 8008474:	4169      	adcs	r1, r5
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	2300      	movs	r3, #0
 800847e:	607b      	str	r3, [r7, #4]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f7f7 fff4 	bl	8000470 <__aeabi_uldivmod>
 8008488:	0003      	movs	r3, r0
 800848a:	000c      	movs	r4, r1
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	4a14      	ldr	r2, [pc, #80]	; (80084e4 <UART_SetConfig+0x3b0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d908      	bls.n	80084a8 <UART_SetConfig+0x374>
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <UART_SetConfig+0x3b4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d804      	bhi.n	80084a8 <UART_SetConfig+0x374>
        {
           huart->Instance->BRR = tmpreg;
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	e17a      	b.n	800879e <UART_SetConfig+0x66a>
        }
        else
        {
          ret = HAL_ERROR;
 80084a8:	230f      	movs	r3, #15
 80084aa:	2218      	movs	r2, #24
 80084ac:	4694      	mov	ip, r2
 80084ae:	44bc      	add	ip, r7
 80084b0:	4463      	add	r3, ip
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	e172      	b.n	800879e <UART_SetConfig+0x66a>
 80084b8:	efff69f3 	.word	0xefff69f3
 80084bc:	ffffcfff 	.word	0xffffcfff
 80084c0:	40004800 	.word	0x40004800
 80084c4:	fffff4ff 	.word	0xfffff4ff
 80084c8:	40013800 	.word	0x40013800
 80084cc:	40021000 	.word	0x40021000
 80084d0:	40004400 	.word	0x40004400
 80084d4:	40004c00 	.word	0x40004c00
 80084d8:	40005000 	.word	0x40005000
 80084dc:	003d0900 	.word	0x003d0900
 80084e0:	00f42400 	.word	0x00f42400
 80084e4:	000002ff 	.word	0x000002ff
 80084e8:	000fffff 	.word	0x000fffff
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	2380      	movs	r3, #128	; 0x80
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d000      	beq.n	80084fa <UART_SetConfig+0x3c6>
 80084f8:	e0ca      	b.n	8008690 <UART_SetConfig+0x55c>
  {
    switch (clocksource)
 80084fa:	2313      	movs	r3, #19
 80084fc:	2218      	movs	r2, #24
 80084fe:	4694      	mov	ip, r2
 8008500:	44bc      	add	ip, r7
 8008502:	4463      	add	r3, ip
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b08      	cmp	r3, #8
 8008508:	d900      	bls.n	800850c <UART_SetConfig+0x3d8>
 800850a:	e089      	b.n	8008620 <UART_SetConfig+0x4ec>
 800850c:	009a      	lsls	r2, r3, #2
 800850e:	4ba9      	ldr	r3, [pc, #676]	; (80087b4 <UART_SetConfig+0x680>)
 8008510:	18d3      	adds	r3, r2, r3
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	005a      	lsls	r2, r3, #1
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	18d2      	adds	r2, r2, r3
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	0019      	movs	r1, r3
 8008528:	0010      	movs	r0, r2
 800852a:	f7f7 fded 	bl	8000108 <__udivsi3>
 800852e:	0003      	movs	r3, r0
 8008530:	001a      	movs	r2, r3
 8008532:	2310      	movs	r3, #16
 8008534:	2118      	movs	r1, #24
 8008536:	468c      	mov	ip, r1
 8008538:	44bc      	add	ip, r7
 800853a:	4463      	add	r3, ip
 800853c:	801a      	strh	r2, [r3, #0]
      break;
 800853e:	e077      	b.n	8008630 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008540:	f7fd ffca 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 8008544:	0003      	movs	r3, r0
 8008546:	005a      	lsls	r2, r3, #1
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	18d2      	adds	r2, r2, r3
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	0019      	movs	r1, r3
 8008556:	0010      	movs	r0, r2
 8008558:	f7f7 fdd6 	bl	8000108 <__udivsi3>
 800855c:	0003      	movs	r3, r0
 800855e:	001a      	movs	r2, r3
 8008560:	2310      	movs	r3, #16
 8008562:	2118      	movs	r1, #24
 8008564:	468c      	mov	ip, r1
 8008566:	44bc      	add	ip, r7
 8008568:	4463      	add	r3, ip
 800856a:	801a      	strh	r2, [r3, #0]
      break;
 800856c:	e060      	b.n	8008630 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800856e:	4b92      	ldr	r3, [pc, #584]	; (80087b8 <UART_SetConfig+0x684>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2210      	movs	r2, #16
 8008574:	4013      	ands	r3, r2
 8008576:	d013      	beq.n	80085a0 <UART_SetConfig+0x46c>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	4a8f      	ldr	r2, [pc, #572]	; (80087bc <UART_SetConfig+0x688>)
 8008580:	189a      	adds	r2, r3, r2
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	0019      	movs	r1, r3
 8008588:	0010      	movs	r0, r2
 800858a:	f7f7 fdbd 	bl	8000108 <__udivsi3>
 800858e:	0003      	movs	r3, r0
 8008590:	001a      	movs	r2, r3
 8008592:	2310      	movs	r3, #16
 8008594:	2118      	movs	r1, #24
 8008596:	468c      	mov	ip, r1
 8008598:	44bc      	add	ip, r7
 800859a:	4463      	add	r3, ip
 800859c:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 800859e:	e047      	b.n	8008630 <UART_SetConfig+0x4fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	4a86      	ldr	r2, [pc, #536]	; (80087c0 <UART_SetConfig+0x68c>)
 80085a8:	189a      	adds	r2, r3, r2
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	0019      	movs	r1, r3
 80085b0:	0010      	movs	r0, r2
 80085b2:	f7f7 fda9 	bl	8000108 <__udivsi3>
 80085b6:	0003      	movs	r3, r0
 80085b8:	001a      	movs	r2, r3
 80085ba:	2310      	movs	r3, #16
 80085bc:	2118      	movs	r1, #24
 80085be:	468c      	mov	ip, r1
 80085c0:	44bc      	add	ip, r7
 80085c2:	4463      	add	r3, ip
 80085c4:	801a      	strh	r2, [r3, #0]
      break;
 80085c6:	e033      	b.n	8008630 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80085c8:	f7fd fee8 	bl	800639c <HAL_RCC_GetSysClockFreq>
 80085cc:	0003      	movs	r3, r0
 80085ce:	005a      	lsls	r2, r3, #1
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	18d2      	adds	r2, r2, r3
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	0019      	movs	r1, r3
 80085de:	0010      	movs	r0, r2
 80085e0:	f7f7 fd92 	bl	8000108 <__udivsi3>
 80085e4:	0003      	movs	r3, r0
 80085e6:	001a      	movs	r2, r3
 80085e8:	2310      	movs	r3, #16
 80085ea:	2118      	movs	r1, #24
 80085ec:	468c      	mov	ip, r1
 80085ee:	44bc      	add	ip, r7
 80085f0:	4463      	add	r3, ip
 80085f2:	801a      	strh	r2, [r3, #0]
      break;
 80085f4:	e01c      	b.n	8008630 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	2280      	movs	r2, #128	; 0x80
 80085fe:	0252      	lsls	r2, r2, #9
 8008600:	189a      	adds	r2, r3, r2
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	0019      	movs	r1, r3
 8008608:	0010      	movs	r0, r2
 800860a:	f7f7 fd7d 	bl	8000108 <__udivsi3>
 800860e:	0003      	movs	r3, r0
 8008610:	001a      	movs	r2, r3
 8008612:	2310      	movs	r3, #16
 8008614:	2118      	movs	r1, #24
 8008616:	468c      	mov	ip, r1
 8008618:	44bc      	add	ip, r7
 800861a:	4463      	add	r3, ip
 800861c:	801a      	strh	r2, [r3, #0]
      break;
 800861e:	e007      	b.n	8008630 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008620:	230f      	movs	r3, #15
 8008622:	2218      	movs	r2, #24
 8008624:	4694      	mov	ip, r2
 8008626:	44bc      	add	ip, r7
 8008628:	4463      	add	r3, ip
 800862a:	2201      	movs	r2, #1
 800862c:	701a      	strb	r2, [r3, #0]
      break;
 800862e:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008630:	230c      	movs	r3, #12
 8008632:	2218      	movs	r2, #24
 8008634:	4694      	mov	ip, r2
 8008636:	44bc      	add	ip, r7
 8008638:	4463      	add	r3, ip
 800863a:	2210      	movs	r2, #16
 800863c:	2118      	movs	r1, #24
 800863e:	468c      	mov	ip, r1
 8008640:	44bc      	add	ip, r7
 8008642:	4462      	add	r2, ip
 8008644:	8812      	ldrh	r2, [r2, #0]
 8008646:	210f      	movs	r1, #15
 8008648:	438a      	bics	r2, r1
 800864a:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 800864c:	2310      	movs	r3, #16
 800864e:	2218      	movs	r2, #24
 8008650:	4694      	mov	ip, r2
 8008652:	44bc      	add	ip, r7
 8008654:	4463      	add	r3, ip
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	105b      	asrs	r3, r3, #1
 800865a:	b29b      	uxth	r3, r3
 800865c:	2207      	movs	r2, #7
 800865e:	4013      	ands	r3, r2
 8008660:	b299      	uxth	r1, r3
 8008662:	230c      	movs	r3, #12
 8008664:	2218      	movs	r2, #24
 8008666:	4694      	mov	ip, r2
 8008668:	44bc      	add	ip, r7
 800866a:	4463      	add	r3, ip
 800866c:	220c      	movs	r2, #12
 800866e:	2018      	movs	r0, #24
 8008670:	4684      	mov	ip, r0
 8008672:	44bc      	add	ip, r7
 8008674:	4462      	add	r2, ip
 8008676:	8812      	ldrh	r2, [r2, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	220c      	movs	r2, #12
 8008682:	2118      	movs	r1, #24
 8008684:	468c      	mov	ip, r1
 8008686:	44bc      	add	ip, r7
 8008688:	4462      	add	r2, ip
 800868a:	8812      	ldrh	r2, [r2, #0]
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	e086      	b.n	800879e <UART_SetConfig+0x66a>
  }
  else
  {
    switch (clocksource)
 8008690:	2313      	movs	r3, #19
 8008692:	2218      	movs	r2, #24
 8008694:	4694      	mov	ip, r2
 8008696:	44bc      	add	ip, r7
 8008698:	4463      	add	r3, ip
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b08      	cmp	r3, #8
 800869e:	d876      	bhi.n	800878e <UART_SetConfig+0x65a>
 80086a0:	009a      	lsls	r2, r3, #2
 80086a2:	4b48      	ldr	r3, [pc, #288]	; (80087c4 <UART_SetConfig+0x690>)
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	681c      	ldr	r4, [r3, #0]
 80086ae:	f7fd fefd 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 80086b2:	0002      	movs	r2, r0
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	085b      	lsrs	r3, r3, #1
 80086ba:	18d2      	adds	r2, r2, r3
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	0019      	movs	r1, r3
 80086c2:	0010      	movs	r0, r2
 80086c4:	f7f7 fd20 	bl	8000108 <__udivsi3>
 80086c8:	0003      	movs	r3, r0
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	60e3      	str	r3, [r4, #12]
      break;
 80086ce:	e066      	b.n	800879e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	681c      	ldr	r4, [r3, #0]
 80086d4:	f7fd ff00 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 80086d8:	0002      	movs	r2, r0
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	18d2      	adds	r2, r2, r3
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	0019      	movs	r1, r3
 80086e8:	0010      	movs	r0, r2
 80086ea:	f7f7 fd0d 	bl	8000108 <__udivsi3>
 80086ee:	0003      	movs	r3, r0
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	60e3      	str	r3, [r4, #12]
      break;
 80086f4:	e053      	b.n	800879e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086f6:	4b30      	ldr	r3, [pc, #192]	; (80087b8 <UART_SetConfig+0x684>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2210      	movs	r2, #16
 80086fc:	4013      	ands	r3, r2
 80086fe:	d010      	beq.n	8008722 <UART_SetConfig+0x5ee>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	681c      	ldr	r4, [r3, #0]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	4a2f      	ldr	r2, [pc, #188]	; (80087c8 <UART_SetConfig+0x694>)
 800870c:	189a      	adds	r2, r3, r2
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	0019      	movs	r1, r3
 8008714:	0010      	movs	r0, r2
 8008716:	f7f7 fcf7 	bl	8000108 <__udivsi3>
 800871a:	0003      	movs	r3, r0
 800871c:	b29b      	uxth	r3, r3
 800871e:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 8008720:	e03d      	b.n	800879e <UART_SetConfig+0x66a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	681c      	ldr	r4, [r3, #0]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	085b      	lsrs	r3, r3, #1
 800872c:	4a27      	ldr	r2, [pc, #156]	; (80087cc <UART_SetConfig+0x698>)
 800872e:	189a      	adds	r2, r3, r2
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	0019      	movs	r1, r3
 8008736:	0010      	movs	r0, r2
 8008738:	f7f7 fce6 	bl	8000108 <__udivsi3>
 800873c:	0003      	movs	r3, r0
 800873e:	b29b      	uxth	r3, r3
 8008740:	60e3      	str	r3, [r4, #12]
      break;
 8008742:	e02c      	b.n	800879e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	681c      	ldr	r4, [r3, #0]
 8008748:	f7fd fe28 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800874c:	0002      	movs	r2, r0
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	085b      	lsrs	r3, r3, #1
 8008754:	18d2      	adds	r2, r2, r3
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	0019      	movs	r1, r3
 800875c:	0010      	movs	r0, r2
 800875e:	f7f7 fcd3 	bl	8000108 <__udivsi3>
 8008762:	0003      	movs	r3, r0
 8008764:	b29b      	uxth	r3, r3
 8008766:	60e3      	str	r3, [r4, #12]
      break;
 8008768:	e019      	b.n	800879e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	681c      	ldr	r4, [r3, #0]
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	2280      	movs	r2, #128	; 0x80
 8008776:	0212      	lsls	r2, r2, #8
 8008778:	189a      	adds	r2, r3, r2
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	0019      	movs	r1, r3
 8008780:	0010      	movs	r0, r2
 8008782:	f7f7 fcc1 	bl	8000108 <__udivsi3>
 8008786:	0003      	movs	r3, r0
 8008788:	b29b      	uxth	r3, r3
 800878a:	60e3      	str	r3, [r4, #12]
      break;
 800878c:	e007      	b.n	800879e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800878e:	230f      	movs	r3, #15
 8008790:	2218      	movs	r2, #24
 8008792:	4694      	mov	ip, r2
 8008794:	44bc      	add	ip, r7
 8008796:	4463      	add	r3, ip
 8008798:	2201      	movs	r2, #1
 800879a:	701a      	strb	r2, [r3, #0]
      break;
 800879c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800879e:	230f      	movs	r3, #15
 80087a0:	2218      	movs	r2, #24
 80087a2:	4694      	mov	ip, r2
 80087a4:	44bc      	add	ip, r7
 80087a6:	4463      	add	r3, ip
 80087a8:	781b      	ldrb	r3, [r3, #0]

}
 80087aa:	0018      	movs	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	b00c      	add	sp, #48	; 0x30
 80087b0:	bdb0      	pop	{r4, r5, r7, pc}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	0800b248 	.word	0x0800b248
 80087b8:	40021000 	.word	0x40021000
 80087bc:	007a1200 	.word	0x007a1200
 80087c0:	01e84800 	.word	0x01e84800
 80087c4:	0800b26c 	.word	0x0800b26c
 80087c8:	003d0900 	.word	0x003d0900
 80087cc:	00f42400 	.word	0x00f42400

080087d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2201      	movs	r2, #1
 80087de:	4013      	ands	r3, r2
 80087e0:	d00a      	beq.n	80087f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	6852      	ldr	r2, [r2, #4]
 80087ec:	4945      	ldr	r1, [pc, #276]	; (8008904 <UART_AdvFeatureConfig+0x134>)
 80087ee:	4011      	ands	r1, r2
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80087f4:	430a      	orrs	r2, r1
 80087f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	2202      	movs	r2, #2
 80087fe:	4013      	ands	r3, r2
 8008800:	d00a      	beq.n	8008818 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	6852      	ldr	r2, [r2, #4]
 800880c:	493e      	ldr	r1, [pc, #248]	; (8008908 <UART_AdvFeatureConfig+0x138>)
 800880e:	4011      	ands	r1, r2
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008814:	430a      	orrs	r2, r1
 8008816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	2204      	movs	r2, #4
 800881e:	4013      	ands	r3, r2
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	6852      	ldr	r2, [r2, #4]
 800882c:	4937      	ldr	r1, [pc, #220]	; (800890c <UART_AdvFeatureConfig+0x13c>)
 800882e:	4011      	ands	r1, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008834:	430a      	orrs	r2, r1
 8008836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	2208      	movs	r2, #8
 800883e:	4013      	ands	r3, r2
 8008840:	d00a      	beq.n	8008858 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	6852      	ldr	r2, [r2, #4]
 800884c:	4930      	ldr	r1, [pc, #192]	; (8008910 <UART_AdvFeatureConfig+0x140>)
 800884e:	4011      	ands	r1, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008854:	430a      	orrs	r2, r1
 8008856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	2210      	movs	r2, #16
 800885e:	4013      	ands	r3, r2
 8008860:	d00a      	beq.n	8008878 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6812      	ldr	r2, [r2, #0]
 800886a:	6892      	ldr	r2, [r2, #8]
 800886c:	4929      	ldr	r1, [pc, #164]	; (8008914 <UART_AdvFeatureConfig+0x144>)
 800886e:	4011      	ands	r1, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008874:	430a      	orrs	r2, r1
 8008876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2220      	movs	r2, #32
 800887e:	4013      	ands	r3, r2
 8008880:	d00a      	beq.n	8008898 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	6892      	ldr	r2, [r2, #8]
 800888c:	4922      	ldr	r1, [pc, #136]	; (8008918 <UART_AdvFeatureConfig+0x148>)
 800888e:	4011      	ands	r1, r2
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008894:	430a      	orrs	r2, r1
 8008896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2240      	movs	r2, #64	; 0x40
 800889e:	4013      	ands	r3, r2
 80088a0:	d01b      	beq.n	80088da <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	6852      	ldr	r2, [r2, #4]
 80088ac:	491b      	ldr	r1, [pc, #108]	; (800891c <UART_AdvFeatureConfig+0x14c>)
 80088ae:	4011      	ands	r1, r2
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088bc:	2380      	movs	r3, #128	; 0x80
 80088be:	035b      	lsls	r3, r3, #13
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d10a      	bne.n	80088da <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	6852      	ldr	r2, [r2, #4]
 80088ce:	4914      	ldr	r1, [pc, #80]	; (8008920 <UART_AdvFeatureConfig+0x150>)
 80088d0:	4011      	ands	r1, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2280      	movs	r2, #128	; 0x80
 80088e0:	4013      	ands	r3, r2
 80088e2:	d00a      	beq.n	80088fa <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6812      	ldr	r2, [r2, #0]
 80088ec:	6852      	ldr	r2, [r2, #4]
 80088ee:	490d      	ldr	r1, [pc, #52]	; (8008924 <UART_AdvFeatureConfig+0x154>)
 80088f0:	4011      	ands	r1, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088f6:	430a      	orrs	r2, r1
 80088f8:	605a      	str	r2, [r3, #4]
  }
}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	46bd      	mov	sp, r7
 80088fe:	b002      	add	sp, #8
 8008900:	bd80      	pop	{r7, pc}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	fffdffff 	.word	0xfffdffff
 8008908:	fffeffff 	.word	0xfffeffff
 800890c:	fffbffff 	.word	0xfffbffff
 8008910:	ffff7fff 	.word	0xffff7fff
 8008914:	ffffefff 	.word	0xffffefff
 8008918:	ffffdfff 	.word	0xffffdfff
 800891c:	ffefffff 	.word	0xffefffff
 8008920:	ff9fffff 	.word	0xff9fffff
 8008924:	fff7ffff 	.word	0xfff7ffff

08008928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af02      	add	r7, sp, #8
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800893a:	f7fc f98d 	bl	8004c58 <HAL_GetTick>
 800893e:	0003      	movs	r3, r0
 8008940:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2208      	movs	r2, #8
 800894a:	4013      	ands	r3, r2
 800894c:	2b08      	cmp	r3, #8
 800894e:	d10d      	bne.n	800896c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	2380      	movs	r3, #128	; 0x80
 8008954:	0399      	lsls	r1, r3, #14
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <UART_CheckIdleState+0x90>)
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	0013      	movs	r3, r2
 800895e:	2200      	movs	r2, #0
 8008960:	f000 f82c 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 8008964:	1e03      	subs	r3, r0, #0
 8008966:	d001      	beq.n	800896c <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e021      	b.n	80089b0 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2204      	movs	r2, #4
 8008974:	4013      	ands	r3, r2
 8008976:	2b04      	cmp	r3, #4
 8008978:	d10d      	bne.n	8008996 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	03d9      	lsls	r1, r3, #15
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <UART_CheckIdleState+0x90>)
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	0013      	movs	r3, r2
 8008988:	2200      	movs	r2, #0
 800898a:	f000 f817 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 800898e:	1e03      	subs	r3, r0, #0
 8008990:	d001      	beq.n	8008996 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e00c      	b.n	80089b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2269      	movs	r2, #105	; 0x69
 800899a:	2120      	movs	r1, #32
 800899c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	226a      	movs	r2, #106	; 0x6a
 80089a2:	2120      	movs	r1, #32
 80089a4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2268      	movs	r2, #104	; 0x68
 80089aa:	2100      	movs	r1, #0
 80089ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b004      	add	sp, #16
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	01ffffff 	.word	0x01ffffff

080089bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	1dfb      	adds	r3, r7, #7
 80089ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089cc:	e02b      	b.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	3301      	adds	r3, #1
 80089d2:	d028      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80089da:	f7fc f93d 	bl	8004c58 <HAL_GetTick>
 80089de:	0002      	movs	r2, r0
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d91d      	bls.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	4916      	ldr	r1, [pc, #88]	; (8008a50 <UART_WaitOnFlagUntilTimeout+0x94>)
 80089f6:	400a      	ands	r2, r1
 80089f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	6812      	ldr	r2, [r2, #0]
 8008a02:	6892      	ldr	r2, [r2, #8]
 8008a04:	2101      	movs	r1, #1
 8008a06:	438a      	bics	r2, r1
 8008a08:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2269      	movs	r2, #105	; 0x69
 8008a0e:	2120      	movs	r1, #32
 8008a10:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	226a      	movs	r2, #106	; 0x6a
 8008a16:	2120      	movs	r1, #32
 8008a18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2268      	movs	r2, #104	; 0x68
 8008a1e:	2100      	movs	r1, #0
 8008a20:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e00f      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	401a      	ands	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	425a      	negs	r2, r3
 8008a36:	4153      	adcs	r3, r2
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	001a      	movs	r2, r3
 8008a3c:	1dfb      	adds	r3, r7, #7
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d0c4      	beq.n	80089ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	0018      	movs	r0, r3
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	b004      	add	sp, #16
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	46c0      	nop			; (mov r8, r8)
 8008a50:	fffffe5f 	.word	0xfffffe5f

08008a54 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs( ms );
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f000 fcb2 	bl	80093c8 <HW_RTC_DelayMs>

}
 8008a64:	46c0      	nop			; (mov r8, r8)
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b002      	add	sp, #8
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <LowPower_Disable>:
 * \brief API to set flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t  
 */
void LowPower_Disable( e_LOW_POWER_State_Id_t state )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	0002      	movs	r2, r0
 8008a74:	1dfb      	adds	r3, r7, #7
 8008a76:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008a78:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 8008a80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a82:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State |= state;
 8008a84:	1dfb      	adds	r3, r7, #7
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <LowPower_Disable+0x38>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <LowPower_Disable+0x38>)
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK( );
}
 8008a9c:	46c0      	nop			; (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b006      	add	sp, #24
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200001cc 	.word	0x200001cc

08008aa8 <LowPower_Enable>:
 * \brief API to reset flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t 
 */
void LowPower_Enable( e_LOW_POWER_State_Id_t state )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	0002      	movs	r2, r0
 8008ab0:	1dfb      	adds	r3, r7, #7
 8008ab2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aba:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 8008abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008abe:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State &= ~state;
 8008ac0:	1dfb      	adds	r3, r7, #7
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	001a      	movs	r2, r3
 8008ac8:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <LowPower_Enable+0x3c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	401a      	ands	r2, r3
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <LowPower_Enable+0x3c>)
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f383 8810 	msr	PRIMASK, r3
  
  RESTORE_PRIMASK( );
}
 8008adc:	46c0      	nop			; (mov r8, r8)
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	b006      	add	sp, #24
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	200001cc 	.word	0x200001cc

08008ae8 <LowPower_GetState>:
 * \note When flag is 0, low power mode is allowed
 * \param [IN] state
 * \retval flag state 
 */
uint32_t LowPower_GetState( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  return LowPower_State;
 8008aec:	4b02      	ldr	r3, [pc, #8]	; (8008af8 <LowPower_GetState+0x10>)
 8008aee:	681b      	ldr	r3, [r3, #0]
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	200001cc 	.word	0x200001cc

08008afc <TimerInit>:
static bool TimerExists( TimerEvent_t *obj );



void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	605a      	str	r2, [r3, #4]
  obj->IsRunning = false;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	721a      	strb	r2, [r3, #8]
  obj->Callback = callback;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	60da      	str	r2, [r3, #12]
  obj->Next = NULL;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	611a      	str	r2, [r3, #16]
}
 8008b24:	46c0      	nop			; (mov r8, r8)
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b002      	add	sp, #8
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b38:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b3e:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 8008b40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b42:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <TimerStart+0x2a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f000 f97b 	bl	8008e48 <TimerExists>
 8008b52:	1e03      	subs	r3, r0, #0
 8008b54:	d005      	beq.n	8008b62 <TimerStart+0x36>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8008b60:	e030      	b.n	8008bc4 <TimerStart+0x98>
  }
  obj->Timestamp = obj->ReloadValue;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
  obj->IsRunning = false;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == NULL )
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <TimerStart+0xa0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <TimerStart+0x5a>
  {
    HW_RTC_SetTimerContext( );
 8008b78:	f000 fc46 	bl	8009408 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	0018      	movs	r0, r3
 8008b80:	f000 f854 	bl	8008c2c <TimerInsertNewHeadTimer>
 8008b84:	e019      	b.n	8008bba <TimerStart+0x8e>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8008b86:	f000 fbcf 	bl	8009328 <HW_RTC_GetTimerElapsedTime>
 8008b8a:	0003      	movs	r3, r0
 8008b8c:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	18d2      	adds	r2, r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <TimerStart+0xa0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d204      	bcs.n	8008bb2 <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	0018      	movs	r0, r3
 8008bac:	f000 f83e 	bl	8008c2c <TimerInsertNewHeadTimer>
 8008bb0:	e003      	b.n	8008bba <TimerStart+0x8e>
    }
    else
    {
      TimerInsertTimer( obj);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f000 f80b 	bl	8008bd0 <TimerInsertTimer>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b008      	add	sp, #32
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	200001d0 	.word	0x200001d0

08008bd0 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8008bd8:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <TimerInsertTimer+0x58>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <TimerInsertTimer+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8008be6:	e012      	b.n	8008c0e <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d905      	bls.n	8008c00 <TimerInsertTimer+0x30>
    {
        cur = next;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	60bb      	str	r3, [r7, #8]
 8008bfe:	e006      	b.n	8008c0e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	611a      	str	r2, [r3, #16]
        obj->Next = next;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	611a      	str	r2, [r3, #16]
        return;
 8008c0c:	e009      	b.n	8008c22 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e8      	bne.n	8008be8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	611a      	str	r2, [r3, #16]
}
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b004      	add	sp, #16
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	200001d0 	.word	0x200001d0

08008c2c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8008c34:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <TimerInsertNewHeadTimer+0x38>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsRunning = false;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	721a      	strb	r2, [r3, #8]
  }

  obj->Next = cur;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	611a      	str	r2, [r3, #16]
  TimerListHead = obj;
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <TimerInsertNewHeadTimer+0x38>)
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8008c52:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <TimerInsertNewHeadTimer+0x38>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	0018      	movs	r0, r3
 8008c58:	f000 f937 	bl	8008eca <TimerSetTimeout>
}
 8008c5c:	46c0      	nop			; (mov r8, r8)
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b004      	add	sp, #16
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200001d0 	.word	0x200001d0

08008c68 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 8008c6e:	f000 fbe1 	bl	8009434 <HW_RTC_GetTimerContext>
 8008c72:	0003      	movs	r3, r0
 8008c74:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 8008c76:	f000 fbc7 	bl	8009408 <HW_RTC_SetTimerContext>
 8008c7a:	0003      	movs	r3, r0
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	60bb      	str	r3, [r7, #8]
  
  /* update timeStamp based upon new Time Reference*/
  /* beacuse delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8008c86:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <TimerIrqHandler+0xec>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01c      	beq.n	8008cc8 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8008c8e:	4b31      	ldr	r3, [pc, #196]	; (8008d54 <TimerIrqHandler+0xec>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e014      	b.n	8008cc0 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d906      	bls.n	8008cb4 <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	1ad2      	subs	r2, r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	e002      	b.n	8008cba <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e6      	bne.n	8008c96 <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 8008cc8:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <TimerIrqHandler+0xec>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d020      	beq.n	8008d12 <TimerIrqHandler+0xaa>
  {
    cur = TimerListHead;
 8008cd0:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <TimerIrqHandler+0xec>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 8008cd6:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <TimerIrqHandler+0xec>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691a      	ldr	r2, [r3, #16]
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <TimerIrqHandler+0xec>)
 8008cde:	601a      	str	r2, [r3, #0]
    exec_cb( cur->Callback );
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d100      	bne.n	8008cea <TimerIrqHandler+0x82>
 8008ce8:	e7fe      	b.n	8008ce8 <TimerIrqHandler+0x80>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4798      	blx	r3
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8008cf0:	e00f      	b.n	8008d12 <TimerIrqHandler+0xaa>
  {
   cur = TimerListHead;
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <TimerIrqHandler+0xec>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 8008cf8:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <TimerIrqHandler+0xec>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691a      	ldr	r2, [r3, #16]
 8008cfe:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <TimerIrqHandler+0xec>)
 8008d00:	601a      	str	r2, [r3, #0]
   exec_cb( cur->Callback );
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d100      	bne.n	8008d0c <TimerIrqHandler+0xa4>
 8008d0a:	e7fe      	b.n	8008d0a <TimerIrqHandler+0xa2>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8008d12:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <TimerIrqHandler+0xec>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <TimerIrqHandler+0xc2>
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <TimerIrqHandler+0xec>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681c      	ldr	r4, [r3, #0]
 8008d20:	f000 fb02 	bl	8009328 <HW_RTC_GetTimerElapsedTime>
 8008d24:	0003      	movs	r3, r0
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d3e3      	bcc.n	8008cf2 <TimerIrqHandler+0x8a>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <TimerIrqHandler+0xec>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00c      	beq.n	8008d4c <TimerIrqHandler+0xe4>
 8008d32:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <TimerIrqHandler+0xec>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	7a1b      	ldrb	r3, [r3, #8]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	4053      	eors	r3, r2
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d004      	beq.n	8008d4c <TimerIrqHandler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <TimerIrqHandler+0xec>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	0018      	movs	r0, r3
 8008d48:	f000 f8bf 	bl	8008eca <TimerSetTimeout>
  }
}
 8008d4c:	46c0      	nop			; (mov r8, r8)
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b007      	add	sp, #28
 8008d52:	bd90      	pop	{r4, r7, pc}
 8008d54:	200001d0 	.word	0x200001d0

08008d58 <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d60:	f3ef 8310 	mrs	r3, PRIMASK
 8008d64:	613b      	str	r3, [r7, #16]
  return(result);
 8008d66:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8008d68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d6a:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8008d6c:	4b35      	ldr	r3, [pc, #212]	; (8008e44 <TimerStop+0xec>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8008d72:	4b34      	ldr	r3, [pc, #208]	; (8008e44 <TimerStop+0xec>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8008d78:	4b32      	ldr	r3, [pc, #200]	; (8008e44 <TimerStop+0xec>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <TimerStop+0x2e>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <TimerStop+0x3a>
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8008d90:	e054      	b.n	8008e3c <TimerStop+0xe4>
  }

  if( TimerListHead == obj ) // Stop the Head                  
 8008d92:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <TimerStop+0xec>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d147      	bne.n	8008e2c <TimerStop+0xd4>
  {
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8008d9c:	4b29      	ldr	r3, [pc, #164]	; (8008e44 <TimerStop+0xec>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	7a1b      	ldrb	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d019      	beq.n	8008dda <TimerStop+0x82>
    {    
      if( TimerListHead->Next != NULL )
 8008da6:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <TimerStop+0xec>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <TimerStop+0x76>
      {
        TimerListHead->IsRunning = false;
 8008db0:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <TimerStop+0xec>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2200      	movs	r2, #0
 8008db6:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 8008db8:	4b22      	ldr	r3, [pc, #136]	; (8008e44 <TimerStop+0xec>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	691a      	ldr	r2, [r3, #16]
 8008dbe:	4b21      	ldr	r3, [pc, #132]	; (8008e44 <TimerStop+0xec>)
 8008dc0:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 8008dc2:	4b20      	ldr	r3, [pc, #128]	; (8008e44 <TimerStop+0xec>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f000 f87f 	bl	8008eca <TimerSetTimeout>
 8008dcc:	e031      	b.n	8008e32 <TimerStop+0xda>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8008dce:	f000 fad3 	bl	8009378 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <TimerStop+0xec>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e02b      	b.n	8008e32 <TimerStop+0xda>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 8008dda:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <TimerStop+0xec>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <TimerStop+0x98>
      {
        TimerListHead = TimerListHead->Next;
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <TimerStop+0xec>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691a      	ldr	r2, [r3, #16]
 8008dea:	4b16      	ldr	r3, [pc, #88]	; (8008e44 <TimerStop+0xec>)
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e020      	b.n	8008e32 <TimerStop+0xda>
      }
      else
      {
        TimerListHead = NULL;
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <TimerStop+0xec>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	e01c      	b.n	8008e32 <TimerStop+0xda>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d110      	bne.n	8008e22 <TimerStop+0xca>
      {
        if( cur->Next != NULL )
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d006      	beq.n	8008e16 <TimerStop+0xbe>
        {
          cur = cur->Next;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	611a      	str	r2, [r3, #16]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8008e14:	e00d      	b.n	8008e32 <TimerStop+0xda>
          cur = NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	611a      	str	r2, [r3, #16]
        break;
 8008e20:	e007      	b.n	8008e32 <TimerStop+0xda>
      }
      else
      {
        prev = cur;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1e2      	bne.n	8008df8 <TimerStop+0xa0>
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	60bb      	str	r3, [r7, #8]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b008      	add	sp, #32
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	46c0      	nop			; (mov r8, r8)
 8008e44:	200001d0 	.word	0x200001d0

08008e48 <TimerExists>:
  
static bool TimerExists( TimerEvent_t *obj )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <TimerExists+0x34>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8008e56:	e008      	b.n	8008e6a <TimerExists+0x22>
  {
    if( cur == obj )
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d101      	bne.n	8008e64 <TimerExists+0x1c>
    {
      return true;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e006      	b.n	8008e72 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1f3      	bne.n	8008e58 <TimerExists+0x10>
  }
  return false;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	0018      	movs	r0, r3
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b004      	add	sp, #16
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	46c0      	nop			; (mov r8, r8)
 8008e7c:	200001d0 	.word	0x200001d0

08008e80 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	0018      	movs	r0, r3
 8008e92:	f000 fa01 	bl	8009298 <HW_RTC_ms2Tick>
 8008e96:	0003      	movs	r3, r0
 8008e98:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f7ff ff5b 	bl	8008d58 <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 8008ea2:	f000 f9f3 	bl	800928c <HW_RTC_GetMinimumTimeout>
 8008ea6:	0003      	movs	r3, r0
 8008ea8:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d201      	bcs.n	8008eb6 <TimerSetValue+0x36>
  {
    ticks = minValue;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]
}
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	b004      	add	sp, #16
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8008eca:	b590      	push	{r4, r7, lr}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8008ed2:	f000 f9db 	bl	800928c <HW_RTC_GetMinimumTimeout>
 8008ed6:	0003      	movs	r3, r0
 8008ed8:	60fb      	str	r3, [r7, #12]
  obj->IsRunning = true; 
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	721a      	strb	r2, [r3, #8]

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681c      	ldr	r4, [r3, #0]
 8008ee4:	f000 fa20 	bl	8009328 <HW_RTC_GetTimerElapsedTime>
 8008ee8:	0002      	movs	r2, r0
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	18d3      	adds	r3, r2, r3
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	d206      	bcs.n	8008f00 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8008ef2:	f000 fa19 	bl	8009328 <HW_RTC_GetTimerElapsedTime>
 8008ef6:	0002      	movs	r2, r0
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	18d2      	adds	r2, r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	0018      	movs	r0, r3
 8008f06:	f000 f9df 	bl	80092c8 <HW_RTC_SetAlarm>
}
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	b005      	add	sp, #20
 8008f10:	bd90      	pop	{r4, r7, pc}

08008f12 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	1dbb      	adds	r3, r7, #6
 8008f1e:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8008f20:	e007      	b.n	8008f32 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	60fa      	str	r2, [r7, #12]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	1c51      	adds	r1, r2, #1
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	7812      	ldrb	r2, [r2, #0]
 8008f30:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8008f32:	1dbb      	adds	r3, r7, #6
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	1dba      	adds	r2, r7, #6
 8008f38:	1e59      	subs	r1, r3, #1
 8008f3a:	8011      	strh	r1, [r2, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f0      	bne.n	8008f22 <memcpy1+0x10>
    }
}
 8008f40:	46c0      	nop			; (mov r8, r8)
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b004      	add	sp, #16
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
  DBG_PRINTF("Error_Handler\n");
  while(1);
 8008f4c:	e7fe      	b.n	8008f4c <Error_Handler+0x4>
	...

08008f50 <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	230a      	movs	r3, #10
 8008f5c:	18fb      	adds	r3, r7, r3
 8008f5e:	1c0a      	adds	r2, r1, #0
 8008f60:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a30      	ldr	r2, [pc, #192]	; (8009028 <HW_GPIO_Init+0xd8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d01b      	beq.n	8008fa2 <HW_GPIO_Init+0x52>
 8008f6a:	4a2f      	ldr	r2, [pc, #188]	; (8009028 <HW_GPIO_Init+0xd8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d804      	bhi.n	8008f7a <HW_GPIO_Init+0x2a>
 8008f70:	22a0      	movs	r2, #160	; 0xa0
 8008f72:	05d2      	lsls	r2, r2, #23
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d007      	beq.n	8008f88 <HW_GPIO_Init+0x38>
 8008f78:	e03a      	b.n	8008ff0 <HW_GPIO_Init+0xa0>
 8008f7a:	4a2c      	ldr	r2, [pc, #176]	; (800902c <HW_GPIO_Init+0xdc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d01d      	beq.n	8008fbc <HW_GPIO_Init+0x6c>
 8008f80:	4a2b      	ldr	r2, [pc, #172]	; (8009030 <HW_GPIO_Init+0xe0>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d027      	beq.n	8008fd6 <HW_GPIO_Init+0x86>
 8008f86:	e033      	b.n	8008ff0 <HW_GPIO_Init+0xa0>
 8008f88:	4b2a      	ldr	r3, [pc, #168]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008f8a:	4a2a      	ldr	r2, [pc, #168]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008f8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f8e:	2101      	movs	r1, #1
 8008f90:	430a      	orrs	r2, r1
 8008f92:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f94:	4b27      	ldr	r3, [pc, #156]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	2201      	movs	r2, #1
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	e032      	b.n	8009008 <HW_GPIO_Init+0xb8>
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fa4:	4a23      	ldr	r2, [pc, #140]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fa8:	2102      	movs	r1, #2
 8008faa:	430a      	orrs	r2, r1
 8008fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fae:	4b21      	ldr	r3, [pc, #132]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	e025      	b.n	8009008 <HW_GPIO_Init+0xb8>
 8008fbc:	4b1d      	ldr	r3, [pc, #116]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fc2:	2104      	movs	r1, #4
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fc8:	4b1a      	ldr	r3, [pc, #104]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	2204      	movs	r2, #4
 8008fce:	4013      	ands	r3, r2
 8008fd0:	61fb      	str	r3, [r7, #28]
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	e018      	b.n	8009008 <HW_GPIO_Init+0xb8>
 8008fd6:	4b17      	ldr	r3, [pc, #92]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fd8:	4a16      	ldr	r2, [pc, #88]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fdc:	2108      	movs	r1, #8
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fe2:	4b14      	ldr	r3, [pc, #80]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	2208      	movs	r2, #8
 8008fe8:	4013      	ands	r3, r2
 8008fea:	61bb      	str	r3, [r7, #24]
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	e00b      	b.n	8009008 <HW_GPIO_Init+0xb8>
 8008ff0:	4b10      	ldr	r3, [pc, #64]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <HW_GPIO_Init+0xe4>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	2280      	movs	r2, #128	; 0x80
 8009002:	4013      	ands	r3, r2
 8009004:	617b      	str	r3, [r7, #20]
 8009006:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8009008:	230a      	movs	r3, #10
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	881a      	ldrh	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	0011      	movs	r1, r2
 8009018:	0018      	movs	r0, r3
 800901a:	f7fc fb21 	bl	8005660 <HAL_GPIO_Init>
}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	46bd      	mov	sp, r7
 8009022:	b00a      	add	sp, #40	; 0x28
 8009024:	bd80      	pop	{r7, pc}
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	50000400 	.word	0x50000400
 800902c:	50000800 	.word	0x50000800
 8009030:	50000c00 	.word	0x50000c00
 8009034:	40021000 	.word	0x40021000

08009038 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 8009038:	b590      	push	{r4, r7, lr}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	230a      	movs	r3, #10
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	1c0a      	adds	r2, r1, #0
 800904a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;
  
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800904c:	230a      	movs	r3, #10
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	0018      	movs	r0, r3
 8009054:	f000 f85e 	bl	8009114 <HW_GPIO_GetBitPos>
 8009058:	0003      	movs	r3, r0
 800905a:	617b      	str	r3, [r7, #20]
  
  if ( irqHandler != NULL)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d01e      	beq.n	80090a0 <HW_GPIO_SetIrq+0x68>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <HW_GPIO_SetIrq+0x70>)
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	0092      	lsls	r2, r2, #2
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 800906c:	2313      	movs	r3, #19
 800906e:	18fc      	adds	r4, r7, r3
 8009070:	230a      	movs	r3, #10
 8009072:	18fb      	adds	r3, r7, r3
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	0018      	movs	r0, r3
 8009078:	f000 fe5b 	bl	8009d32 <MSP_GetIRQn>
 800907c:	0003      	movs	r3, r0
 800907e:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	2313      	movs	r3, #19
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	b25b      	sxtb	r3, r3
 800908a:	2200      	movs	r2, #0
 800908c:	0018      	movs	r0, r3
 800908e:	f7fc faa1 	bl	80055d4 <HAL_NVIC_SetPriority>
    
    HAL_NVIC_EnableIRQ( IRQnb );
 8009092:	2313      	movs	r3, #19
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b25b      	sxtb	r3, r3
 800909a:	0018      	movs	r0, r3
 800909c:	f7fc fab0 	bl	8005600 <HAL_NVIC_EnableIRQ>
  }
}
 80090a0:	46c0      	nop			; (mov r8, r8)
 80090a2:	46bd      	mov	sp, r7
 80090a4:	b007      	add	sp, #28
 80090a6:	bd90      	pop	{r4, r7, pc}
 80090a8:	200001d4 	.word	0x200001d4

080090ac <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	0002      	movs	r2, r0
 80090b4:	1dbb      	adds	r3, r7, #6
 80090b6:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 80090b8:	1dbb      	adds	r3, r7, #6
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 f829 	bl	8009114 <HW_GPIO_GetBitPos>
 80090c2:	0003      	movs	r3, r0
 80090c4:	60fb      	str	r3, [r7, #12]
  
  if ( GpioIrq[ BitPos ]  != NULL)
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <HW_GPIO_IrqHandler+0x38>)
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	58d3      	ldr	r3, [r2, r3]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <HW_GPIO_IrqHandler+0x30>
  {
    GpioIrq[ BitPos ] ( );
 80090d2:	4b04      	ldr	r3, [pc, #16]	; (80090e4 <HW_GPIO_IrqHandler+0x38>)
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	0092      	lsls	r2, r2, #2
 80090d8:	58d3      	ldr	r3, [r2, r3]
 80090da:	4798      	blx	r3
  }
}
 80090dc:	46c0      	nop			; (mov r8, r8)
 80090de:	46bd      	mov	sp, r7
 80090e0:	b004      	add	sp, #16
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	200001d4 	.word	0x200001d4

080090e8 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	230a      	movs	r3, #10
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	1c0a      	adds	r2, r1, #0
 80090f8:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	230a      	movs	r3, #10
 8009100:	18fb      	adds	r3, r7, r3
 8009102:	8819      	ldrh	r1, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	0018      	movs	r0, r3
 8009108:	f7fc fc28 	bl	800595c <HAL_GPIO_WritePin>
}
 800910c:	46c0      	nop			; (mov r8, r8)
 800910e:	46bd      	mov	sp, r7
 8009110:	b004      	add	sp, #16
 8009112:	bd80      	pop	{r7, pc}

08009114 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	0002      	movs	r2, r0
 800911c:	1dbb      	adds	r3, r7, #6
 800911e:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos=0;
 8009120:	230f      	movs	r3, #15
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8009128:	1dbb      	adds	r3, r7, #6
 800912a:	881a      	ldrh	r2, [r3, #0]
 800912c:	23ff      	movs	r3, #255	; 0xff
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	4013      	ands	r3, r2
 8009132:	d007      	beq.n	8009144 <HW_GPIO_GetBitPos+0x30>
 8009134:	230f      	movs	r3, #15
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	220f      	movs	r2, #15
 800913a:	18ba      	adds	r2, r7, r2
 800913c:	7812      	ldrb	r2, [r2, #0]
 800913e:	2108      	movs	r1, #8
 8009140:	430a      	orrs	r2, r1
 8009142:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8009144:	1dbb      	adds	r3, r7, #6
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <HW_GPIO_GetBitPos+0x8c>)
 800914a:	4013      	ands	r3, r2
 800914c:	d007      	beq.n	800915e <HW_GPIO_GetBitPos+0x4a>
 800914e:	230f      	movs	r3, #15
 8009150:	18fb      	adds	r3, r7, r3
 8009152:	220f      	movs	r2, #15
 8009154:	18ba      	adds	r2, r7, r2
 8009156:	7812      	ldrb	r2, [r2, #0]
 8009158:	2104      	movs	r1, #4
 800915a:	430a      	orrs	r2, r1
 800915c:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800915e:	1dbb      	adds	r3, r7, #6
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <HW_GPIO_GetBitPos+0x90>)
 8009164:	4013      	ands	r3, r2
 8009166:	d007      	beq.n	8009178 <HW_GPIO_GetBitPos+0x64>
 8009168:	230f      	movs	r3, #15
 800916a:	18fb      	adds	r3, r7, r3
 800916c:	220f      	movs	r2, #15
 800916e:	18ba      	adds	r2, r7, r2
 8009170:	7812      	ldrb	r2, [r2, #0]
 8009172:	2102      	movs	r1, #2
 8009174:	430a      	orrs	r2, r1
 8009176:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8009178:	1dbb      	adds	r3, r7, #6
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	4a0a      	ldr	r2, [pc, #40]	; (80091a8 <HW_GPIO_GetBitPos+0x94>)
 800917e:	4013      	ands	r3, r2
 8009180:	d007      	beq.n	8009192 <HW_GPIO_GetBitPos+0x7e>
 8009182:	230f      	movs	r3, #15
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	220f      	movs	r2, #15
 8009188:	18ba      	adds	r2, r7, r2
 800918a:	7812      	ldrb	r2, [r2, #0]
 800918c:	2101      	movs	r1, #1
 800918e:	430a      	orrs	r2, r1
 8009190:	701a      	strb	r2, [r3, #0]
  
  return PinPos;
 8009192:	230f      	movs	r3, #15
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	781b      	ldrb	r3, [r3, #0]
}
 8009198:	0018      	movs	r0, r3
 800919a:	46bd      	mov	sp, r7
 800919c:	b004      	add	sp, #16
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	0000f0f0 	.word	0x0000f0f0
 80091a4:	0000cccc 	.word	0x0000cccc
 80091a8:	0000aaaa 	.word	0x0000aaaa

080091ac <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  if( HW_RTC_Initalized == false )
 80091b0:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <HW_RTC_Init+0x2c>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2201      	movs	r2, #1
 80091b6:	4053      	eors	r3, r2
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d008      	beq.n	80091d0 <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig( );
 80091be:	f000 f80d 	bl	80091dc <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig( );
 80091c2:	f000 f941 	bl	8009448 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext( );
 80091c6:	f000 f91f 	bl	8009408 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 80091ca:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <HW_RTC_Init+0x2c>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	701a      	strb	r2, [r3, #0]
  }
}
 80091d0:	46c0      	nop			; (mov r8, r8)
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	20000214 	.word	0x20000214

080091dc <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig( void )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 80091e2:	4b27      	ldr	r3, [pc, #156]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 80091e4:	4a27      	ldr	r2, [pc, #156]	; (8009284 <HW_RTC_SetConfig+0xa8>)
 80091e6:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 80091ee:	4b24      	ldr	r3, [pc, #144]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 80091f0:	221f      	movs	r2, #31
 80091f2:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 80091f4:	4b22      	ldr	r3, [pc, #136]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 80091f6:	4a24      	ldr	r2, [pc, #144]	; (8009288 <HW_RTC_SetConfig+0xac>)
 80091f8:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 80091fa:	4b21      	ldr	r3, [pc, #132]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009200:	4b1f      	ldr	r3, [pc, #124]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 8009202:	2200      	movs	r2, #0
 8009204:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009206:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 8009208:	2200      	movs	r2, #0
 800920a:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init( &RtcHandle );
 800920c:	4b1c      	ldr	r3, [pc, #112]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 800920e:	0018      	movs	r0, r3
 8009210:	f7fd fd12 	bl	8006c38 <HAL_RTC_Init>
  
  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 16;
 8009214:	003b      	movs	r3, r7
 8009216:	2210      	movs	r2, #16
 8009218:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800921a:	003b      	movs	r3, r7
 800921c:	2201      	movs	r2, #1
 800921e:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8009220:	003b      	movs	r3, r7
 8009222:	2201      	movs	r2, #1
 8009224:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8009226:	003b      	movs	r3, r7
 8009228:	2201      	movs	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 800922c:	0039      	movs	r1, r7
 800922e:	4b14      	ldr	r3, [pc, #80]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 8009230:	2200      	movs	r2, #0
 8009232:	0018      	movs	r0, r3
 8009234:	f7fd feb0 	bl	8006f98 <HAL_RTC_SetDate>
  
  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8009238:	1d3b      	adds	r3, r7, #4
 800923a:	2200      	movs	r2, #0
 800923c:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 800923e:	1d3b      	adds	r3, r7, #4
 8009240:	2200      	movs	r2, #0
 8009242:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8009244:	1d3b      	adds	r3, r7, #4
 8009246:	2200      	movs	r2, #0
 8009248:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 800924a:	1d3b      	adds	r3, r7, #4
 800924c:	2200      	movs	r2, #0
 800924e:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	2200      	movs	r2, #0
 8009254:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8009256:	1d3b      	adds	r3, r7, #4
 8009258:	2200      	movs	r2, #0
 800925a:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800925c:	1d3b      	adds	r3, r7, #4
 800925e:	2200      	movs	r2, #0
 8009260:	60da      	str	r2, [r3, #12]
  
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8009262:	1d39      	adds	r1, r7, #4
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 8009266:	2200      	movs	r2, #0
 8009268:	0018      	movs	r0, r3
 800926a:	f7fd fd69 	bl	8006d40 <HAL_RTC_SetTime>
  
 /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <HW_RTC_SetConfig+0xa4>)
 8009270:	0018      	movs	r0, r3
 8009272:	f7fe fa94 	bl	800779e <HAL_RTCEx_EnableBypassShadow>
}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	46bd      	mov	sp, r7
 800927a:	b006      	add	sp, #24
 800927c:	bd80      	pop	{r7, pc}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	20000218 	.word	0x20000218
 8009284:	40002800 	.word	0x40002800
 8009288:	000003ff 	.word	0x000003ff

0800928c <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 8009290:	2303      	movs	r3, #3
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMicroSec )
{
 8009298:	b5b0      	push	{r4, r5, r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	000a      	movs	r2, r1
 80092a4:	2100      	movs	r1, #0
 80092a6:	000b      	movs	r3, r1
 80092a8:	0e51      	lsrs	r1, r2, #25
 80092aa:	01dd      	lsls	r5, r3, #7
 80092ac:	430d      	orrs	r5, r1
 80092ae:	01d4      	lsls	r4, r2, #7
 80092b0:	227d      	movs	r2, #125	; 0x7d
 80092b2:	2300      	movs	r3, #0
 80092b4:	0020      	movs	r0, r4
 80092b6:	0029      	movs	r1, r5
 80092b8:	f7f7 f8da 	bl	8000470 <__aeabi_uldivmod>
 80092bc:	0003      	movs	r3, r0
 80092be:	000c      	movs	r4, r1
}
 80092c0:	0018      	movs	r0, r3
 80092c2:	46bd      	mov	sp, r7
 80092c4:	b002      	add	sp, #8
 80092c6:	bdb0      	pop	{r4, r5, r7, pc}

080092c8 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 80092c8:	b590      	push	{r4, r7, lr}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 80092d0:	4b14      	ldr	r3, [pc, #80]	; (8009324 <HW_RTC_SetAlarm+0x5c>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	5e9b      	ldrsh	r3, [r3, r2]
 80092d6:	3303      	adds	r3, #3
 80092d8:	001c      	movs	r4, r3
 80092da:	f000 f825 	bl	8009328 <HW_RTC_GetTimerElapsedTime>
 80092de:	0002      	movs	r2, r0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	429c      	cmp	r4, r3
 80092e6:	d203      	bcs.n	80092f0 <HW_RTC_SetAlarm+0x28>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 80092e8:	2001      	movs	r0, #1
 80092ea:	f7ff fbdd 	bl	8008aa8 <LowPower_Enable>
 80092ee:	e002      	b.n	80092f6 <HW_RTC_SetAlarm+0x2e>
  }
  else
  {
    LowPower_Disable( e_LOW_POWER_RTC );
 80092f0:	2001      	movs	r0, #1
 80092f2:	f7ff fbbb 	bl	8008a6c <LowPower_Disable>
  }

  if( LowPower_GetState() == 0 )
 80092f6:	f7ff fbf7 	bl	8008ae8 <LowPower_GetState>
 80092fa:	1e03      	subs	r3, r0, #0
 80092fc:	d109      	bne.n	8009312 <HW_RTC_SetAlarm+0x4a>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 80092fe:	2001      	movs	r0, #1
 8009300:	f7ff fbd2 	bl	8008aa8 <LowPower_Enable>
    timeout = timeout -  McuWakeUpTimeCal;
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <HW_RTC_SetAlarm+0x5c>)
 8009306:	2200      	movs	r2, #0
 8009308:	5e9b      	ldrsh	r3, [r3, r2]
 800930a:	001a      	movs	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	1a9b      	subs	r3, r3, r2
 8009310:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	0018      	movs	r0, r3
 8009316:	f000 f8a5 	bl	8009464 <HW_RTC_StartWakeUpAlarm>
}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	46bd      	mov	sp, r7
 800931e:	b003      	add	sp, #12
 8009320:	bd90      	pop	{r4, r7, pc}
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	20000216 	.word	0x20000216

08009328 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;
  
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800932e:	2308      	movs	r3, #8
 8009330:	18fa      	adds	r2, r7, r3
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	0011      	movs	r1, r2
 8009336:	0018      	movs	r0, r3
 8009338:	f000 fa26 	bl	8009788 <HW_RTC_GetCalendarValue>
 800933c:	0003      	movs	r3, r0
 800933e:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8009340:	4b03      	ldr	r3, [pc, #12]	; (8009350 <HW_RTC_GetTimerElapsedTime+0x28>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	69fa      	ldr	r2, [r7, #28]
 8009346:	1ad3      	subs	r3, r2, r3
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b008      	add	sp, #32
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000264 	.word	0x20000264

08009354 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;
  
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800935a:	2308      	movs	r3, #8
 800935c:	18fa      	adds	r2, r7, r3
 800935e:	1d3b      	adds	r3, r7, #4
 8009360:	0011      	movs	r1, r2
 8009362:	0018      	movs	r0, r3
 8009364:	f000 fa10 	bl	8009788 <HW_RTC_GetCalendarValue>
 8009368:	0003      	movs	r3, r0
 800936a:	61fb      	str	r3, [r7, #28]

  return( CalendarValue );
 800936c:	69fb      	ldr	r3, [r7, #28]
}
 800936e:	0018      	movs	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	b008      	add	sp, #32
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0

  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800937c:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <HW_RTC_StopAlarm+0x2c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <HW_RTC_StopAlarm+0x2c>)
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	68d2      	ldr	r2, [r2, #12]
 8009386:	21ff      	movs	r1, #255	; 0xff
 8009388:	400a      	ands	r2, r1
 800938a:	4907      	ldr	r1, [pc, #28]	; (80093a8 <HW_RTC_StopAlarm+0x30>)
 800938c:	430a      	orrs	r2, r1
 800938e:	60da      	str	r2, [r3, #12]

  /* Disable the Alarm A interrupt */

  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	005a      	lsls	r2, r3, #1
 8009394:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <HW_RTC_StopAlarm+0x2c>)
 8009396:	0011      	movs	r1, r2
 8009398:	0018      	movs	r0, r3
 800939a:	f7fe f87b 	bl	8007494 <HAL_RTC_DeactivateAlarm>
}
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000218 	.word	0x20000218
 80093a8:	fffffe7f 	.word	0xfffffe7f

080093ac <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler ( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* enable low power at irq*/
  LowPower_Enable( e_LOW_POWER_RTC );
 80093b0:	2001      	movs	r0, #1
 80093b2:	f7ff fb79 	bl	8008aa8 <LowPower_Enable>
  
  HAL_RTC_AlarmIRQHandler( &RtcHandle);
 80093b6:	4b03      	ldr	r3, [pc, #12]	; (80093c4 <HW_RTC_IrqHandler+0x18>)
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7fe f90d 	bl	80075d8 <HAL_RTC_AlarmIRQHandler>
}
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000218 	.word	0x20000218

080093c8 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs( uint32_t delay )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick( delay );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	0018      	movs	r0, r3
 80093dc:	f7ff ff5c 	bl	8009298 <HW_RTC_ms2Tick>
 80093e0:	0003      	movs	r3, r0
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue( );
 80093e4:	f7ff ffb6 	bl	8009354 <HW_RTC_GetTimerValue>
 80093e8:	0003      	movs	r3, r0
 80093ea:	60bb      	str	r3, [r7, #8]
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 80093ec:	e000      	b.n	80093f0 <HW_RTC_DelayMs+0x28>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	f7ff ffb0 	bl	8009354 <HW_RTC_GetTimerValue>
 80093f4:	0002      	movs	r2, r0
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d3f6      	bcc.n	80093ee <HW_RTC_DelayMs+0x26>
  {
    __NOP( );
  }
}
 8009400:	46c0      	nop			; (mov r8, r8)
 8009402:	46bd      	mov	sp, r7
 8009404:	b004      	add	sp, #16
 8009406:	bd80      	pop	{r7, pc}

08009408 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800940c:	4a06      	ldr	r2, [pc, #24]	; (8009428 <HW_RTC_SetTimerContext+0x20>)
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <HW_RTC_SetTimerContext+0x24>)
 8009410:	0011      	movs	r1, r2
 8009412:	0018      	movs	r0, r3
 8009414:	f000 f9b8 	bl	8009788 <HW_RTC_GetCalendarValue>
 8009418:	0002      	movs	r2, r0
 800941a:	4b05      	ldr	r3, [pc, #20]	; (8009430 <HW_RTC_SetTimerContext+0x28>)
 800941c:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 800941e:	4b04      	ldr	r3, [pc, #16]	; (8009430 <HW_RTC_SetTimerContext+0x28>)
 8009420:	681b      	ldr	r3, [r3, #0]
}
 8009422:	0018      	movs	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20000268 	.word	0x20000268
 800942c:	2000027c 	.word	0x2000027c
 8009430:	20000264 	.word	0x20000264

08009434 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <HW_RTC_GetTimerContext+0x10>)
 800943a:	681b      	ldr	r3, [r3, #0]
}
 800943c:	0018      	movs	r0, r3
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	20000264 	.word	0x20000264

08009448 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig( void )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800944c:	2380      	movs	r3, #128	; 0x80
 800944e:	005a      	lsls	r2, r3, #1
 8009450:	4b03      	ldr	r3, [pc, #12]	; (8009460 <HW_RTC_SetAlarmConfig+0x18>)
 8009452:	0011      	movs	r1, r2
 8009454:	0018      	movs	r0, r3
 8009456:	f7fe f81d 	bl	8007494 <HAL_RTC_DeactivateAlarm>
}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20000218 	.word	0x20000218

08009464 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8009464:	b590      	push	{r4, r7, lr}
 8009466:	b08d      	sub	sp, #52	; 0x34
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 800946c:	232e      	movs	r3, #46	; 0x2e
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	2200      	movs	r2, #0
 8009472:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8009474:	232c      	movs	r3, #44	; 0x2c
 8009476:	18fb      	adds	r3, r7, r3
 8009478:	2200      	movs	r2, #0
 800947a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 800947c:	232a      	movs	r3, #42	; 0x2a
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	2200      	movs	r2, #0
 8009482:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8009484:	2328      	movs	r3, #40	; 0x28
 8009486:	18fb      	adds	r3, r7, r3
 8009488:	2200      	movs	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 800948c:	2326      	movs	r3, #38	; 0x26
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	2200      	movs	r2, #0
 8009492:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8009494:	2310      	movs	r3, #16
 8009496:	18fa      	adds	r2, r7, r3
 8009498:	4bb2      	ldr	r3, [pc, #712]	; (8009764 <HW_RTC_StartWakeUpAlarm+0x300>)
 800949a:	3304      	adds	r3, #4
 800949c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800949e:	c213      	stmia	r2!, {r0, r1, r4}
 80094a0:	cb03      	ldmia	r3!, {r0, r1}
 80094a2:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80094a4:	230c      	movs	r3, #12
 80094a6:	18fb      	adds	r3, r7, r3
 80094a8:	4aae      	ldr	r2, [pc, #696]	; (8009764 <HW_RTC_StartWakeUpAlarm+0x300>)
 80094aa:	6992      	ldr	r2, [r2, #24]
 80094ac:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm( );
 80094ae:	f7ff ff63 	bl	8009378 <HW_RTC_StopAlarm>
  DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
 80094b2:	4bad      	ldr	r3, [pc, #692]	; (8009768 <HW_RTC_StartWakeUpAlarm+0x304>)
 80094b4:	2280      	movs	r2, #128	; 0x80
 80094b6:	0192      	lsls	r2, r2, #6
 80094b8:	619a      	str	r2, [r3, #24]
  
  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80094ba:	2310      	movs	r3, #16
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	232e      	movs	r3, #46	; 0x2e
 80094c4:	18fb      	adds	r3, r7, r3
 80094c6:	49a9      	ldr	r1, [pc, #676]	; (800976c <HW_RTC_StartWakeUpAlarm+0x308>)
 80094c8:	1a8a      	subs	r2, r1, r2
 80094ca:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	059b      	lsls	r3, r3, #22
 80094d2:	0d9b      	lsrs	r3, r3, #22
 80094d4:	b299      	uxth	r1, r3
 80094d6:	232e      	movs	r3, #46	; 0x2e
 80094d8:	18fb      	adds	r3, r7, r3
 80094da:	222e      	movs	r2, #46	; 0x2e
 80094dc:	18ba      	adds	r2, r7, r2
 80094de:	8812      	ldrh	r2, [r2, #0]
 80094e0:	188a      	adds	r2, r1, r2
 80094e2:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	0a9b      	lsrs	r3, r3, #10
 80094e8:	607b      	str	r3, [r7, #4]
  
  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80094ea:	230c      	movs	r3, #12
 80094ec:	18fb      	adds	r3, r7, r3
 80094ee:	789a      	ldrb	r2, [r3, #2]
 80094f0:	2326      	movs	r3, #38	; 0x26
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 80094f6:	e00a      	b.n	800950e <HW_RTC_StartWakeUpAlarm+0xaa>
  {
    timeoutValue -= SecondsInDay;
 80094f8:	4a9d      	ldr	r2, [pc, #628]	; (8009770 <HW_RTC_StartWakeUpAlarm+0x30c>)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8009500:	2326      	movs	r3, #38	; 0x26
 8009502:	18fb      	adds	r3, r7, r3
 8009504:	881a      	ldrh	r2, [r3, #0]
 8009506:	2326      	movs	r3, #38	; 0x26
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	3201      	adds	r2, #1
 800950c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 800950e:	4a98      	ldr	r2, [pc, #608]	; (8009770 <HW_RTC_StartWakeUpAlarm+0x30c>)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4293      	cmp	r3, r2
 8009514:	d2f0      	bcs.n	80094f8 <HW_RTC_StartWakeUpAlarm+0x94>
  }
  
  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8009516:	2310      	movs	r3, #16
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	2328      	movs	r3, #40	; 0x28
 800951e:	18fb      	adds	r3, r7, r3
 8009520:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009522:	e00c      	b.n	800953e <HW_RTC_StartWakeUpAlarm+0xda>
  {
    timeoutValue -= SecondsInHour;
 8009524:	23e1      	movs	r3, #225	; 0xe1
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	001a      	movs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	1a9b      	subs	r3, r3, r2
 800952e:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8009530:	2328      	movs	r3, #40	; 0x28
 8009532:	18fb      	adds	r3, r7, r3
 8009534:	881a      	ldrh	r2, [r3, #0]
 8009536:	2328      	movs	r3, #40	; 0x28
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	3201      	adds	r2, #1
 800953c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 800953e:	23e1      	movs	r3, #225	; 0xe1
 8009540:	011b      	lsls	r3, r3, #4
 8009542:	001a      	movs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d9ec      	bls.n	8009524 <HW_RTC_StartWakeUpAlarm+0xc0>
  }
  
  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800954a:	2310      	movs	r3, #16
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	785a      	ldrb	r2, [r3, #1]
 8009550:	232a      	movs	r3, #42	; 0x2a
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009556:	e00b      	b.n	8009570 <HW_RTC_StartWakeUpAlarm+0x10c>
  {
    timeoutValue -= SecondsInMinute;
 8009558:	233c      	movs	r3, #60	; 0x3c
 800955a:	001a      	movs	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8009562:	232a      	movs	r3, #42	; 0x2a
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	881a      	ldrh	r2, [r3, #0]
 8009568:	232a      	movs	r3, #42	; 0x2a
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	3201      	adds	r2, #1
 800956e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009570:	233c      	movs	r3, #60	; 0x3c
 8009572:	001a      	movs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d9ee      	bls.n	8009558 <HW_RTC_StartWakeUpAlarm+0xf4>
  }
   
  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800957a:	2310      	movs	r3, #16
 800957c:	18fb      	adds	r3, r7, r3
 800957e:	789b      	ldrb	r3, [r3, #2]
 8009580:	b299      	uxth	r1, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	b29a      	uxth	r2, r3
 8009586:	232c      	movs	r3, #44	; 0x2c
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	188a      	adds	r2, r1, r2
 800958c:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 800958e:	e00f      	b.n	80095b0 <HW_RTC_StartWakeUpAlarm+0x14c>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 8009590:	232e      	movs	r3, #46	; 0x2e
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	222e      	movs	r2, #46	; 0x2e
 8009596:	18ba      	adds	r2, r7, r2
 8009598:	8812      	ldrh	r2, [r2, #0]
 800959a:	4976      	ldr	r1, [pc, #472]	; (8009774 <HW_RTC_StartWakeUpAlarm+0x310>)
 800959c:	468c      	mov	ip, r1
 800959e:	4462      	add	r2, ip
 80095a0:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 80095a2:	232c      	movs	r3, #44	; 0x2c
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	881a      	ldrh	r2, [r3, #0]
 80095a8:	232c      	movs	r3, #44	; 0x2c
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	3201      	adds	r2, #1
 80095ae:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 80095b0:	232e      	movs	r3, #46	; 0x2e
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	4a6d      	ldr	r2, [pc, #436]	; (800976c <HW_RTC_StartWakeUpAlarm+0x308>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d8e9      	bhi.n	8009590 <HW_RTC_StartWakeUpAlarm+0x12c>
  }
  
  while (rtcAlarmSeconds >= 60)
 80095bc:	e00d      	b.n	80095da <HW_RTC_StartWakeUpAlarm+0x176>
  { 
    rtcAlarmSeconds -= 60;
 80095be:	232c      	movs	r3, #44	; 0x2c
 80095c0:	18fb      	adds	r3, r7, r3
 80095c2:	222c      	movs	r2, #44	; 0x2c
 80095c4:	18ba      	adds	r2, r7, r2
 80095c6:	8812      	ldrh	r2, [r2, #0]
 80095c8:	3a3c      	subs	r2, #60	; 0x3c
 80095ca:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80095cc:	232a      	movs	r3, #42	; 0x2a
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	232a      	movs	r3, #42	; 0x2a
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	3201      	adds	r2, #1
 80095d8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= 60)
 80095da:	232c      	movs	r3, #44	; 0x2c
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	2b3b      	cmp	r3, #59	; 0x3b
 80095e2:	d8ec      	bhi.n	80095be <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmMinutes >= 60)
 80095e4:	e00d      	b.n	8009602 <HW_RTC_StartWakeUpAlarm+0x19e>
  {
    rtcAlarmMinutes -= 60;
 80095e6:	232a      	movs	r3, #42	; 0x2a
 80095e8:	18fb      	adds	r3, r7, r3
 80095ea:	222a      	movs	r2, #42	; 0x2a
 80095ec:	18ba      	adds	r2, r7, r2
 80095ee:	8812      	ldrh	r2, [r2, #0]
 80095f0:	3a3c      	subs	r2, #60	; 0x3c
 80095f2:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80095f4:	2328      	movs	r3, #40	; 0x28
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	881a      	ldrh	r2, [r3, #0]
 80095fa:	2328      	movs	r3, #40	; 0x28
 80095fc:	18fb      	adds	r3, r7, r3
 80095fe:	3201      	adds	r2, #1
 8009600:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= 60)
 8009602:	232a      	movs	r3, #42	; 0x2a
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	2b3b      	cmp	r3, #59	; 0x3b
 800960a:	d8ec      	bhi.n	80095e6 <HW_RTC_StartWakeUpAlarm+0x182>
  }
  
  while (rtcAlarmHours >= HoursInDay)
 800960c:	e00f      	b.n	800962e <HW_RTC_StartWakeUpAlarm+0x1ca>
  {
    rtcAlarmHours -= HoursInDay;
 800960e:	2318      	movs	r3, #24
 8009610:	b29a      	uxth	r2, r3
 8009612:	2328      	movs	r3, #40	; 0x28
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	2128      	movs	r1, #40	; 0x28
 8009618:	1879      	adds	r1, r7, r1
 800961a:	8809      	ldrh	r1, [r1, #0]
 800961c:	1a8a      	subs	r2, r1, r2
 800961e:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8009620:	2326      	movs	r3, #38	; 0x26
 8009622:	18fb      	adds	r3, r7, r3
 8009624:	881a      	ldrh	r2, [r3, #0]
 8009626:	2326      	movs	r3, #38	; 0x26
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	3201      	adds	r2, #1
 800962c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HoursInDay)
 800962e:	2318      	movs	r3, #24
 8009630:	b29b      	uxth	r3, r3
 8009632:	2228      	movs	r2, #40	; 0x28
 8009634:	18ba      	adds	r2, r7, r2
 8009636:	8812      	ldrh	r2, [r2, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d2e8      	bcs.n	800960e <HW_RTC_StartWakeUpAlarm+0x1aa>
  }

  if( RTC_DateStruct.Year % 4 == 0 ) 
 800963c:	230c      	movs	r3, #12
 800963e:	18fb      	adds	r3, r7, r3
 8009640:	78db      	ldrb	r3, [r3, #3]
 8009642:	2203      	movs	r2, #3
 8009644:	4013      	ands	r3, r2
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d11d      	bne.n	8009688 <HW_RTC_StartWakeUpAlarm+0x224>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 800964c:	230c      	movs	r3, #12
 800964e:	18fb      	adds	r3, r7, r3
 8009650:	785b      	ldrb	r3, [r3, #1]
 8009652:	3b01      	subs	r3, #1
 8009654:	4a48      	ldr	r2, [pc, #288]	; (8009778 <HW_RTC_StartWakeUpAlarm+0x314>)
 8009656:	5cd3      	ldrb	r3, [r2, r3]
 8009658:	b29b      	uxth	r3, r3
 800965a:	2226      	movs	r2, #38	; 0x26
 800965c:	18ba      	adds	r2, r7, r2
 800965e:	8812      	ldrh	r2, [r2, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d92e      	bls.n	80096c2 <HW_RTC_StartWakeUpAlarm+0x25e>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8009664:	2326      	movs	r3, #38	; 0x26
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	8818      	ldrh	r0, [r3, #0]
 800966a:	230c      	movs	r3, #12
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	3b01      	subs	r3, #1
 8009672:	4a41      	ldr	r2, [pc, #260]	; (8009778 <HW_RTC_StartWakeUpAlarm+0x314>)
 8009674:	5cd3      	ldrb	r3, [r2, r3]
 8009676:	0019      	movs	r1, r3
 8009678:	f7f6 feb6 	bl	80003e8 <__aeabi_idivmod>
 800967c:	000b      	movs	r3, r1
 800967e:	001a      	movs	r2, r3
 8009680:	2326      	movs	r3, #38	; 0x26
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	e01c      	b.n	80096c2 <HW_RTC_StartWakeUpAlarm+0x25e>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 8009688:	230c      	movs	r3, #12
 800968a:	18fb      	adds	r3, r7, r3
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	3b01      	subs	r3, #1
 8009690:	4a3a      	ldr	r2, [pc, #232]	; (800977c <HW_RTC_StartWakeUpAlarm+0x318>)
 8009692:	5cd3      	ldrb	r3, [r2, r3]
 8009694:	b29b      	uxth	r3, r3
 8009696:	2226      	movs	r2, #38	; 0x26
 8009698:	18ba      	adds	r2, r7, r2
 800969a:	8812      	ldrh	r2, [r2, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d910      	bls.n	80096c2 <HW_RTC_StartWakeUpAlarm+0x25e>
    {   
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80096a0:	2326      	movs	r3, #38	; 0x26
 80096a2:	18fb      	adds	r3, r7, r3
 80096a4:	8818      	ldrh	r0, [r3, #0]
 80096a6:	230c      	movs	r3, #12
 80096a8:	18fb      	adds	r3, r7, r3
 80096aa:	785b      	ldrb	r3, [r3, #1]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	4a33      	ldr	r2, [pc, #204]	; (800977c <HW_RTC_StartWakeUpAlarm+0x318>)
 80096b0:	5cd3      	ldrb	r3, [r2, r3]
 80096b2:	0019      	movs	r1, r3
 80096b4:	f7f6 fe98 	bl	80003e8 <__aeabi_idivmod>
 80096b8:	000b      	movs	r3, r1
 80096ba:	001a      	movs	r2, r3
 80096bc:	2326      	movs	r3, #38	; 0x26
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 80096c2:	232e      	movs	r3, #46	; 0x2e
 80096c4:	18fb      	adds	r3, r7, r3
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	4a28      	ldr	r2, [pc, #160]	; (800976c <HW_RTC_StartWakeUpAlarm+0x308>)
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	001a      	movs	r2, r3
 80096ce:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80096d0:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 80096d2:	4b2b      	ldr	r3, [pc, #172]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80096d4:	22a0      	movs	r2, #160	; 0xa0
 80096d6:	0512      	lsls	r2, r2, #20
 80096d8:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80096da:	232c      	movs	r3, #44	; 0x2c
 80096dc:	18fb      	adds	r3, r7, r3
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	4b27      	ldr	r3, [pc, #156]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80096e4:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80096e6:	232a      	movs	r3, #42	; 0x2a
 80096e8:	18fb      	adds	r3, r7, r3
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	4b24      	ldr	r3, [pc, #144]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80096f0:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80096f2:	2328      	movs	r3, #40	; 0x28
 80096f4:	18fb      	adds	r3, r7, r3
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	4b21      	ldr	r3, [pc, #132]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80096fc:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 80096fe:	2326      	movs	r3, #38	; 0x26
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b2d9      	uxtb	r1, r3
 8009706:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009708:	2220      	movs	r2, #32
 800970a:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800970c:	2310      	movs	r3, #16
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	78da      	ldrb	r2, [r3, #3]
 8009712:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009714:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8009716:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009718:	2200      	movs	r2, #0
 800971a:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800971c:	4b18      	ldr	r3, [pc, #96]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 800971e:	2200      	movs	r2, #0
 8009720:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009722:	4b17      	ldr	r3, [pc, #92]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009724:	2280      	movs	r2, #128	; 0x80
 8009726:	0052      	lsls	r2, r2, #1
 8009728:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800972a:	4b15      	ldr	r3, [pc, #84]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 800972c:	2200      	movs	r2, #0
 800972e:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009730:	4b13      	ldr	r3, [pc, #76]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009732:	2200      	movs	r2, #0
 8009734:	611a      	str	r2, [r3, #16]
  
  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8009736:	4912      	ldr	r1, [pc, #72]	; (8009780 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <HW_RTC_StartWakeUpAlarm+0x320>)
 800973a:	2200      	movs	r2, #0
 800973c:	0018      	movs	r0, r3
 800973e:	f7fd fd39 	bl	80071b4 <HAL_RTC_SetAlarm_IT>
  
  /* Debug Printf*/
  DBG( HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct ); );
 8009742:	2310      	movs	r3, #16
 8009744:	18fa      	adds	r2, r7, r3
 8009746:	230c      	movs	r3, #12
 8009748:	18fb      	adds	r3, r7, r3
 800974a:	0011      	movs	r1, r2
 800974c:	0018      	movs	r0, r3
 800974e:	f000 f81b 	bl	8009788 <HW_RTC_GetCalendarValue>
  DBG_PRINTF("it's %d:%d:%d:%d ", RTC_TimeStruct.Hours, RTC_TimeStruct.Minutes, RTC_TimeStruct.Seconds, ((PREDIV_S - RTC_TimeStruct.SubSeconds)*1000)>>N_PREDIV_S);
  DBG_PRINTF("WU@ %d:%d:%d:%d\n", rtcAlarmHours, rtcAlarmMinutes, rtcAlarmSeconds, (rtcAlarmSubSeconds*1000)>>N_PREDIV_S );
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <HW_RTC_StartWakeUpAlarm+0x304>)
 8009754:	2280      	movs	r2, #128	; 0x80
 8009756:	0192      	lsls	r2, r2, #6
 8009758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	46bd      	mov	sp, r7
 800975e:	b00d      	add	sp, #52	; 0x34
 8009760:	bd90      	pop	{r4, r7, pc}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	20000264 	.word	0x20000264
 8009768:	50000400 	.word	0x50000400
 800976c:	000003ff 	.word	0x000003ff
 8009770:	00015180 	.word	0x00015180
 8009774:	fffffc00 	.word	0xfffffc00
 8009778:	0800b2ac 	.word	0x0800b2ac
 800977c:	0800b2a0 	.word	0x0800b2a0
 8009780:	2000023c 	.word	0x2000023c
 8009784:	20000218 	.word	0x20000218

08009788 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  TimerTime_t calendarValue = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	613b      	str	r3, [r7, #16]
  uint32_t first_read;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	4b4a      	ldr	r3, [pc, #296]	; (80098c8 <HW_RTC_GetCalendarValue+0x140>)
 800979e:	2200      	movs	r2, #0
 80097a0:	0018      	movs	r0, r3
 80097a2:	f7fd fb9b 	bl	8006edc <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	60fb      	str	r3, [r7, #12]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4b46      	ldr	r3, [pc, #280]	; (80098c8 <HW_RTC_GetCalendarValue+0x140>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	0018      	movs	r0, r3
 80097b4:	f7fd fcae 	bl	8007114 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	4b43      	ldr	r3, [pc, #268]	; (80098c8 <HW_RTC_GetCalendarValue+0x140>)
 80097bc:	2200      	movs	r2, #0
 80097be:	0018      	movs	r0, r3
 80097c0:	f7fd fb8c 	bl	8006edc <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d1eb      	bne.n	80097a6 <HW_RTC_GetCalendarValue+0x1e>
 
  /* years (calc valid up to year 2099)*/
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 80097ce:	2300      	movs	r3, #0
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	e017      	b.n	8009804 <HW_RTC_GetCalendarValue+0x7c>
  {
    if( (i % 4) == 0 )
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2203      	movs	r2, #3
 80097d8:	4013      	ands	r3, r2
 80097da:	d108      	bne.n	80097ee <HW_RTC_GetCalendarValue+0x66>
    {
      calendarValue += DaysInLeapYear * SecondsInDay;
 80097dc:	23b7      	movs	r3, #183	; 0xb7
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	001a      	movs	r2, r3
 80097e2:	4b3a      	ldr	r3, [pc, #232]	; (80098cc <HW_RTC_GetCalendarValue+0x144>)
 80097e4:	4353      	muls	r3, r2
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	18d3      	adds	r3, r2, r3
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	e007      	b.n	80097fe <HW_RTC_GetCalendarValue+0x76>
    }
    else
    {
      calendarValue += DaysInYear * SecondsInDay;
 80097ee:	236e      	movs	r3, #110	; 0x6e
 80097f0:	33ff      	adds	r3, #255	; 0xff
 80097f2:	001a      	movs	r2, r3
 80097f4:	4b35      	ldr	r3, [pc, #212]	; (80098cc <HW_RTC_GetCalendarValue+0x144>)
 80097f6:	4353      	muls	r3, r2
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	18d3      	adds	r3, r2, r3
 80097fc:	617b      	str	r3, [r7, #20]
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3301      	adds	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	78db      	ldrb	r3, [r3, #3]
 8009808:	001a      	movs	r2, r3
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	429a      	cmp	r2, r3
 800980e:	d8e1      	bhi.n	80097d4 <HW_RTC_GetCalendarValue+0x4c>
    }
  }

  /* months (calc valid up to year 2099)*/
  if(( (RTC_DateStruct->Year % 4) == 0 ) )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	78db      	ldrb	r3, [r3, #3]
 8009814:	2203      	movs	r2, #3
 8009816:	4013      	ands	r3, r2
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d117      	bne.n	800984e <HW_RTC_GetCalendarValue+0xc6>
  {
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	e00c      	b.n	800983e <HW_RTC_GetCalendarValue+0xb6>
    {
      calendarValue += DaysInMonthLeapYear[i] * SecondsInDay;
 8009824:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <HW_RTC_GetCalendarValue+0x148>)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	18d3      	adds	r3, r2, r3
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	001a      	movs	r2, r3
 800982e:	4b27      	ldr	r3, [pc, #156]	; (80098cc <HW_RTC_GetCalendarValue+0x144>)
 8009830:	4353      	muls	r3, r2
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	18d3      	adds	r3, r2, r3
 8009836:	617b      	str	r3, [r7, #20]
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	3301      	adds	r3, #1
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	3b01      	subs	r3, #1
 8009844:	001a      	movs	r2, r3
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	429a      	cmp	r2, r3
 800984a:	d8eb      	bhi.n	8009824 <HW_RTC_GetCalendarValue+0x9c>
 800984c:	e016      	b.n	800987c <HW_RTC_GetCalendarValue+0xf4>
    }
  }
  else
  {
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 800984e:	2300      	movs	r3, #0
 8009850:	613b      	str	r3, [r7, #16]
 8009852:	e00c      	b.n	800986e <HW_RTC_GetCalendarValue+0xe6>
    {
      calendarValue += DaysInMonth[i] * SecondsInDay;
 8009854:	4a1f      	ldr	r2, [pc, #124]	; (80098d4 <HW_RTC_GetCalendarValue+0x14c>)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	18d3      	adds	r3, r2, r3
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	001a      	movs	r2, r3
 800985e:	4b1b      	ldr	r3, [pc, #108]	; (80098cc <HW_RTC_GetCalendarValue+0x144>)
 8009860:	4353      	muls	r3, r2
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	18d3      	adds	r3, r2, r3
 8009866:	617b      	str	r3, [r7, #20]
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3301      	adds	r3, #1
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	3b01      	subs	r3, #1
 8009874:	001a      	movs	r2, r3
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	429a      	cmp	r2, r3
 800987a:	d8eb      	bhi.n	8009854 <HW_RTC_GetCalendarValue+0xcc>
    }
  }

  /* days */
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	789b      	ldrb	r3, [r3, #2]
 8009880:	0019      	movs	r1, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	001a      	movs	r2, r3
 8009888:	23e1      	movs	r3, #225	; 0xe1
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	435a      	muls	r2, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	203c      	movs	r0, #60	; 0x3c
 8009894:	4343      	muls	r3, r0
 8009896:	18d3      	adds	r3, r2, r3
 8009898:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( RTC_DateStruct->Date * SecondsInDay ) ) );
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	789b      	ldrb	r3, [r3, #2]
 800989e:	0019      	movs	r1, r3
 80098a0:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <HW_RTC_GetCalendarValue+0x144>)
 80098a2:	434b      	muls	r3, r1
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 80098a4:	18d3      	adds	r3, r2, r3
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	18d3      	adds	r3, r2, r3
 80098aa:	617b      	str	r3, [r7, #20]
  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	029a      	lsls	r2, r3, #10
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	4a08      	ldr	r2, [pc, #32]	; (80098d8 <HW_RTC_GetCalendarValue+0x150>)
 80098b8:	4694      	mov	ip, r2
 80098ba:	4463      	add	r3, ip
 80098bc:	617b      	str	r3, [r7, #20]

  return( calendarValue );
 80098be:	697b      	ldr	r3, [r7, #20]
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b006      	add	sp, #24
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20000218 	.word	0x20000218
 80098cc:	00015180 	.word	0x00015180
 80098d0:	0800b2ac 	.word	0x0800b2ac
 80098d4:	0800b2a0 	.word	0x0800b2a0
 80098d8:	000003ff 	.word	0x000003ff

080098dc <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	0018      	movs	r0, r3
 80098e6:	2314      	movs	r3, #20
 80098e8:	001a      	movs	r2, r3
 80098ea:	2100      	movs	r1, #0
 80098ec:	f000 fe6b 	bl	800a5c6 <memset>
  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 80098f0:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <HW_SPI_Init+0xf4>)
 80098f2:	4a38      	ldr	r2, [pc, #224]	; (80099d4 <HW_SPI_Init+0xf8>)
 80098f4:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 80098f6:	4b38      	ldr	r3, [pc, #224]	; (80099d8 <HW_SPI_Init+0xfc>)
 80098f8:	0018      	movs	r0, r3
 80098fa:	f000 f88d 	bl	8009a18 <SpiFrequency>
 80098fe:	0002      	movs	r2, r0
 8009900:	4b33      	ldr	r3, [pc, #204]	; (80099d0 <HW_SPI_Init+0xf4>)
 8009902:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8009904:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <HW_SPI_Init+0xf4>)
 8009906:	2200      	movs	r2, #0
 8009908:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800990a:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <HW_SPI_Init+0xf4>)
 800990c:	2282      	movs	r2, #130	; 0x82
 800990e:	0052      	lsls	r2, r2, #1
 8009910:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8009912:	4b2f      	ldr	r3, [pc, #188]	; (80099d0 <HW_SPI_Init+0xf4>)
 8009914:	2200      	movs	r2, #0
 8009916:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8009918:	4b2d      	ldr	r3, [pc, #180]	; (80099d0 <HW_SPI_Init+0xf4>)
 800991a:	2200      	movs	r2, #0
 800991c:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800991e:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <HW_SPI_Init+0xf4>)
 8009920:	2200      	movs	r2, #0
 8009922:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 8009924:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <HW_SPI_Init+0xf4>)
 8009926:	2200      	movs	r2, #0
 8009928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800992a:	4b29      	ldr	r3, [pc, #164]	; (80099d0 <HW_SPI_Init+0xf4>)
 800992c:	2200      	movs	r2, #0
 800992e:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8009930:	4b27      	ldr	r3, [pc, #156]	; (80099d0 <HW_SPI_Init+0xf4>)
 8009932:	2280      	movs	r2, #128	; 0x80
 8009934:	0092      	lsls	r2, r2, #2
 8009936:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8009938:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <HW_SPI_Init+0xf4>)
 800993a:	2200      	movs	r2, #0
 800993c:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE(); 
 800993e:	4b27      	ldr	r3, [pc, #156]	; (80099dc <HW_SPI_Init+0x100>)
 8009940:	4a26      	ldr	r2, [pc, #152]	; (80099dc <HW_SPI_Init+0x100>)
 8009942:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009944:	2180      	movs	r1, #128	; 0x80
 8009946:	0149      	lsls	r1, r1, #5
 8009948:	430a      	orrs	r2, r1
 800994a:	635a      	str	r2, [r3, #52]	; 0x34


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 800994c:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <HW_SPI_Init+0xf4>)
 800994e:	0018      	movs	r0, r3
 8009950:	f7fd ff62 	bl	8007818 <HAL_SPI_Init>
 8009954:	1e03      	subs	r3, r0, #0
 8009956:	d001      	beq.n	800995c <HW_SPI_Init+0x80>
  {
    /* Initialization Error */
     Error_Handler();
 8009958:	f7ff faf6 	bl	8008f48 <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  initStruct.Mode =GPIO_MODE_AF_PP;
 800995c:	1d3b      	adds	r3, r7, #4
 800995e:	2202      	movs	r2, #2
 8009960:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 8009962:	1d3b      	adds	r3, r7, #4
 8009964:	2202      	movs	r2, #2
 8009966:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8009968:	1d3b      	adds	r3, r7, #4
 800996a:	2203      	movs	r2, #3
 800996c:	60da      	str	r2, [r3, #12]
  initStruct.Alternate= SPI1_AF ;
 800996e:	1d3b      	adds	r3, r7, #4
 8009970:	2200      	movs	r2, #0
 8009972:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 8009974:	1d3b      	adds	r3, r7, #4
 8009976:	481a      	ldr	r0, [pc, #104]	; (80099e0 <HW_SPI_Init+0x104>)
 8009978:	001a      	movs	r2, r3
 800997a:	2108      	movs	r1, #8
 800997c:	f7ff fae8 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct); 
 8009980:	1d3a      	adds	r2, r7, #4
 8009982:	23a0      	movs	r3, #160	; 0xa0
 8009984:	05db      	lsls	r3, r3, #23
 8009986:	2140      	movs	r1, #64	; 0x40
 8009988:	0018      	movs	r0, r3
 800998a:	f7ff fae1 	bl	8008f50 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct); 
 800998e:	1d3a      	adds	r2, r7, #4
 8009990:	23a0      	movs	r3, #160	; 0xa0
 8009992:	05db      	lsls	r3, r3, #23
 8009994:	2180      	movs	r1, #128	; 0x80
 8009996:	0018      	movs	r0, r3
 8009998:	f7ff fada 	bl	8008f50 <HW_GPIO_Init>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800999c:	1d3b      	adds	r3, r7, #4
 800999e:	2201      	movs	r2, #1
 80099a0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 80099a2:	1d3b      	adds	r3, r7, #4
 80099a4:	2201      	movs	r2, #1
 80099a6:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 80099a8:	1d3a      	adds	r2, r7, #4
 80099aa:	2380      	movs	r3, #128	; 0x80
 80099ac:	0219      	lsls	r1, r3, #8
 80099ae:	23a0      	movs	r3, #160	; 0xa0
 80099b0:	05db      	lsls	r3, r3, #23
 80099b2:	0018      	movs	r0, r3
 80099b4:	f7ff facc 	bl	8008f50 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80099b8:	2380      	movs	r3, #128	; 0x80
 80099ba:	0219      	lsls	r1, r3, #8
 80099bc:	23a0      	movs	r3, #160	; 0xa0
 80099be:	05db      	lsls	r3, r3, #23
 80099c0:	2201      	movs	r2, #1
 80099c2:	0018      	movs	r0, r3
 80099c4:	f7ff fb90 	bl	80090e8 <HW_GPIO_Write>
}
 80099c8:	46c0      	nop			; (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b006      	add	sp, #24
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20000280 	.word	0x20000280
 80099d4:	40013000 	.word	0x40013000
 80099d8:	00989680 	.word	0x00989680
 80099dc:	40021000 	.word	0x40021000
 80099e0:	50000400 	.word	0x50000400

080099e4 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	0002      	movs	r2, r0
 80099ec:	1dbb      	adds	r3, r7, #6
 80099ee:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 80099f0:	230e      	movs	r3, #14
 80099f2:	18fa      	adds	r2, r7, r3
 80099f4:	1db9      	adds	r1, r7, #6
 80099f6:	4807      	ldr	r0, [pc, #28]	; (8009a14 <HW_SPI_InOut+0x30>)
 80099f8:	2301      	movs	r3, #1
 80099fa:	425b      	negs	r3, r3
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2301      	movs	r3, #1
 8009a00:	f7fd ff7c 	bl	80078fc <HAL_SPI_TransmitReceive>

  return rxData;
 8009a04:	230e      	movs	r3, #14
 8009a06:	18fb      	adds	r3, r7, r3
 8009a08:	881b      	ldrh	r3, [r3, #0]
}
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	b004      	add	sp, #16
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	20000280 	.word	0x20000280

08009a18 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8009a24:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <SpiFrequency+0x6c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 8009a2a:	e008      	b.n	8009a3e <SpiFrequency+0x26>
  {
    divisor++;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	613b      	str	r3, [r7, #16]
    
    if (divisor >= 7)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b06      	cmp	r3, #6
 8009a3c:	d804      	bhi.n	8009a48 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d8f2      	bhi.n	8009a2c <SpiFrequency+0x14>
 8009a46:	e000      	b.n	8009a4a <SpiFrequency+0x32>
      break;
 8009a48:	46c0      	nop			; (mov r8, r8)
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	4013      	ands	r3, r2
 8009a50:	d101      	bne.n	8009a56 <SpiFrequency+0x3e>
 8009a52:	2200      	movs	r2, #0
 8009a54:	e000      	b.n	8009a58 <SpiFrequency+0x40>
 8009a56:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2102      	movs	r1, #2
 8009a5c:	400b      	ands	r3, r1
 8009a5e:	d101      	bne.n	8009a64 <SpiFrequency+0x4c>
 8009a60:	2300      	movs	r3, #0
 8009a62:	e000      	b.n	8009a66 <SpiFrequency+0x4e>
 8009a64:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8009a66:	431a      	orrs	r2, r3
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	400b      	ands	r3, r1
 8009a6e:	d101      	bne.n	8009a74 <SpiFrequency+0x5c>
 8009a70:	2300      	movs	r3, #0
 8009a72:	e000      	b.n	8009a76 <SpiFrequency+0x5e>
 8009a74:	2308      	movs	r3, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]
  
  return baudRate;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
}
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	b006      	add	sp, #24
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	2000002c 	.word	0x2000002c

08009a88 <gpioCallback>:
		prev = next;
	}
}
*/
static void gpioCallback()
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
	//BSP_LED_On(LED3);

	uint32_t airtime = 0 ;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	607b      	str	r3, [r7, #4]
    buffer = HW_AdcReadChannel(ADC_CHANNEL_0);
 8009a92:	2001      	movs	r0, #1
 8009a94:	f000 fa68 	bl	8009f68 <HW_AdcReadChannel>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	001a      	movs	r2, r3
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <gpioCallback+0x3c>)
 8009a9e:	801a      	strh	r2, [r3, #0]
    airtime = Radio.TimeOnAir(1, sizeof(buffer));
 8009aa0:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <gpioCallback+0x40>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	4798      	blx	r3
 8009aaa:	0003      	movs	r3, r0
 8009aac:	607b      	str	r3, [r7, #4]
	//PRINTF("ADCDATA : %d, SIZEOFDATA : %d ", buffer , (sizeof(buffer)) );
    //PRINTF(" airtime is : %d ", airtime);
	Radio.Send((uint8_t*)&buffer, (sizeof(buffer)));
 8009aae:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <gpioCallback+0x40>)
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	4a04      	ldr	r2, [pc, #16]	; (8009ac4 <gpioCallback+0x3c>)
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	0010      	movs	r0, r2
 8009ab8:	4798      	blx	r3
}
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	46bd      	mov	sp, r7
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	200002ec 	.word	0x200002ec
 8009ac8:	0800b1e4 	.word	0x0800b1e4

08009acc <ledTimerCallback>:

static void ledTimerCallback()
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED2);
}
 8009ad0:	46c0      	nop			; (mov r8, r8)
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <txDoneEventCallback>:

void txDoneEventCallback()
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
//	BSP_LED_Off(LED3);
    Radio.Rx(0);
 8009adc:	4b03      	ldr	r3, [pc, #12]	; (8009aec <txDoneEventCallback+0x14>)
 8009ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	4798      	blx	r3
}
 8009ae4:	46c0      	nop			; (mov r8, r8)
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	46c0      	nop			; (mov r8, r8)
 8009aec:	0800b1e4 	.word	0x0800b1e4

08009af0 <rxDoneEventCallback>:

void rxDoneEventCallback(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	000c      	movs	r4, r1
 8009afa:	0010      	movs	r0, r2
 8009afc:	0019      	movs	r1, r3
 8009afe:	230a      	movs	r3, #10
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	1c22      	adds	r2, r4, #0
 8009b04:	801a      	strh	r2, [r3, #0]
 8009b06:	2308      	movs	r3, #8
 8009b08:	18fb      	adds	r3, r7, r3
 8009b0a:	1c02      	adds	r2, r0, #0
 8009b0c:	801a      	strh	r2, [r3, #0]
 8009b0e:	1dfb      	adds	r3, r7, #7
 8009b10:	1c0a      	adds	r2, r1, #0
 8009b12:	701a      	strb	r2, [r3, #0]
	//BSP_LED_On(LED2);
	TimerStart(&ledTimer);
 8009b14:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <rxDoneEventCallback+0x58>)
 8009b16:	0018      	movs	r0, r3
 8009b18:	f7ff f808 	bl	8008b2c <TimerStart>
	//PRINTF("->size of : %d", sizeof(payload));
	//PRINTF("\n");
	//for(int i=0; i<size; i++)
		//PRINTF("%d" , payload[0] +  (payload[1]<<8));   // 8 bit read
		vcom_Send("%d" , payload[0] +  (payload[1]<<8));
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	001a      	movs	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3301      	adds	r3, #1
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	18d2      	adds	r2, r2, r3
 8009b2c:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <rxDoneEventCallback+0x5c>)
 8009b2e:	0011      	movs	r1, r2
 8009b30:	0018      	movs	r0, r3
 8009b32:	f000 fba3 	bl	800a27c <vcom_Send>
		PRINTF("\n");
 8009b36:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <rxDoneEventCallback+0x60>)
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f000 fb9f 	bl	800a27c <vcom_Send>

}
 8009b3e:	46c0      	nop			; (mov r8, r8)
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b005      	add	sp, #20
 8009b44:	bd90      	pop	{r4, r7, pc}
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	200002d8 	.word	0x200002d8
 8009b4c:	0800b2b8 	.word	0x0800b2b8
 8009b50:	0800b2bc 	.word	0x0800b2bc

08009b54 <main>:

int main(void)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b093      	sub	sp, #76	; 0x4c
 8009b58:	af0a      	add	r7, sp, #40	; 0x28
	HAL_Init();
 8009b5a:	f7fb f857 	bl	8004c0c <HAL_Init>
	SystemClock_Config();
 8009b5e:	f000 f92d 	bl	8009dbc <SystemClock_Config>
	HW_Init();
 8009b62:	f000 f901 	bl	8009d68 <HW_Init>

	RadioEvents_t radioEvents;
    radioEvents.TxDone = txDoneEventCallback;
 8009b66:	1d3b      	adds	r3, r7, #4
 8009b68:	4a2b      	ldr	r2, [pc, #172]	; (8009c18 <main+0xc4>)
 8009b6a:	601a      	str	r2, [r3, #0]
    radioEvents.RxDone = rxDoneEventCallback;
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	4a2b      	ldr	r2, [pc, #172]	; (8009c1c <main+0xc8>)
 8009b70:	609a      	str	r2, [r3, #8]
    Radio.Init(&radioEvents);
 8009b72:	4b2b      	ldr	r3, [pc, #172]	; (8009c20 <main+0xcc>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	1d3a      	adds	r2, r7, #4
 8009b78:	0010      	movs	r0, r2
 8009b7a:	4798      	blx	r3

    Radio.SetChannel(LORA_FREQUENCY);
 8009b7c:	4b28      	ldr	r3, [pc, #160]	; (8009c20 <main+0xcc>)
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	4a28      	ldr	r2, [pc, #160]	; (8009c24 <main+0xd0>)
 8009b82:	0010      	movs	r0, r2
 8009b84:	4798      	blx	r3
    Radio.SetTxConfig(MODEM_LORA, LORA_TX_POWER, 0, LORA_BANDWIDTH, LORA_DATARATE, LORA_CODERATE, LORA_PREAMBLE_LEN,
 8009b86:	4b26      	ldr	r3, [pc, #152]	; (8009c20 <main+0xcc>)
 8009b88:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009b8a:	4b27      	ldr	r3, [pc, #156]	; (8009c28 <main+0xd4>)
 8009b8c:	9308      	str	r3, [sp, #32]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9307      	str	r3, [sp, #28]
 8009b92:	2300      	movs	r3, #0
 8009b94:	9306      	str	r3, [sp, #24]
 8009b96:	2300      	movs	r3, #0
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9303      	str	r3, [sp, #12]
 8009ba2:	2308      	movs	r3, #8
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	2307      	movs	r3, #7
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	2302      	movs	r3, #2
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	210e      	movs	r1, #14
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	47a0      	blx	r4
                      false, true, false, 0, 0, 3000000);  // -> max payload size

    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_DATARATE, LORA_CODERATE, 0, LORA_PREAMBLE_LEN,
 8009bb8:	4b19      	ldr	r3, [pc, #100]	; (8009c20 <main+0xcc>)
 8009bba:	6a1c      	ldr	r4, [r3, #32]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9308      	str	r3, [sp, #32]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9306      	str	r3, [sp, #24]
 8009bcc:	2301      	movs	r3, #1
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	23fa      	movs	r3, #250	; 0xfa
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	2308      	movs	r3, #8
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2300      	movs	r3, #0
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2301      	movs	r3, #1
 8009be8:	2207      	movs	r2, #7
 8009bea:	2102      	movs	r1, #2
 8009bec:	2001      	movs	r0, #1
 8009bee:	47a0      	blx	r4
                      1000, false, 0, true, false, 0, false, true);

    Radio.Rx(0);
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <main+0xcc>)
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4798      	blx	r3

    TimerInit(&ledTimer, ledTimerCallback);
 8009bf8:	4a0c      	ldr	r2, [pc, #48]	; (8009c2c <main+0xd8>)
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <main+0xdc>)
 8009bfc:	0011      	movs	r1, r2
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f7fe ff7c 	bl	8008afc <TimerInit>
    TimerSetValue(&ledTimer, 500);
 8009c04:	23fa      	movs	r3, #250	; 0xfa
 8009c06:	005a      	lsls	r2, r3, #1
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <main+0xdc>)
 8009c0a:	0011      	movs	r1, r2
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f7ff f937 	bl	8008e80 <TimerSetValue>



   while(1){
	 gpioCallback();  // for transmitter
 8009c12:	f7ff ff39 	bl	8009a88 <gpioCallback>
 8009c16:	e7fc      	b.n	8009c12 <main+0xbe>
 8009c18:	08009ad9 	.word	0x08009ad9
 8009c1c:	08009af1 	.word	0x08009af1
 8009c20:	0800b1e4 	.word	0x0800b1e4
 8009c24:	33bca100 	.word	0x33bca100
 8009c28:	002dc6c0 	.word	0x002dc6c0
 8009c2c:	08009acd 	.word	0x08009acd
 8009c30:	200002d8 	.word	0x200002d8

08009c34 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
   /* Return function status */
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	0018      	movs	r0, r3
 8009c40:	46bd      	mov	sp, r7
 8009c42:	b002      	add	sp, #8
 8009c44:	bd80      	pop	{r7, pc}
	...

08009c48 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 8009c4c:	f7fb fec0 	bl	80059d0 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 8009c50:	f7fb feda 	bl	8005a08 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8009c54:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <HAL_MspInit+0x30>)
 8009c56:	4a08      	ldr	r2, [pc, #32]	; (8009c78 <HAL_MspInit+0x30>)
 8009c58:	6812      	ldr	r2, [r2, #0]
 8009c5a:	2108      	movs	r1, #8
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	601a      	str	r2, [r3, #0]
  
  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this 
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
 8009c60:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <HAL_MspInit+0x30>)
 8009c62:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <HAL_MspInit+0x30>)
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	2108      	movs	r1, #8
 8009c68:	438a      	bics	r2, r1
 8009c6a:	601a      	str	r2, [r3, #0]
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 8009c6c:	f7fb febe 	bl	80059ec <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	40022000 	.word	0x40022000

08009c7c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b09a      	sub	sp, #104	; 0x68
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8009c84:	2330      	movs	r3, #48	; 0x30
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	2204      	movs	r2, #4
 8009c8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009c8c:	2330      	movs	r3, #48	; 0x30
 8009c8e:	18fb      	adds	r3, r7, r3
 8009c90:	2200      	movs	r2, #0
 8009c92:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009c94:	2330      	movs	r3, #48	; 0x30
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	2280      	movs	r2, #128	; 0x80
 8009c9a:	0052      	lsls	r2, r2, #1
 8009c9c:	609a      	str	r2, [r3, #8]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c9e:	2330      	movs	r3, #48	; 0x30
 8009ca0:	18fb      	adds	r3, r7, r3
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f7fb febe 	bl	8005a24 <HAL_RCC_OscConfig>
 8009ca8:	1e03      	subs	r3, r0, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_RTC_MspInit+0x34>
  {
    Error_Handler();
 8009cac:	f7ff f94c 	bl	8008f48 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	18fb      	adds	r3, r7, r3
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009cb8:	230c      	movs	r3, #12
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	2280      	movs	r2, #128	; 0x80
 8009cbe:	0252      	lsls	r2, r2, #9
 8009cc0:	605a      	str	r2, [r3, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f7fc fc74 	bl	80065b4 <HAL_RCCEx_PeriphCLKConfig>
 8009ccc:	1e03      	subs	r3, r0, #0
 8009cce:	d001      	beq.n	8009cd4 <HAL_RTC_MspInit+0x58>
  { 
    Error_Handler();
 8009cd0:	f7ff f93a 	bl	8008f48 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8009cd4:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <HAL_RTC_MspInit+0x80>)
 8009cd6:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <HAL_RTC_MspInit+0x80>)
 8009cd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	02c9      	lsls	r1, r1, #11
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	651a      	str	r2, [r3, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	2002      	movs	r0, #2
 8009ce8:	f7fb fc74 	bl	80055d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8009cec:	2002      	movs	r0, #2
 8009cee:	f7fb fc87 	bl	8005600 <HAL_NVIC_EnableIRQ>
}
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b01a      	add	sp, #104	; 0x68
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	40021000 	.word	0x40021000

08009d00 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  TimerIrqHandler( );
 8009d08:	f7fe ffae 	bl	8008c68 <TimerIrqHandler>
}
 8009d0c:	46c0      	nop			; (mov r8, r8)
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b002      	add	sp, #8
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	0002      	movs	r2, r0
 8009d1c:	1dbb      	adds	r3, r7, #6
 8009d1e:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler( GPIO_Pin );
 8009d20:	1dbb      	adds	r3, r7, #6
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	0018      	movs	r0, r3
 8009d26:	f7ff f9c1 	bl	80090ac <HW_GPIO_IrqHandler>
}
 8009d2a:	46c0      	nop			; (mov r8, r8)
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	b002      	add	sp, #8
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a finction of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	0002      	movs	r2, r0
 8009d3a:	1dbb      	adds	r3, r7, #6
 8009d3c:	801a      	strh	r2, [r3, #0]
  switch( GPIO_Pin )
 8009d3e:	1dbb      	adds	r3, r7, #6
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d009      	beq.n	8009d5a <MSP_GetIRQn+0x28>
 8009d46:	dc03      	bgt.n	8009d50 <MSP_GetIRQn+0x1e>
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d807      	bhi.n	8009d5e <MSP_GetIRQn+0x2c>
 8009d4e:	e002      	b.n	8009d56 <MSP_GetIRQn+0x24>
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d002      	beq.n	8009d5a <MSP_GetIRQn+0x28>
 8009d54:	e003      	b.n	8009d5e <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8009d56:	2305      	movs	r3, #5
 8009d58:	e002      	b.n	8009d60 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 8009d5a:	2306      	movs	r3, #6
 8009d5c:	e000      	b.n	8009d60 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
 8009d5e:	2307      	movs	r3, #7
  }
}
 8009d60:	0018      	movs	r0, r3
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b002      	add	sp, #8
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  if( McuInitialized == false )
 8009d6c:	4b11      	ldr	r3, [pc, #68]	; (8009db4 <HW_Init+0x4c>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2201      	movs	r2, #1
 8009d72:	4053      	eors	r3, r2
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d019      	beq.n	8009dae <HW_Init+0x46>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x3000 );
#endif

    HW_AdcInit( );
 8009d7a:	f000 f893 	bl	8009ea4 <HW_AdcInit>

    Radio.IoInit( );
 8009d7e:	4b0e      	ldr	r3, [pc, #56]	; (8009db8 <HW_Init+0x50>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4798      	blx	r3
    
    HW_SPI_Init( );
 8009d84:	f7ff fdaa 	bl	80098dc <HW_SPI_Init>

    HW_RTC_Init( );
 8009d88:	f7ff fa10 	bl	80091ac <HW_RTC_Init>
    
    vcom_Init( );
 8009d8c:	f000 fa46 	bl	800a21c <vcom_Init>
    
    BSP_LED_Init( LED1 );
 8009d90:	2000      	movs	r0, #0
 8009d92:	f7f8 fa1d 	bl	80021d0 <BSP_LED_Init>
    
    BSP_LED_Init( LED2 );
 8009d96:	2001      	movs	r0, #1
 8009d98:	f7f8 fa1a 	bl	80021d0 <BSP_LED_Init>
    
    BSP_LED_Init( LED3 );
 8009d9c:	2002      	movs	r0, #2
 8009d9e:	f7f8 fa17 	bl	80021d0 <BSP_LED_Init>
    
    BSP_LED_Init( LED4 );
 8009da2:	2003      	movs	r0, #3
 8009da4:	f7f8 fa14 	bl	80021d0 <BSP_LED_Init>

    McuInitialized = true;
 8009da8:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <HW_Init+0x4c>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]
  }
}
 8009dae:	46c0      	nop			; (mov r8, r8)
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000351 	.word	0x20000351
 8009db8:	0800b1e4 	.word	0x0800b1e4

08009dbc <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b094      	sub	sp, #80	; 0x50
 8009dc0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009dc2:	233c      	movs	r3, #60	; 0x3c
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	2314      	movs	r3, #20
 8009dca:	001a      	movs	r2, r3
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f000 fbfa 	bl	800a5c6 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009dd2:	1d3b      	adds	r3, r7, #4
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	2338      	movs	r3, #56	; 0x38
 8009dd8:	001a      	movs	r2, r3
 8009dda:	2100      	movs	r1, #0
 8009ddc:	f000 fbf3 	bl	800a5c6 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8009de0:	1d3b      	adds	r3, r7, #4
 8009de2:	2202      	movs	r2, #2
 8009de4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8009de6:	1d3b      	adds	r3, r7, #4
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8009dec:	1d3b      	adds	r3, r7, #4
 8009dee:	2201      	movs	r2, #1
 8009df0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	2210      	movs	r2, #16
 8009df6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8009df8:	1d3b      	adds	r3, r7, #4
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8009dfe:	1d3b      	adds	r3, r7, #4
 8009e00:	2200      	movs	r2, #0
 8009e02:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8009e04:	1d3b      	adds	r3, r7, #4
 8009e06:	2280      	movs	r2, #128	; 0x80
 8009e08:	0312      	lsls	r2, r2, #12
 8009e0a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8009e0c:	1d3b      	adds	r3, r7, #4
 8009e0e:	2280      	movs	r2, #128	; 0x80
 8009e10:	0412      	lsls	r2, r2, #16
 8009e12:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e14:	1d3b      	adds	r3, r7, #4
 8009e16:	0018      	movs	r0, r3
 8009e18:	f7fb fe04 	bl	8005a24 <HAL_RCC_OscConfig>
 8009e1c:	1e03      	subs	r3, r0, #0
 8009e1e:	d001      	beq.n	8009e24 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8009e20:	f7ff f892 	bl	8008f48 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e24:	4b1c      	ldr	r3, [pc, #112]	; (8009e98 <SystemClock_Config+0xdc>)
 8009e26:	4a1c      	ldr	r2, [pc, #112]	; (8009e98 <SystemClock_Config+0xdc>)
 8009e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e2a:	2180      	movs	r1, #128	; 0x80
 8009e2c:	0549      	lsls	r1, r1, #21
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e32:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <SystemClock_Config+0xe0>)
 8009e34:	4a19      	ldr	r2, [pc, #100]	; (8009e9c <SystemClock_Config+0xe0>)
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	4919      	ldr	r1, [pc, #100]	; (8009ea0 <SystemClock_Config+0xe4>)
 8009e3a:	400a      	ands	r2, r1
 8009e3c:	2180      	movs	r1, #128	; 0x80
 8009e3e:	0109      	lsls	r1, r1, #4
 8009e40:	430a      	orrs	r2, r1
 8009e42:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8009e44:	46c0      	nop			; (mov r8, r8)
 8009e46:	4b15      	ldr	r3, [pc, #84]	; (8009e9c <SystemClock_Config+0xe0>)
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2210      	movs	r2, #16
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	2b10      	cmp	r3, #16
 8009e50:	d0f9      	beq.n	8009e46 <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8009e52:	233c      	movs	r3, #60	; 0x3c
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	220f      	movs	r2, #15
 8009e58:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e5a:	233c      	movs	r3, #60	; 0x3c
 8009e5c:	18fb      	adds	r3, r7, r3
 8009e5e:	2203      	movs	r2, #3
 8009e60:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e62:	233c      	movs	r3, #60	; 0x3c
 8009e64:	18fb      	adds	r3, r7, r3
 8009e66:	2200      	movs	r2, #0
 8009e68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009e6a:	233c      	movs	r3, #60	; 0x3c
 8009e6c:	18fb      	adds	r3, r7, r3
 8009e6e:	2200      	movs	r2, #0
 8009e70:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009e72:	233c      	movs	r3, #60	; 0x3c
 8009e74:	18fb      	adds	r3, r7, r3
 8009e76:	2200      	movs	r2, #0
 8009e78:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009e7a:	233c      	movs	r3, #60	; 0x3c
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	2101      	movs	r1, #1
 8009e80:	0018      	movs	r0, r3
 8009e82:	f7fc f971 	bl	8006168 <HAL_RCC_ClockConfig>
 8009e86:	1e03      	subs	r3, r0, #0
 8009e88:	d001      	beq.n	8009e8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8009e8a:	f7ff f85d 	bl	8008f48 <Error_Handler>
  }
}
 8009e8e:	46c0      	nop			; (mov r8, r8)
 8009e90:	46bd      	mov	sp, r7
 8009e92:	b014      	add	sp, #80	; 0x50
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	40021000 	.word	0x40021000
 8009e9c:	40007000 	.word	0x40007000
 8009ea0:	ffffe7ff 	.word	0xffffe7ff

08009ea4 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
  if( AdcInitialized == false )
 8009eaa:	4b2b      	ldr	r3, [pc, #172]	; (8009f58 <HW_AdcInit+0xb4>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4053      	eors	r3, r2
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d04b      	beq.n	8009f50 <HW_AdcInit+0xac>
  {
    AdcInitialized = true;
 8009eb8:	4b27      	ldr	r3, [pc, #156]	; (8009f58 <HW_AdcInit+0xb4>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef initStruct;
    
    hadc.Instance  = ADC1;
 8009ebe:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ec0:	4a27      	ldr	r2, [pc, #156]	; (8009f60 <HW_AdcInit+0xbc>)
 8009ec2:	601a      	str	r2, [r3, #0]
    
    hadc.Init.OversamplingMode      = DISABLE;
 8009ec4:	4b25      	ldr	r3, [pc, #148]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	641a      	str	r2, [r3, #64]	; 0x40
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009eca:	4b24      	ldr	r3, [pc, #144]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ecc:	22c0      	movs	r2, #192	; 0xc0
 8009ece:	0612      	lsls	r2, r2, #24
 8009ed0:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8009ed2:	4b22      	ldr	r3, [pc, #136]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 8009ed8:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <HW_AdcInit+0xb8>)
 8009eda:	2201      	movs	r2, #1
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8009ede:	4b1f      	ldr	r3, [pc, #124]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	619a      	str	r2, [r3, #24]
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8009ee4:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 8009eea:	4b1c      	ldr	r3, [pc, #112]	; (8009f5c <HW_AdcInit+0xb8>)
 8009eec:	2202      	movs	r2, #2
 8009eee:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8009ef0:	4b1a      	ldr	r3, [pc, #104]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8009ef6:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <HW_AdcInit+0xb8>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 8009efc:	4b17      	ldr	r3, [pc, #92]	; (8009f5c <HW_AdcInit+0xb8>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	621a      	str	r2, [r3, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8009f02:	4b16      	ldr	r3, [pc, #88]	; (8009f5c <HW_AdcInit+0xb8>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	625a      	str	r2, [r3, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009f08:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <HW_AdcInit+0xb8>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <HW_AdcInit+0xb8>)
 8009f10:	2204      	movs	r2, #4
 8009f12:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8009f14:	4b11      	ldr	r3, [pc, #68]	; (8009f5c <HW_AdcInit+0xb8>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	631a      	str	r2, [r3, #48]	; 0x30

    ADCCLK_ENABLE();
 8009f1a:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <HW_AdcInit+0xc0>)
 8009f1c:	4a11      	ldr	r2, [pc, #68]	; (8009f64 <HW_AdcInit+0xc0>)
 8009f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	0089      	lsls	r1, r1, #2
 8009f24:	430a      	orrs	r2, r1
 8009f26:	635a      	str	r2, [r3, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 8009f28:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <HW_AdcInit+0xb8>)
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	f7fa fe9e 	bl	8004c6c <HAL_ADC_Init>

    initStruct.Mode =GPIO_MODE_ANALOG;
 8009f30:	1d3b      	adds	r3, r7, #4
 8009f32:	2203      	movs	r2, #3
 8009f34:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8009f36:	1d3b      	adds	r3, r7, #4
 8009f38:	2200      	movs	r2, #0
 8009f3a:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	2203      	movs	r2, #3
 8009f40:	60da      	str	r2, [r3, #12]

    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 8009f42:	1d3a      	adds	r2, r7, #4
 8009f44:	23a0      	movs	r3, #160	; 0xa0
 8009f46:	05db      	lsls	r3, r3, #23
 8009f48:	2110      	movs	r1, #16
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7ff f800 	bl	8008f50 <HW_GPIO_Init>
  }
}
 8009f50:	46c0      	nop			; (mov r8, r8)
 8009f52:	46bd      	mov	sp, r7
 8009f54:	b006      	add	sp, #24
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000350 	.word	0x20000350
 8009f5c:	200002f0 	.word	0x200002f0
 8009f60:	40012400 	.word	0x40012400
 8009f64:	40021000 	.word	0x40021000

08009f68 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 8009f70:	2316      	movs	r3, #22
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	2200      	movs	r2, #0
 8009f76:	801a      	strh	r2, [r3, #0]
  
  if( AdcInitialized == true )
 8009f78:	4b30      	ldr	r3, [pc, #192]	; (800a03c <HW_AdcReadChannel+0xd4>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d056      	beq.n	800a02e <HW_AdcReadChannel+0xc6>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8009f80:	46c0      	nop			; (mov r8, r8)
 8009f82:	4b2f      	ldr	r3, [pc, #188]	; (800a040 <HW_AdcReadChannel+0xd8>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2208      	movs	r2, #8
 8009f88:	4013      	ands	r3, r2
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	d1f9      	bne.n	8009f82 <HW_AdcReadChannel+0x1a>
      
    ADCCLK_ENABLE();
 8009f8e:	4b2d      	ldr	r3, [pc, #180]	; (800a044 <HW_AdcReadChannel+0xdc>)
 8009f90:	4a2c      	ldr	r2, [pc, #176]	; (800a044 <HW_AdcReadChannel+0xdc>)
 8009f92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f94:	2180      	movs	r1, #128	; 0x80
 8009f96:	0089      	lsls	r1, r1, #2
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 8009f9c:	4b2a      	ldr	r3, [pc, #168]	; (800a048 <HW_AdcReadChannel+0xe0>)
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f7fb f9d1 	bl	8005348 <HAL_ADCEx_Calibration_Start>
    
    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	18fb      	adds	r3, r7, r3
 8009faa:	4a28      	ldr	r2, [pc, #160]	; (800a04c <HW_AdcReadChannel+0xe4>)
 8009fac:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE; 
 8009fae:	230c      	movs	r3, #12
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	4a27      	ldr	r2, [pc, #156]	; (800a050 <HW_AdcReadChannel+0xe8>)
 8009fb4:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	18fa      	adds	r2, r7, r3
 8009fba:	4b23      	ldr	r3, [pc, #140]	; (800a048 <HW_AdcReadChannel+0xe0>)
 8009fbc:	0011      	movs	r1, r2
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f7fb f8be 	bl	8005140 <HAL_ADC_ConfigChannel>
      
    /* configure adc channel */
    adcConf.Channel = Channel;
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	18fb      	adds	r3, r7, r3
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009fcc:	230c      	movs	r3, #12
 8009fce:	18fb      	adds	r3, r7, r3
 8009fd0:	2280      	movs	r2, #128	; 0x80
 8009fd2:	0152      	lsls	r2, r2, #5
 8009fd4:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	18fa      	adds	r2, r7, r3
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <HW_AdcReadChannel+0xe0>)
 8009fdc:	0011      	movs	r1, r2
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f7fb f8ae 	bl	8005140 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start( &hadc);
 8009fe4:	4b18      	ldr	r3, [pc, #96]	; (800a048 <HW_AdcReadChannel+0xe0>)
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	f7fa ffb6 	bl	8004f58 <HAL_ADC_Start>
      
    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 8009fec:	2301      	movs	r3, #1
 8009fee:	425a      	negs	r2, r3
 8009ff0:	4b15      	ldr	r3, [pc, #84]	; (800a048 <HW_AdcReadChannel+0xe0>)
 8009ff2:	0011      	movs	r1, r2
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f7fb f803 	bl	8005000 <HAL_ADC_PollForConversion>
      
    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue ( &hadc);
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <HW_AdcReadChannel+0xe0>)
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f7fb f893 	bl	8005128 <HAL_ADC_GetValue>
 800a002:	0002      	movs	r2, r0
 800a004:	2316      	movs	r3, #22
 800a006:	18fb      	adds	r3, r7, r3
 800a008:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE( &hadc) ;
 800a00a:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <HW_AdcReadChannel+0xe0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a0e      	ldr	r2, [pc, #56]	; (800a048 <HW_AdcReadChannel+0xe0>)
 800a010:	6812      	ldr	r2, [r2, #0]
 800a012:	6892      	ldr	r2, [r2, #8]
 800a014:	2102      	movs	r1, #2
 800a016:	430a      	orrs	r2, r1
 800a018:	609a      	str	r2, [r3, #8]
 800a01a:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <HW_AdcReadChannel+0xe0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2203      	movs	r2, #3
 800a020:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <HW_AdcReadChannel+0xdc>)
 800a024:	4a07      	ldr	r2, [pc, #28]	; (800a044 <HW_AdcReadChannel+0xdc>)
 800a026:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a028:	490a      	ldr	r1, [pc, #40]	; (800a054 <HW_AdcReadChannel+0xec>)
 800a02a:	400a      	ands	r2, r1
 800a02c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return adcData;
 800a02e:	2316      	movs	r3, #22
 800a030:	18fb      	adds	r3, r7, r3
 800a032:	881b      	ldrh	r3, [r3, #0]
}
 800a034:	0018      	movs	r0, r3
 800a036:	46bd      	mov	sp, r7
 800a038:	b006      	add	sp, #24
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000350 	.word	0x20000350
 800a040:	40007000 	.word	0x40007000
 800a044:	40021000 	.word	0x40021000
 800a048:	200002f0 	.word	0x200002f0
 800a04c:	0007ffff 	.word	0x0007ffff
 800a050:	00001001 	.word	0x00001001
 800a054:	fffffdff 	.word	0xfffffdff

0800a058 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
}
 800a05c:	46c0      	nop			; (mov r8, r8)
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	af00      	add	r7, sp, #0
 800a066:	46c0      	nop			; (mov r8, r8)
  while(1)
  {
    __NOP();
 800a068:	e7fd      	b.n	800a066 <HardFault_Handler+0x4>

0800a06a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	af00      	add	r7, sp, #0
}
 800a06e:	46c0      	nop			; (mov r8, r8)
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
}
 800a078:	46c0      	nop			; (mov r8, r8)
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800a082:	f7fa fddd 	bl	8004c40 <HAL_IncTick>
}
 800a086:	46c0      	nop			; (mov r8, r8)
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USART2_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void USART2_IRQHandler( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
   vcom_Print( );
 800a090:	f000 f984 	bl	800a39c <vcom_Print>
}
 800a094:	46c0      	nop			; (mov r8, r8)
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler ( );
 800a09e:	f7ff f985 	bl	80093ac <HW_RTC_IrqHandler>
}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	f7fb fc73 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800a0b2:	2002      	movs	r0, #2
 800a0b4:	f7fb fc70 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
}
 800a0b8:	46c0      	nop			; (mov r8, r8)
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800a0c2:	2004      	movs	r0, #4
 800a0c4:	f7fb fc68 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800a0c8:	2008      	movs	r0, #8
 800a0ca:	f7fb fc65 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
}
 800a0ce:	46c0      	nop			; (mov r8, r8)
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800a0d8:	2010      	movs	r0, #16
 800a0da:	f7fb fc5d 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800a0de:	2020      	movs	r0, #32
 800a0e0:	f7fb fc5a 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800a0e4:	2040      	movs	r0, #64	; 0x40
 800a0e6:	f7fb fc57 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800a0ea:	2080      	movs	r0, #128	; 0x80
 800a0ec:	f7fb fc54 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f7fb fc4f 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800a0fa:	2380      	movs	r3, #128	; 0x80
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	0018      	movs	r0, r3
 800a100:	f7fb fc4a 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800a104:	2380      	movs	r3, #128	; 0x80
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	0018      	movs	r0, r3
 800a10a:	f7fb fc45 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	0018      	movs	r0, r3
 800a114:	f7fb fc40 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	015b      	lsls	r3, r3, #5
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7fb fc3b 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800a122:	2380      	movs	r3, #128	; 0x80
 800a124:	019b      	lsls	r3, r3, #6
 800a126:	0018      	movs	r0, r3
 800a128:	f7fb fc36 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800a12c:	2380      	movs	r3, #128	; 0x80
 800a12e:	01db      	lsls	r3, r3, #7
 800a130:	0018      	movs	r0, r3
 800a132:	f7fb fc31 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	021b      	lsls	r3, r3, #8
 800a13a:	0018      	movs	r0, r3
 800a13c:	f7fb fc2c 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
}
 800a140:	46c0      	nop			; (mov r8, r8)
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a150:	4b11      	ldr	r3, [pc, #68]	; (800a198 <_sbrk+0x50>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <_sbrk+0x16>
		heap_end = &end;
 800a158:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <_sbrk+0x50>)
 800a15a:	4a10      	ldr	r2, [pc, #64]	; (800a19c <_sbrk+0x54>)
 800a15c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a15e:	4b0e      	ldr	r3, [pc, #56]	; (800a198 <_sbrk+0x50>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <_sbrk+0x50>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	18d3      	adds	r3, r2, r3
 800a16c:	466a      	mov	r2, sp
 800a16e:	4293      	cmp	r3, r2
 800a170:	d907      	bls.n	800a182 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a172:	f000 f9f5 	bl	800a560 <__errno>
 800a176:	0003      	movs	r3, r0
 800a178:	220c      	movs	r2, #12
 800a17a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	425b      	negs	r3, r3
 800a180:	e006      	b.n	800a190 <_sbrk+0x48>
	}

	heap_end += incr;
 800a182:	4b05      	ldr	r3, [pc, #20]	; (800a198 <_sbrk+0x50>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	18d2      	adds	r2, r2, r3
 800a18a:	4b03      	ldr	r3, [pc, #12]	; (800a198 <_sbrk+0x50>)
 800a18c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	0018      	movs	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	b004      	add	sp, #16
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20000358 	.word	0x20000358
 800a19c:	20000580 	.word	0x20000580

0800a1a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800a1a4:	4b17      	ldr	r3, [pc, #92]	; (800a204 <SystemInit+0x64>)
 800a1a6:	4a17      	ldr	r2, [pc, #92]	; (800a204 <SystemInit+0x64>)
 800a1a8:	6812      	ldr	r2, [r2, #0]
 800a1aa:	2180      	movs	r1, #128	; 0x80
 800a1ac:	0049      	lsls	r1, r1, #1
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800a1b2:	4b14      	ldr	r3, [pc, #80]	; (800a204 <SystemInit+0x64>)
 800a1b4:	4a13      	ldr	r2, [pc, #76]	; (800a204 <SystemInit+0x64>)
 800a1b6:	68d2      	ldr	r2, [r2, #12]
 800a1b8:	4913      	ldr	r1, [pc, #76]	; (800a208 <SystemInit+0x68>)
 800a1ba:	400a      	ands	r2, r1
 800a1bc:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800a1be:	4b11      	ldr	r3, [pc, #68]	; (800a204 <SystemInit+0x64>)
 800a1c0:	4a10      	ldr	r2, [pc, #64]	; (800a204 <SystemInit+0x64>)
 800a1c2:	6812      	ldr	r2, [r2, #0]
 800a1c4:	4911      	ldr	r1, [pc, #68]	; (800a20c <SystemInit+0x6c>)
 800a1c6:	400a      	ands	r2, r1
 800a1c8:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a1ca:	4b0e      	ldr	r3, [pc, #56]	; (800a204 <SystemInit+0x64>)
 800a1cc:	4a0d      	ldr	r2, [pc, #52]	; (800a204 <SystemInit+0x64>)
 800a1ce:	6892      	ldr	r2, [r2, #8]
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	438a      	bics	r2, r1
 800a1d4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800a1d6:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <SystemInit+0x64>)
 800a1d8:	4a0a      	ldr	r2, [pc, #40]	; (800a204 <SystemInit+0x64>)
 800a1da:	6812      	ldr	r2, [r2, #0]
 800a1dc:	490c      	ldr	r1, [pc, #48]	; (800a210 <SystemInit+0x70>)
 800a1de:	400a      	ands	r2, r1
 800a1e0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <SystemInit+0x64>)
 800a1e4:	4a07      	ldr	r2, [pc, #28]	; (800a204 <SystemInit+0x64>)
 800a1e6:	68d2      	ldr	r2, [r2, #12]
 800a1e8:	490a      	ldr	r1, [pc, #40]	; (800a214 <SystemInit+0x74>)
 800a1ea:	400a      	ands	r2, r1
 800a1ec:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <SystemInit+0x64>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <SystemInit+0x78>)
 800a1f6:	2280      	movs	r2, #128	; 0x80
 800a1f8:	0512      	lsls	r2, r2, #20
 800a1fa:	609a      	str	r2, [r3, #8]
#endif
}
 800a1fc:	46c0      	nop			; (mov r8, r8)
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	40021000 	.word	0x40021000
 800a208:	88ff400c 	.word	0x88ff400c
 800a20c:	fef6fff6 	.word	0xfef6fff6
 800a210:	fffbffff 	.word	0xfffbffff
 800a214:	ff02ffff 	.word	0xff02ffff
 800a218:	e000ed00 	.word	0xe000ed00

0800a21c <vcom_Init>:

/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void vcom_Init(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 800a220:	4b14      	ldr	r3, [pc, #80]	; (800a274 <vcom_Init+0x58>)
 800a222:	4a15      	ldr	r2, [pc, #84]	; (800a278 <vcom_Init+0x5c>)
 800a224:	601a      	str	r2, [r3, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <vcom_Init+0x58>)
 800a228:	22e1      	movs	r2, #225	; 0xe1
 800a22a:	0252      	lsls	r2, r2, #9
 800a22c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800a22e:	4b11      	ldr	r3, [pc, #68]	; (800a274 <vcom_Init+0x58>)
 800a230:	2200      	movs	r2, #0
 800a232:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800a234:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <vcom_Init+0x58>)
 800a236:	2200      	movs	r2, #0
 800a238:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800a23a:	4b0e      	ldr	r3, [pc, #56]	; (800a274 <vcom_Init+0x58>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800a240:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <vcom_Init+0x58>)
 800a242:	2200      	movs	r2, #0
 800a244:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800a246:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <vcom_Init+0x58>)
 800a248:	220c      	movs	r2, #12
 800a24a:	615a      	str	r2, [r3, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800a24c:	4b09      	ldr	r3, [pc, #36]	; (800a274 <vcom_Init+0x58>)
 800a24e:	0018      	movs	r0, r3
 800a250:	f7fd fe76 	bl	8007f40 <HAL_UART_Init>
 800a254:	1e03      	subs	r3, r0, #0
 800a256:	d001      	beq.n	800a25c <vcom_Init+0x40>
  {
    /* Initialization Error */
    Error_Handler(); 
 800a258:	f7fe fe76 	bl	8008f48 <Error_Handler>
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 800a25c:	2200      	movs	r2, #0
 800a25e:	2101      	movs	r1, #1
 800a260:	201c      	movs	r0, #28
 800a262:	f7fb f9b7 	bl	80055d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 800a266:	201c      	movs	r0, #28
 800a268:	f7fb f9ca 	bl	8005600 <HAL_NVIC_EnableIRQ>
}
 800a26c:	46c0      	nop			; (mov r8, r8)
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	46c0      	nop			; (mov r8, r8)
 800a274:	20000460 	.word	0x20000460
 800a278:	40004400 	.word	0x40004400

0800a27c <vcom_Send>:
  HAL_UART_DeInit(&UartHandle);
#endif
}

void vcom_Send( char *format, ... )
{
 800a27c:	b40f      	push	{r0, r1, r2, r3}
 800a27e:	b580      	push	{r7, lr}
 800a280:	b0a6      	sub	sp, #152	; 0x98
 800a282:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800a284:	23a4      	movs	r3, #164	; 0xa4
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	2284      	movs	r2, #132	; 0x84
 800a28a:	18ba      	adds	r2, r7, r2
 800a28c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a28e:	f3ef 8310 	mrs	r3, PRIMASK
 800a292:	228c      	movs	r2, #140	; 0x8c
 800a294:	18ba      	adds	r2, r7, r2
 800a296:	6013      	str	r3, [r2, #0]
  return(result);
 800a298:	238c      	movs	r3, #140	; 0x8c
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	681b      	ldr	r3, [r3, #0]
  uint8_t len;
  uint8_t lenTop;
  char tempBuff[128];
  
  BACKUP_PRIMASK();
 800a29e:	2294      	movs	r2, #148	; 0x94
 800a2a0:	18ba      	adds	r2, r7, r2
 800a2a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a4:	b672      	cpsid	i
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 800a2a6:	2384      	movs	r3, #132	; 0x84
 800a2a8:	18fb      	adds	r3, r7, r3
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	23a0      	movs	r3, #160	; 0xa0
 800a2ae:	18fb      	adds	r3, r7, r3
 800a2b0:	6819      	ldr	r1, [r3, #0]
 800a2b2:	1d3b      	adds	r3, r7, #4
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 f9a7 	bl	800a608 <vsiprintf>
 800a2ba:	0002      	movs	r2, r0
 800a2bc:	2393      	movs	r3, #147	; 0x93
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	701a      	strb	r2, [r3, #0]
  
  if (iw+len<BUFSIZE)
 800a2c2:	4b34      	ldr	r3, [pc, #208]	; (800a394 <vcom_Send+0x118>)
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	001a      	movs	r2, r3
 800a2ca:	2393      	movs	r3, #147	; 0x93
 800a2cc:	18fb      	adds	r3, r7, r3
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	18d3      	adds	r3, r2, r3
 800a2d2:	2bff      	cmp	r3, #255	; 0xff
 800a2d4:	dc18      	bgt.n	800a308 <vcom_Send+0x8c>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 800a2d6:	4b2f      	ldr	r3, [pc, #188]	; (800a394 <vcom_Send+0x118>)
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	001a      	movs	r2, r3
 800a2de:	4b2e      	ldr	r3, [pc, #184]	; (800a398 <vcom_Send+0x11c>)
 800a2e0:	18d0      	adds	r0, r2, r3
 800a2e2:	2393      	movs	r3, #147	; 0x93
 800a2e4:	18fb      	adds	r3, r7, r3
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	1d3b      	adds	r3, r7, #4
 800a2ea:	0019      	movs	r1, r3
 800a2ec:	f000 f962 	bl	800a5b4 <memcpy>
    iw+=len;
 800a2f0:	2393      	movs	r3, #147	; 0x93
 800a2f2:	18fb      	adds	r3, r7, r3
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	4b26      	ldr	r3, [pc, #152]	; (800a394 <vcom_Send+0x118>)
 800a2fa:	881b      	ldrh	r3, [r3, #0]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	18d3      	adds	r3, r2, r3
 800a300:	b29a      	uxth	r2, r3
 800a302:	4b24      	ldr	r3, [pc, #144]	; (800a394 <vcom_Send+0x118>)
 800a304:	801a      	strh	r2, [r3, #0]
 800a306:	e030      	b.n	800a36a <vcom_Send+0xee>
  }
  else
  {
    lenTop=BUFSIZE-iw;
 800a308:	4b22      	ldr	r3, [pc, #136]	; (800a394 <vcom_Send+0x118>)
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	2392      	movs	r3, #146	; 0x92
 800a312:	18fb      	adds	r3, r7, r3
 800a314:	4252      	negs	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 800a318:	4b1e      	ldr	r3, [pc, #120]	; (800a394 <vcom_Send+0x118>)
 800a31a:	881b      	ldrh	r3, [r3, #0]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	001a      	movs	r2, r3
 800a320:	4b1d      	ldr	r3, [pc, #116]	; (800a398 <vcom_Send+0x11c>)
 800a322:	18d0      	adds	r0, r2, r3
 800a324:	2392      	movs	r3, #146	; 0x92
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	1d3b      	adds	r3, r7, #4
 800a32c:	0019      	movs	r1, r3
 800a32e:	f000 f941 	bl	800a5b4 <memcpy>
    len-=lenTop;
 800a332:	2393      	movs	r3, #147	; 0x93
 800a334:	18fb      	adds	r3, r7, r3
 800a336:	2293      	movs	r2, #147	; 0x93
 800a338:	18b9      	adds	r1, r7, r2
 800a33a:	2292      	movs	r2, #146	; 0x92
 800a33c:	18ba      	adds	r2, r7, r2
 800a33e:	7809      	ldrb	r1, [r1, #0]
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	1a8a      	subs	r2, r1, r2
 800a344:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800a346:	2392      	movs	r3, #146	; 0x92
 800a348:	18fb      	adds	r3, r7, r3
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	1d3a      	adds	r2, r7, #4
 800a34e:	18d1      	adds	r1, r2, r3
 800a350:	2393      	movs	r3, #147	; 0x93
 800a352:	18fb      	adds	r3, r7, r3
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <vcom_Send+0x11c>)
 800a358:	0018      	movs	r0, r3
 800a35a:	f000 f92b 	bl	800a5b4 <memcpy>
    iw = len;
 800a35e:	2393      	movs	r3, #147	; 0x93
 800a360:	18fb      	adds	r3, r7, r3
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	b29a      	uxth	r2, r3
 800a366:	4b0b      	ldr	r3, [pc, #44]	; (800a394 <vcom_Send+0x118>)
 800a368:	801a      	strh	r2, [r3, #0]
 800a36a:	2394      	movs	r3, #148	; 0x94
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2288      	movs	r2, #136	; 0x88
 800a372:	18ba      	adds	r2, r7, r2
 800a374:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a376:	2388      	movs	r3, #136	; 0x88
 800a378:	18fb      	adds	r3, r7, r3
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 800a380:	201c      	movs	r0, #28
 800a382:	f7fb f94d 	bl	8005620 <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	46bd      	mov	sp, r7
 800a38a:	b026      	add	sp, #152	; 0x98
 800a38c:	bc80      	pop	{r7}
 800a38e:	bc08      	pop	{r3}
 800a390:	b004      	add	sp, #16
 800a392:	4718      	bx	r3
 800a394:	2000045c 	.word	0x2000045c
 800a398:	2000035c 	.word	0x2000035c

0800a39c <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800a3a2:	e024      	b.n	800a3ee <vcom_Print+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a3a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a8:	603b      	str	r3, [r7, #0]
  return(result);
 800a3aa:	683b      	ldr	r3, [r7, #0]
  {
    BACKUP_PRIMASK();
 800a3ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3ae:	b672      	cpsid	i
    DISABLE_IRQ();
    
    CurChar = &buff[ir];
 800a3b0:	4b1b      	ldr	r3, [pc, #108]	; (800a420 <vcom_Print+0x84>)
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	001a      	movs	r2, r3
 800a3b6:	4b1b      	ldr	r3, [pc, #108]	; (800a424 <vcom_Print+0x88>)
 800a3b8:	18d3      	adds	r3, r2, r3
 800a3ba:	60bb      	str	r3, [r7, #8]
    ir= (ir+1) %BUFSIZE;
 800a3bc:	4b18      	ldr	r3, [pc, #96]	; (800a420 <vcom_Print+0x84>)
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	4a19      	ldr	r2, [pc, #100]	; (800a428 <vcom_Print+0x8c>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	d503      	bpl.n	800a3d0 <vcom_Print+0x34>
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	4a18      	ldr	r2, [pc, #96]	; (800a42c <vcom_Print+0x90>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	4b13      	ldr	r3, [pc, #76]	; (800a420 <vcom_Print+0x84>)
 800a3d4:	801a      	strh	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f383 8810 	msr	PRIMASK, r3
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800a3e0:	2396      	movs	r3, #150	; 0x96
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4812      	ldr	r0, [pc, #72]	; (800a430 <vcom_Print+0x94>)
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f7fd fe01 	bl	8007ff0 <HAL_UART_Transmit>
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800a3ee:	4b11      	ldr	r3, [pc, #68]	; (800a434 <vcom_Print+0x98>)
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	33ff      	adds	r3, #255	; 0xff
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <vcom_Print+0x84>)
 800a3fa:	8812      	ldrh	r2, [r2, #0]
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	4a0a      	ldr	r2, [pc, #40]	; (800a428 <vcom_Print+0x8c>)
 800a400:	4013      	ands	r3, r2
 800a402:	d503      	bpl.n	800a40c <vcom_Print+0x70>
 800a404:	3b01      	subs	r3, #1
 800a406:	4a09      	ldr	r2, [pc, #36]	; (800a42c <vcom_Print+0x90>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	3301      	adds	r3, #1
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dcc9      	bgt.n	800a3a4 <vcom_Print+0x8>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 800a410:	201c      	movs	r0, #28
 800a412:	f7fb f915 	bl	8005640 <HAL_NVIC_ClearPendingIRQ>
}
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	46bd      	mov	sp, r7
 800a41a:	b004      	add	sp, #16
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	46c0      	nop			; (mov r8, r8)
 800a420:	2000045e 	.word	0x2000045e
 800a424:	2000035c 	.word	0x2000035c
 800a428:	800000ff 	.word	0x800000ff
 800a42c:	ffffff00 	.word	0xffffff00
 800a430:	20000460 	.word	0x20000460
 800a434:	2000045c 	.word	0x2000045c

0800a438 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE(); 
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <HAL_UART_MspInit+0x24>)
 800a442:	4a06      	ldr	r2, [pc, #24]	; (800a45c <HAL_UART_MspInit+0x24>)
 800a444:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a446:	2180      	movs	r1, #128	; 0x80
 800a448:	0289      	lsls	r1, r1, #10
 800a44a:	430a      	orrs	r2, r1
 800a44c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
 800a44e:	f000 f807 	bl	800a460 <vcom_IoInit>
}
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	46bd      	mov	sp, r7
 800a456:	b002      	add	sp, #8
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	46c0      	nop			; (mov r8, r8)
 800a45c:	40021000 	.word	0x40021000

0800a460 <vcom_IoInit>:

void vcom_IoInit(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 800a466:	230c      	movs	r3, #12
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	0018      	movs	r0, r3
 800a46c:	2314      	movs	r3, #20
 800a46e:	001a      	movs	r2, r3
 800a470:	2100      	movs	r1, #0
 800a472:	f000 f8a8 	bl	800a5c6 <memset>
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 800a476:	4b24      	ldr	r3, [pc, #144]	; (800a508 <vcom_IoInit+0xa8>)
 800a478:	4a23      	ldr	r2, [pc, #140]	; (800a508 <vcom_IoInit+0xa8>)
 800a47a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a47c:	2101      	movs	r1, #1
 800a47e:	430a      	orrs	r2, r1
 800a480:	62da      	str	r2, [r3, #44]	; 0x2c
 800a482:	4b21      	ldr	r3, [pc, #132]	; (800a508 <vcom_IoInit+0xa8>)
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	2201      	movs	r2, #1
 800a488:	4013      	ands	r3, r2
 800a48a:	60bb      	str	r3, [r7, #8]
 800a48c:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 800a48e:	4b1e      	ldr	r3, [pc, #120]	; (800a508 <vcom_IoInit+0xa8>)
 800a490:	4a1d      	ldr	r2, [pc, #116]	; (800a508 <vcom_IoInit+0xa8>)
 800a492:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a494:	2101      	movs	r1, #1
 800a496:	430a      	orrs	r2, r1
 800a498:	62da      	str	r2, [r3, #44]	; 0x2c
 800a49a:	4b1b      	ldr	r3, [pc, #108]	; (800a508 <vcom_IoInit+0xa8>)
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	18fb      	adds	r3, r7, r3
 800a4aa:	2204      	movs	r2, #4
 800a4ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	18fb      	adds	r3, r7, r3
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800a4be:	230c      	movs	r3, #12
 800a4c0:	18fb      	adds	r3, r7, r3
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	18fb      	adds	r3, r7, r3
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	18fa      	adds	r2, r7, r3
 800a4d2:	23a0      	movs	r3, #160	; 0xa0
 800a4d4:	05db      	lsls	r3, r3, #23
 800a4d6:	0011      	movs	r1, r2
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f7fb f8c1 	bl	8005660 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 800a4de:	230c      	movs	r3, #12
 800a4e0:	18fb      	adds	r3, r7, r3
 800a4e2:	2208      	movs	r2, #8
 800a4e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	18fb      	adds	r3, r7, r3
 800a4ea:	2204      	movs	r2, #4
 800a4ec:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	18fa      	adds	r2, r7, r3
 800a4f2:	23a0      	movs	r3, #160	; 0xa0
 800a4f4:	05db      	lsls	r3, r3, #23
 800a4f6:	0011      	movs	r1, r2
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	f7fb f8b1 	bl	8005660 <HAL_GPIO_Init>
}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	46bd      	mov	sp, r7
 800a502:	b008      	add	sp, #32
 800a504:	bd80      	pop	{r7, pc}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	40021000 	.word	0x40021000

0800a50c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a50c:	480d      	ldr	r0, [pc, #52]	; (800a544 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a50e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800a510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a512:	e003      	b.n	800a51c <LoopCopyDataInit>

0800a514 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a514:	4b0c      	ldr	r3, [pc, #48]	; (800a548 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800a516:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a518:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a51a:	3104      	adds	r1, #4

0800a51c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800a51c:	480b      	ldr	r0, [pc, #44]	; (800a54c <LoopForever+0xa>)
  ldr  r3, =_edata
 800a51e:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <LoopForever+0xe>)
  adds  r2, r0, r1
 800a520:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a522:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a524:	d3f6      	bcc.n	800a514 <CopyDataInit>
  ldr  r2, =_sbss
 800a526:	4a0b      	ldr	r2, [pc, #44]	; (800a554 <LoopForever+0x12>)
  b  LoopFillZerobss
 800a528:	e002      	b.n	800a530 <LoopFillZerobss>

0800a52a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800a52a:	2300      	movs	r3, #0
  str  r3, [r2]
 800a52c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a52e:	3204      	adds	r2, #4

0800a530 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <LoopForever+0x16>)
  cmp  r2, r3
 800a532:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a534:	d3f9      	bcc.n	800a52a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800a536:	f7ff fe33 	bl	800a1a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a53a:	f000 f817 	bl	800a56c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a53e:	f7ff fb09 	bl	8009b54 <main>

0800a542 <LoopForever>:

LoopForever:
    b LoopForever
 800a542:	e7fe      	b.n	800a542 <LoopForever>
   ldr   r0, =_estack
 800a544:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800a548:	0800b3a8 	.word	0x0800b3a8
  ldr  r0, =_sdata
 800a54c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a550:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800a554:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800a558:	2000057c 	.word	0x2000057c

0800a55c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a55c:	e7fe      	b.n	800a55c <ADC1_COMP_IRQHandler>
	...

0800a560 <__errno>:
 800a560:	4b01      	ldr	r3, [pc, #4]	; (800a568 <__errno+0x8>)
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	4770      	bx	lr
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	20000030 	.word	0x20000030

0800a56c <__libc_init_array>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	2600      	movs	r6, #0
 800a570:	4d0c      	ldr	r5, [pc, #48]	; (800a5a4 <__libc_init_array+0x38>)
 800a572:	4c0d      	ldr	r4, [pc, #52]	; (800a5a8 <__libc_init_array+0x3c>)
 800a574:	1b64      	subs	r4, r4, r5
 800a576:	10a4      	asrs	r4, r4, #2
 800a578:	42a6      	cmp	r6, r4
 800a57a:	d109      	bne.n	800a590 <__libc_init_array+0x24>
 800a57c:	2600      	movs	r6, #0
 800a57e:	f000 fd8f 	bl	800b0a0 <_init>
 800a582:	4d0a      	ldr	r5, [pc, #40]	; (800a5ac <__libc_init_array+0x40>)
 800a584:	4c0a      	ldr	r4, [pc, #40]	; (800a5b0 <__libc_init_array+0x44>)
 800a586:	1b64      	subs	r4, r4, r5
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	42a6      	cmp	r6, r4
 800a58c:	d105      	bne.n	800a59a <__libc_init_array+0x2e>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	00b3      	lsls	r3, r6, #2
 800a592:	58eb      	ldr	r3, [r5, r3]
 800a594:	4798      	blx	r3
 800a596:	3601      	adds	r6, #1
 800a598:	e7ee      	b.n	800a578 <__libc_init_array+0xc>
 800a59a:	00b3      	lsls	r3, r6, #2
 800a59c:	58eb      	ldr	r3, [r5, r3]
 800a59e:	4798      	blx	r3
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	e7f2      	b.n	800a58a <__libc_init_array+0x1e>
 800a5a4:	0800b3a0 	.word	0x0800b3a0
 800a5a8:	0800b3a0 	.word	0x0800b3a0
 800a5ac:	0800b3a0 	.word	0x0800b3a0
 800a5b0:	0800b3a4 	.word	0x0800b3a4

0800a5b4 <memcpy>:
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d100      	bne.n	800a5be <memcpy+0xa>
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	5ccc      	ldrb	r4, [r1, r3]
 800a5c0:	54c4      	strb	r4, [r0, r3]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	e7f8      	b.n	800a5b8 <memcpy+0x4>

0800a5c6 <memset>:
 800a5c6:	0003      	movs	r3, r0
 800a5c8:	1882      	adds	r2, r0, r2
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d100      	bne.n	800a5d0 <memset+0xa>
 800a5ce:	4770      	bx	lr
 800a5d0:	7019      	strb	r1, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	e7f9      	b.n	800a5ca <memset+0x4>
	...

0800a5d8 <_vsiprintf_r>:
 800a5d8:	b530      	push	{r4, r5, lr}
 800a5da:	b09b      	sub	sp, #108	; 0x6c
 800a5dc:	9100      	str	r1, [sp, #0]
 800a5de:	9104      	str	r1, [sp, #16]
 800a5e0:	4908      	ldr	r1, [pc, #32]	; (800a604 <_vsiprintf_r+0x2c>)
 800a5e2:	466d      	mov	r5, sp
 800a5e4:	9102      	str	r1, [sp, #8]
 800a5e6:	9105      	str	r1, [sp, #20]
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	2482      	movs	r4, #130	; 0x82
 800a5ec:	4249      	negs	r1, r1
 800a5ee:	81e9      	strh	r1, [r5, #14]
 800a5f0:	00a4      	lsls	r4, r4, #2
 800a5f2:	4669      	mov	r1, sp
 800a5f4:	81ac      	strh	r4, [r5, #12]
 800a5f6:	f000 f875 	bl	800a6e4 <_svfiprintf_r>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9a00      	ldr	r2, [sp, #0]
 800a5fe:	7013      	strb	r3, [r2, #0]
 800a600:	b01b      	add	sp, #108	; 0x6c
 800a602:	bd30      	pop	{r4, r5, pc}
 800a604:	7fffffff 	.word	0x7fffffff

0800a608 <vsiprintf>:
 800a608:	b510      	push	{r4, lr}
 800a60a:	0013      	movs	r3, r2
 800a60c:	000a      	movs	r2, r1
 800a60e:	0001      	movs	r1, r0
 800a610:	4802      	ldr	r0, [pc, #8]	; (800a61c <vsiprintf+0x14>)
 800a612:	6800      	ldr	r0, [r0, #0]
 800a614:	f7ff ffe0 	bl	800a5d8 <_vsiprintf_r>
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	20000030 	.word	0x20000030

0800a620 <__ssputs_r>:
 800a620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a622:	688e      	ldr	r6, [r1, #8]
 800a624:	b085      	sub	sp, #20
 800a626:	0007      	movs	r7, r0
 800a628:	000c      	movs	r4, r1
 800a62a:	9203      	str	r2, [sp, #12]
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	429e      	cmp	r6, r3
 800a630:	d839      	bhi.n	800a6a6 <__ssputs_r+0x86>
 800a632:	2390      	movs	r3, #144	; 0x90
 800a634:	898a      	ldrh	r2, [r1, #12]
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	421a      	tst	r2, r3
 800a63a:	d034      	beq.n	800a6a6 <__ssputs_r+0x86>
 800a63c:	2503      	movs	r5, #3
 800a63e:	6909      	ldr	r1, [r1, #16]
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	1a5b      	subs	r3, r3, r1
 800a644:	9302      	str	r3, [sp, #8]
 800a646:	6963      	ldr	r3, [r4, #20]
 800a648:	9802      	ldr	r0, [sp, #8]
 800a64a:	435d      	muls	r5, r3
 800a64c:	0feb      	lsrs	r3, r5, #31
 800a64e:	195d      	adds	r5, r3, r5
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	106d      	asrs	r5, r5, #1
 800a654:	3301      	adds	r3, #1
 800a656:	181b      	adds	r3, r3, r0
 800a658:	42ab      	cmp	r3, r5
 800a65a:	d900      	bls.n	800a65e <__ssputs_r+0x3e>
 800a65c:	001d      	movs	r5, r3
 800a65e:	0553      	lsls	r3, r2, #21
 800a660:	d532      	bpl.n	800a6c8 <__ssputs_r+0xa8>
 800a662:	0029      	movs	r1, r5
 800a664:	0038      	movs	r0, r7
 800a666:	f000 fb31 	bl	800accc <_malloc_r>
 800a66a:	1e06      	subs	r6, r0, #0
 800a66c:	d109      	bne.n	800a682 <__ssputs_r+0x62>
 800a66e:	230c      	movs	r3, #12
 800a670:	603b      	str	r3, [r7, #0]
 800a672:	2340      	movs	r3, #64	; 0x40
 800a674:	2001      	movs	r0, #1
 800a676:	89a2      	ldrh	r2, [r4, #12]
 800a678:	4240      	negs	r0, r0
 800a67a:	4313      	orrs	r3, r2
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	b005      	add	sp, #20
 800a680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a682:	9a02      	ldr	r2, [sp, #8]
 800a684:	6921      	ldr	r1, [r4, #16]
 800a686:	f7ff ff95 	bl	800a5b4 <memcpy>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	4a14      	ldr	r2, [pc, #80]	; (800a6e0 <__ssputs_r+0xc0>)
 800a68e:	401a      	ands	r2, r3
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	4313      	orrs	r3, r2
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	9b02      	ldr	r3, [sp, #8]
 800a698:	6126      	str	r6, [r4, #16]
 800a69a:	18f6      	adds	r6, r6, r3
 800a69c:	6026      	str	r6, [r4, #0]
 800a69e:	6165      	str	r5, [r4, #20]
 800a6a0:	9e01      	ldr	r6, [sp, #4]
 800a6a2:	1aed      	subs	r5, r5, r3
 800a6a4:	60a5      	str	r5, [r4, #8]
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	42b3      	cmp	r3, r6
 800a6aa:	d200      	bcs.n	800a6ae <__ssputs_r+0x8e>
 800a6ac:	001e      	movs	r6, r3
 800a6ae:	0032      	movs	r2, r6
 800a6b0:	9903      	ldr	r1, [sp, #12]
 800a6b2:	6820      	ldr	r0, [r4, #0]
 800a6b4:	f000 faad 	bl	800ac12 <memmove>
 800a6b8:	68a3      	ldr	r3, [r4, #8]
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	1b9b      	subs	r3, r3, r6
 800a6be:	60a3      	str	r3, [r4, #8]
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	199e      	adds	r6, r3, r6
 800a6c4:	6026      	str	r6, [r4, #0]
 800a6c6:	e7da      	b.n	800a67e <__ssputs_r+0x5e>
 800a6c8:	002a      	movs	r2, r5
 800a6ca:	0038      	movs	r0, r7
 800a6cc:	f000 fb5c 	bl	800ad88 <_realloc_r>
 800a6d0:	1e06      	subs	r6, r0, #0
 800a6d2:	d1e0      	bne.n	800a696 <__ssputs_r+0x76>
 800a6d4:	6921      	ldr	r1, [r4, #16]
 800a6d6:	0038      	movs	r0, r7
 800a6d8:	f000 faae 	bl	800ac38 <_free_r>
 800a6dc:	e7c7      	b.n	800a66e <__ssputs_r+0x4e>
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	fffffb7f 	.word	0xfffffb7f

0800a6e4 <_svfiprintf_r>:
 800a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e6:	b09f      	sub	sp, #124	; 0x7c
 800a6e8:	9002      	str	r0, [sp, #8]
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	898b      	ldrh	r3, [r1, #12]
 800a6ee:	000f      	movs	r7, r1
 800a6f0:	0016      	movs	r6, r2
 800a6f2:	061b      	lsls	r3, r3, #24
 800a6f4:	d511      	bpl.n	800a71a <_svfiprintf_r+0x36>
 800a6f6:	690b      	ldr	r3, [r1, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10e      	bne.n	800a71a <_svfiprintf_r+0x36>
 800a6fc:	2140      	movs	r1, #64	; 0x40
 800a6fe:	f000 fae5 	bl	800accc <_malloc_r>
 800a702:	6038      	str	r0, [r7, #0]
 800a704:	6138      	str	r0, [r7, #16]
 800a706:	2800      	cmp	r0, #0
 800a708:	d105      	bne.n	800a716 <_svfiprintf_r+0x32>
 800a70a:	230c      	movs	r3, #12
 800a70c:	9a02      	ldr	r2, [sp, #8]
 800a70e:	3801      	subs	r0, #1
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	b01f      	add	sp, #124	; 0x7c
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a716:	2340      	movs	r3, #64	; 0x40
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	2300      	movs	r3, #0
 800a71c:	ad06      	add	r5, sp, #24
 800a71e:	616b      	str	r3, [r5, #20]
 800a720:	3320      	adds	r3, #32
 800a722:	766b      	strb	r3, [r5, #25]
 800a724:	3310      	adds	r3, #16
 800a726:	76ab      	strb	r3, [r5, #26]
 800a728:	0034      	movs	r4, r6
 800a72a:	7823      	ldrb	r3, [r4, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d147      	bne.n	800a7c0 <_svfiprintf_r+0xdc>
 800a730:	1ba3      	subs	r3, r4, r6
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	d00d      	beq.n	800a752 <_svfiprintf_r+0x6e>
 800a736:	1ba3      	subs	r3, r4, r6
 800a738:	0032      	movs	r2, r6
 800a73a:	0039      	movs	r1, r7
 800a73c:	9802      	ldr	r0, [sp, #8]
 800a73e:	f7ff ff6f 	bl	800a620 <__ssputs_r>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d100      	bne.n	800a748 <_svfiprintf_r+0x64>
 800a746:	e0b5      	b.n	800a8b4 <_svfiprintf_r+0x1d0>
 800a748:	696a      	ldr	r2, [r5, #20]
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	4694      	mov	ip, r2
 800a74e:	4463      	add	r3, ip
 800a750:	616b      	str	r3, [r5, #20]
 800a752:	7823      	ldrb	r3, [r4, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d100      	bne.n	800a75a <_svfiprintf_r+0x76>
 800a758:	e0ac      	b.n	800a8b4 <_svfiprintf_r+0x1d0>
 800a75a:	2201      	movs	r2, #1
 800a75c:	2300      	movs	r3, #0
 800a75e:	4252      	negs	r2, r2
 800a760:	606a      	str	r2, [r5, #4]
 800a762:	a902      	add	r1, sp, #8
 800a764:	3254      	adds	r2, #84	; 0x54
 800a766:	1852      	adds	r2, r2, r1
 800a768:	3401      	adds	r4, #1
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	60eb      	str	r3, [r5, #12]
 800a76e:	60ab      	str	r3, [r5, #8]
 800a770:	7013      	strb	r3, [r2, #0]
 800a772:	65ab      	str	r3, [r5, #88]	; 0x58
 800a774:	4e58      	ldr	r6, [pc, #352]	; (800a8d8 <_svfiprintf_r+0x1f4>)
 800a776:	2205      	movs	r2, #5
 800a778:	7821      	ldrb	r1, [r4, #0]
 800a77a:	0030      	movs	r0, r6
 800a77c:	f000 fa3e 	bl	800abfc <memchr>
 800a780:	1c62      	adds	r2, r4, #1
 800a782:	2800      	cmp	r0, #0
 800a784:	d120      	bne.n	800a7c8 <_svfiprintf_r+0xe4>
 800a786:	6829      	ldr	r1, [r5, #0]
 800a788:	06cb      	lsls	r3, r1, #27
 800a78a:	d504      	bpl.n	800a796 <_svfiprintf_r+0xb2>
 800a78c:	2353      	movs	r3, #83	; 0x53
 800a78e:	ae02      	add	r6, sp, #8
 800a790:	3020      	adds	r0, #32
 800a792:	199b      	adds	r3, r3, r6
 800a794:	7018      	strb	r0, [r3, #0]
 800a796:	070b      	lsls	r3, r1, #28
 800a798:	d504      	bpl.n	800a7a4 <_svfiprintf_r+0xc0>
 800a79a:	2353      	movs	r3, #83	; 0x53
 800a79c:	202b      	movs	r0, #43	; 0x2b
 800a79e:	ae02      	add	r6, sp, #8
 800a7a0:	199b      	adds	r3, r3, r6
 800a7a2:	7018      	strb	r0, [r3, #0]
 800a7a4:	7823      	ldrb	r3, [r4, #0]
 800a7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a8:	d016      	beq.n	800a7d8 <_svfiprintf_r+0xf4>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	210a      	movs	r1, #10
 800a7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b0:	7822      	ldrb	r2, [r4, #0]
 800a7b2:	3a30      	subs	r2, #48	; 0x30
 800a7b4:	2a09      	cmp	r2, #9
 800a7b6:	d955      	bls.n	800a864 <_svfiprintf_r+0x180>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d015      	beq.n	800a7e8 <_svfiprintf_r+0x104>
 800a7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7be:	e013      	b.n	800a7e8 <_svfiprintf_r+0x104>
 800a7c0:	2b25      	cmp	r3, #37	; 0x25
 800a7c2:	d0b5      	beq.n	800a730 <_svfiprintf_r+0x4c>
 800a7c4:	3401      	adds	r4, #1
 800a7c6:	e7b0      	b.n	800a72a <_svfiprintf_r+0x46>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	1b80      	subs	r0, r0, r6
 800a7cc:	4083      	lsls	r3, r0
 800a7ce:	6829      	ldr	r1, [r5, #0]
 800a7d0:	0014      	movs	r4, r2
 800a7d2:	430b      	orrs	r3, r1
 800a7d4:	602b      	str	r3, [r5, #0]
 800a7d6:	e7cd      	b.n	800a774 <_svfiprintf_r+0x90>
 800a7d8:	9b05      	ldr	r3, [sp, #20]
 800a7da:	1d18      	adds	r0, r3, #4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	9005      	str	r0, [sp, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	db39      	blt.n	800a858 <_svfiprintf_r+0x174>
 800a7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e6:	0014      	movs	r4, r2
 800a7e8:	7823      	ldrb	r3, [r4, #0]
 800a7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ec:	d10b      	bne.n	800a806 <_svfiprintf_r+0x122>
 800a7ee:	7863      	ldrb	r3, [r4, #1]
 800a7f0:	1c62      	adds	r2, r4, #1
 800a7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f4:	d13e      	bne.n	800a874 <_svfiprintf_r+0x190>
 800a7f6:	9b05      	ldr	r3, [sp, #20]
 800a7f8:	3402      	adds	r4, #2
 800a7fa:	1d1a      	adds	r2, r3, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	9205      	str	r2, [sp, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	db34      	blt.n	800a86e <_svfiprintf_r+0x18a>
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	4e35      	ldr	r6, [pc, #212]	; (800a8dc <_svfiprintf_r+0x1f8>)
 800a808:	7821      	ldrb	r1, [r4, #0]
 800a80a:	2203      	movs	r2, #3
 800a80c:	0030      	movs	r0, r6
 800a80e:	f000 f9f5 	bl	800abfc <memchr>
 800a812:	2800      	cmp	r0, #0
 800a814:	d006      	beq.n	800a824 <_svfiprintf_r+0x140>
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	1b80      	subs	r0, r0, r6
 800a81a:	4083      	lsls	r3, r0
 800a81c:	682a      	ldr	r2, [r5, #0]
 800a81e:	3401      	adds	r4, #1
 800a820:	4313      	orrs	r3, r2
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	7821      	ldrb	r1, [r4, #0]
 800a826:	2206      	movs	r2, #6
 800a828:	482d      	ldr	r0, [pc, #180]	; (800a8e0 <_svfiprintf_r+0x1fc>)
 800a82a:	1c66      	adds	r6, r4, #1
 800a82c:	7629      	strb	r1, [r5, #24]
 800a82e:	f000 f9e5 	bl	800abfc <memchr>
 800a832:	2800      	cmp	r0, #0
 800a834:	d046      	beq.n	800a8c4 <_svfiprintf_r+0x1e0>
 800a836:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <_svfiprintf_r+0x200>)
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d12f      	bne.n	800a89c <_svfiprintf_r+0x1b8>
 800a83c:	6829      	ldr	r1, [r5, #0]
 800a83e:	9b05      	ldr	r3, [sp, #20]
 800a840:	2207      	movs	r2, #7
 800a842:	05c9      	lsls	r1, r1, #23
 800a844:	d528      	bpl.n	800a898 <_svfiprintf_r+0x1b4>
 800a846:	189b      	adds	r3, r3, r2
 800a848:	4393      	bics	r3, r2
 800a84a:	3308      	adds	r3, #8
 800a84c:	9305      	str	r3, [sp, #20]
 800a84e:	696b      	ldr	r3, [r5, #20]
 800a850:	9a03      	ldr	r2, [sp, #12]
 800a852:	189b      	adds	r3, r3, r2
 800a854:	616b      	str	r3, [r5, #20]
 800a856:	e767      	b.n	800a728 <_svfiprintf_r+0x44>
 800a858:	425b      	negs	r3, r3
 800a85a:	60eb      	str	r3, [r5, #12]
 800a85c:	2302      	movs	r3, #2
 800a85e:	430b      	orrs	r3, r1
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	e7c0      	b.n	800a7e6 <_svfiprintf_r+0x102>
 800a864:	434b      	muls	r3, r1
 800a866:	3401      	adds	r4, #1
 800a868:	189b      	adds	r3, r3, r2
 800a86a:	2001      	movs	r0, #1
 800a86c:	e7a0      	b.n	800a7b0 <_svfiprintf_r+0xcc>
 800a86e:	2301      	movs	r3, #1
 800a870:	425b      	negs	r3, r3
 800a872:	e7c7      	b.n	800a804 <_svfiprintf_r+0x120>
 800a874:	2300      	movs	r3, #0
 800a876:	0014      	movs	r4, r2
 800a878:	200a      	movs	r0, #10
 800a87a:	001a      	movs	r2, r3
 800a87c:	606b      	str	r3, [r5, #4]
 800a87e:	7821      	ldrb	r1, [r4, #0]
 800a880:	3930      	subs	r1, #48	; 0x30
 800a882:	2909      	cmp	r1, #9
 800a884:	d903      	bls.n	800a88e <_svfiprintf_r+0x1aa>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0bd      	beq.n	800a806 <_svfiprintf_r+0x122>
 800a88a:	9207      	str	r2, [sp, #28]
 800a88c:	e7bb      	b.n	800a806 <_svfiprintf_r+0x122>
 800a88e:	4342      	muls	r2, r0
 800a890:	3401      	adds	r4, #1
 800a892:	1852      	adds	r2, r2, r1
 800a894:	2301      	movs	r3, #1
 800a896:	e7f2      	b.n	800a87e <_svfiprintf_r+0x19a>
 800a898:	3307      	adds	r3, #7
 800a89a:	e7d5      	b.n	800a848 <_svfiprintf_r+0x164>
 800a89c:	ab05      	add	r3, sp, #20
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	003a      	movs	r2, r7
 800a8a2:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <_svfiprintf_r+0x204>)
 800a8a4:	0029      	movs	r1, r5
 800a8a6:	9802      	ldr	r0, [sp, #8]
 800a8a8:	e000      	b.n	800a8ac <_svfiprintf_r+0x1c8>
 800a8aa:	bf00      	nop
 800a8ac:	9003      	str	r0, [sp, #12]
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	d1cc      	bne.n	800a84e <_svfiprintf_r+0x16a>
 800a8b4:	89bb      	ldrh	r3, [r7, #12]
 800a8b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a8b8:	065b      	lsls	r3, r3, #25
 800a8ba:	d400      	bmi.n	800a8be <_svfiprintf_r+0x1da>
 800a8bc:	e729      	b.n	800a712 <_svfiprintf_r+0x2e>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	4240      	negs	r0, r0
 800a8c2:	e726      	b.n	800a712 <_svfiprintf_r+0x2e>
 800a8c4:	ab05      	add	r3, sp, #20
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	003a      	movs	r2, r7
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <_svfiprintf_r+0x204>)
 800a8cc:	0029      	movs	r1, r5
 800a8ce:	9802      	ldr	r0, [sp, #8]
 800a8d0:	f000 f87a 	bl	800a9c8 <_printf_i>
 800a8d4:	e7ea      	b.n	800a8ac <_svfiprintf_r+0x1c8>
 800a8d6:	46c0      	nop			; (mov r8, r8)
 800a8d8:	0800b364 	.word	0x0800b364
 800a8dc:	0800b36a 	.word	0x0800b36a
 800a8e0:	0800b36e 	.word	0x0800b36e
 800a8e4:	00000000 	.word	0x00000000
 800a8e8:	0800a621 	.word	0x0800a621

0800a8ec <_printf_common>:
 800a8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8ee:	0015      	movs	r5, r2
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	688a      	ldr	r2, [r1, #8]
 800a8f4:	690b      	ldr	r3, [r1, #16]
 800a8f6:	9000      	str	r0, [sp, #0]
 800a8f8:	000c      	movs	r4, r1
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	da00      	bge.n	800a900 <_printf_common+0x14>
 800a8fe:	0013      	movs	r3, r2
 800a900:	0022      	movs	r2, r4
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	3243      	adds	r2, #67	; 0x43
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d001      	beq.n	800a910 <_printf_common+0x24>
 800a90c:	3301      	adds	r3, #1
 800a90e:	602b      	str	r3, [r5, #0]
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	069b      	lsls	r3, r3, #26
 800a914:	d502      	bpl.n	800a91c <_printf_common+0x30>
 800a916:	682b      	ldr	r3, [r5, #0]
 800a918:	3302      	adds	r3, #2
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	2706      	movs	r7, #6
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	401f      	ands	r7, r3
 800a922:	d027      	beq.n	800a974 <_printf_common+0x88>
 800a924:	0023      	movs	r3, r4
 800a926:	3343      	adds	r3, #67	; 0x43
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	1e5a      	subs	r2, r3, #1
 800a92c:	4193      	sbcs	r3, r2
 800a92e:	6822      	ldr	r2, [r4, #0]
 800a930:	0692      	lsls	r2, r2, #26
 800a932:	d430      	bmi.n	800a996 <_printf_common+0xaa>
 800a934:	0022      	movs	r2, r4
 800a936:	9901      	ldr	r1, [sp, #4]
 800a938:	3243      	adds	r2, #67	; 0x43
 800a93a:	9800      	ldr	r0, [sp, #0]
 800a93c:	9e08      	ldr	r6, [sp, #32]
 800a93e:	47b0      	blx	r6
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d025      	beq.n	800a990 <_printf_common+0xa4>
 800a944:	2306      	movs	r3, #6
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	682a      	ldr	r2, [r5, #0]
 800a94a:	68e1      	ldr	r1, [r4, #12]
 800a94c:	4003      	ands	r3, r0
 800a94e:	2500      	movs	r5, #0
 800a950:	2b04      	cmp	r3, #4
 800a952:	d103      	bne.n	800a95c <_printf_common+0x70>
 800a954:	1a8d      	subs	r5, r1, r2
 800a956:	43eb      	mvns	r3, r5
 800a958:	17db      	asrs	r3, r3, #31
 800a95a:	401d      	ands	r5, r3
 800a95c:	68a3      	ldr	r3, [r4, #8]
 800a95e:	6922      	ldr	r2, [r4, #16]
 800a960:	4293      	cmp	r3, r2
 800a962:	dd01      	ble.n	800a968 <_printf_common+0x7c>
 800a964:	1a9b      	subs	r3, r3, r2
 800a966:	18ed      	adds	r5, r5, r3
 800a968:	2700      	movs	r7, #0
 800a96a:	42bd      	cmp	r5, r7
 800a96c:	d120      	bne.n	800a9b0 <_printf_common+0xc4>
 800a96e:	2000      	movs	r0, #0
 800a970:	e010      	b.n	800a994 <_printf_common+0xa8>
 800a972:	3701      	adds	r7, #1
 800a974:	68e3      	ldr	r3, [r4, #12]
 800a976:	682a      	ldr	r2, [r5, #0]
 800a978:	1a9b      	subs	r3, r3, r2
 800a97a:	429f      	cmp	r7, r3
 800a97c:	dad2      	bge.n	800a924 <_printf_common+0x38>
 800a97e:	0022      	movs	r2, r4
 800a980:	2301      	movs	r3, #1
 800a982:	3219      	adds	r2, #25
 800a984:	9901      	ldr	r1, [sp, #4]
 800a986:	9800      	ldr	r0, [sp, #0]
 800a988:	9e08      	ldr	r6, [sp, #32]
 800a98a:	47b0      	blx	r6
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d1f0      	bne.n	800a972 <_printf_common+0x86>
 800a990:	2001      	movs	r0, #1
 800a992:	4240      	negs	r0, r0
 800a994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a996:	2030      	movs	r0, #48	; 0x30
 800a998:	18e1      	adds	r1, r4, r3
 800a99a:	3143      	adds	r1, #67	; 0x43
 800a99c:	7008      	strb	r0, [r1, #0]
 800a99e:	0021      	movs	r1, r4
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	3145      	adds	r1, #69	; 0x45
 800a9a4:	7809      	ldrb	r1, [r1, #0]
 800a9a6:	18a2      	adds	r2, r4, r2
 800a9a8:	3243      	adds	r2, #67	; 0x43
 800a9aa:	3302      	adds	r3, #2
 800a9ac:	7011      	strb	r1, [r2, #0]
 800a9ae:	e7c1      	b.n	800a934 <_printf_common+0x48>
 800a9b0:	0022      	movs	r2, r4
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	321a      	adds	r2, #26
 800a9b6:	9901      	ldr	r1, [sp, #4]
 800a9b8:	9800      	ldr	r0, [sp, #0]
 800a9ba:	9e08      	ldr	r6, [sp, #32]
 800a9bc:	47b0      	blx	r6
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	d0e6      	beq.n	800a990 <_printf_common+0xa4>
 800a9c2:	3701      	adds	r7, #1
 800a9c4:	e7d1      	b.n	800a96a <_printf_common+0x7e>
	...

0800a9c8 <_printf_i>:
 800a9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ca:	b08b      	sub	sp, #44	; 0x2c
 800a9cc:	9206      	str	r2, [sp, #24]
 800a9ce:	000a      	movs	r2, r1
 800a9d0:	3243      	adds	r2, #67	; 0x43
 800a9d2:	9307      	str	r3, [sp, #28]
 800a9d4:	9005      	str	r0, [sp, #20]
 800a9d6:	9204      	str	r2, [sp, #16]
 800a9d8:	7e0a      	ldrb	r2, [r1, #24]
 800a9da:	000c      	movs	r4, r1
 800a9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9de:	2a6e      	cmp	r2, #110	; 0x6e
 800a9e0:	d100      	bne.n	800a9e4 <_printf_i+0x1c>
 800a9e2:	e08f      	b.n	800ab04 <_printf_i+0x13c>
 800a9e4:	d817      	bhi.n	800aa16 <_printf_i+0x4e>
 800a9e6:	2a63      	cmp	r2, #99	; 0x63
 800a9e8:	d02c      	beq.n	800aa44 <_printf_i+0x7c>
 800a9ea:	d808      	bhi.n	800a9fe <_printf_i+0x36>
 800a9ec:	2a00      	cmp	r2, #0
 800a9ee:	d100      	bne.n	800a9f2 <_printf_i+0x2a>
 800a9f0:	e099      	b.n	800ab26 <_printf_i+0x15e>
 800a9f2:	2a58      	cmp	r2, #88	; 0x58
 800a9f4:	d054      	beq.n	800aaa0 <_printf_i+0xd8>
 800a9f6:	0026      	movs	r6, r4
 800a9f8:	3642      	adds	r6, #66	; 0x42
 800a9fa:	7032      	strb	r2, [r6, #0]
 800a9fc:	e029      	b.n	800aa52 <_printf_i+0x8a>
 800a9fe:	2a64      	cmp	r2, #100	; 0x64
 800aa00:	d001      	beq.n	800aa06 <_printf_i+0x3e>
 800aa02:	2a69      	cmp	r2, #105	; 0x69
 800aa04:	d1f7      	bne.n	800a9f6 <_printf_i+0x2e>
 800aa06:	6821      	ldr	r1, [r4, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	0608      	lsls	r0, r1, #24
 800aa0c:	d523      	bpl.n	800aa56 <_printf_i+0x8e>
 800aa0e:	1d11      	adds	r1, r2, #4
 800aa10:	6019      	str	r1, [r3, #0]
 800aa12:	6815      	ldr	r5, [r2, #0]
 800aa14:	e025      	b.n	800aa62 <_printf_i+0x9a>
 800aa16:	2a73      	cmp	r2, #115	; 0x73
 800aa18:	d100      	bne.n	800aa1c <_printf_i+0x54>
 800aa1a:	e088      	b.n	800ab2e <_printf_i+0x166>
 800aa1c:	d808      	bhi.n	800aa30 <_printf_i+0x68>
 800aa1e:	2a6f      	cmp	r2, #111	; 0x6f
 800aa20:	d029      	beq.n	800aa76 <_printf_i+0xae>
 800aa22:	2a70      	cmp	r2, #112	; 0x70
 800aa24:	d1e7      	bne.n	800a9f6 <_printf_i+0x2e>
 800aa26:	2220      	movs	r2, #32
 800aa28:	6809      	ldr	r1, [r1, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	6022      	str	r2, [r4, #0]
 800aa2e:	e003      	b.n	800aa38 <_printf_i+0x70>
 800aa30:	2a75      	cmp	r2, #117	; 0x75
 800aa32:	d020      	beq.n	800aa76 <_printf_i+0xae>
 800aa34:	2a78      	cmp	r2, #120	; 0x78
 800aa36:	d1de      	bne.n	800a9f6 <_printf_i+0x2e>
 800aa38:	0022      	movs	r2, r4
 800aa3a:	2178      	movs	r1, #120	; 0x78
 800aa3c:	3245      	adds	r2, #69	; 0x45
 800aa3e:	7011      	strb	r1, [r2, #0]
 800aa40:	4a6c      	ldr	r2, [pc, #432]	; (800abf4 <_printf_i+0x22c>)
 800aa42:	e030      	b.n	800aaa6 <_printf_i+0xde>
 800aa44:	000e      	movs	r6, r1
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	3642      	adds	r6, #66	; 0x42
 800aa4a:	1d11      	adds	r1, r2, #4
 800aa4c:	6019      	str	r1, [r3, #0]
 800aa4e:	6813      	ldr	r3, [r2, #0]
 800aa50:	7033      	strb	r3, [r6, #0]
 800aa52:	2301      	movs	r3, #1
 800aa54:	e079      	b.n	800ab4a <_printf_i+0x182>
 800aa56:	0649      	lsls	r1, r1, #25
 800aa58:	d5d9      	bpl.n	800aa0e <_printf_i+0x46>
 800aa5a:	1d11      	adds	r1, r2, #4
 800aa5c:	6019      	str	r1, [r3, #0]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	5ed5      	ldrsh	r5, [r2, r3]
 800aa62:	2d00      	cmp	r5, #0
 800aa64:	da03      	bge.n	800aa6e <_printf_i+0xa6>
 800aa66:	232d      	movs	r3, #45	; 0x2d
 800aa68:	9a04      	ldr	r2, [sp, #16]
 800aa6a:	426d      	negs	r5, r5
 800aa6c:	7013      	strb	r3, [r2, #0]
 800aa6e:	4b62      	ldr	r3, [pc, #392]	; (800abf8 <_printf_i+0x230>)
 800aa70:	270a      	movs	r7, #10
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	e02f      	b.n	800aad6 <_printf_i+0x10e>
 800aa76:	6820      	ldr	r0, [r4, #0]
 800aa78:	6819      	ldr	r1, [r3, #0]
 800aa7a:	0605      	lsls	r5, r0, #24
 800aa7c:	d503      	bpl.n	800aa86 <_printf_i+0xbe>
 800aa7e:	1d08      	adds	r0, r1, #4
 800aa80:	6018      	str	r0, [r3, #0]
 800aa82:	680d      	ldr	r5, [r1, #0]
 800aa84:	e005      	b.n	800aa92 <_printf_i+0xca>
 800aa86:	0640      	lsls	r0, r0, #25
 800aa88:	d5f9      	bpl.n	800aa7e <_printf_i+0xb6>
 800aa8a:	680d      	ldr	r5, [r1, #0]
 800aa8c:	1d08      	adds	r0, r1, #4
 800aa8e:	6018      	str	r0, [r3, #0]
 800aa90:	b2ad      	uxth	r5, r5
 800aa92:	4b59      	ldr	r3, [pc, #356]	; (800abf8 <_printf_i+0x230>)
 800aa94:	2708      	movs	r7, #8
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	2a6f      	cmp	r2, #111	; 0x6f
 800aa9a:	d018      	beq.n	800aace <_printf_i+0x106>
 800aa9c:	270a      	movs	r7, #10
 800aa9e:	e016      	b.n	800aace <_printf_i+0x106>
 800aaa0:	3145      	adds	r1, #69	; 0x45
 800aaa2:	700a      	strb	r2, [r1, #0]
 800aaa4:	4a54      	ldr	r2, [pc, #336]	; (800abf8 <_printf_i+0x230>)
 800aaa6:	9203      	str	r2, [sp, #12]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6821      	ldr	r1, [r4, #0]
 800aaac:	1d10      	adds	r0, r2, #4
 800aaae:	6018      	str	r0, [r3, #0]
 800aab0:	6815      	ldr	r5, [r2, #0]
 800aab2:	0608      	lsls	r0, r1, #24
 800aab4:	d522      	bpl.n	800aafc <_printf_i+0x134>
 800aab6:	07cb      	lsls	r3, r1, #31
 800aab8:	d502      	bpl.n	800aac0 <_printf_i+0xf8>
 800aaba:	2320      	movs	r3, #32
 800aabc:	4319      	orrs	r1, r3
 800aabe:	6021      	str	r1, [r4, #0]
 800aac0:	2710      	movs	r7, #16
 800aac2:	2d00      	cmp	r5, #0
 800aac4:	d103      	bne.n	800aace <_printf_i+0x106>
 800aac6:	2320      	movs	r3, #32
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	439a      	bics	r2, r3
 800aacc:	6022      	str	r2, [r4, #0]
 800aace:	0023      	movs	r3, r4
 800aad0:	2200      	movs	r2, #0
 800aad2:	3343      	adds	r3, #67	; 0x43
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	6863      	ldr	r3, [r4, #4]
 800aad8:	60a3      	str	r3, [r4, #8]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	db5c      	blt.n	800ab98 <_printf_i+0x1d0>
 800aade:	2204      	movs	r2, #4
 800aae0:	6821      	ldr	r1, [r4, #0]
 800aae2:	4391      	bics	r1, r2
 800aae4:	6021      	str	r1, [r4, #0]
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	d158      	bne.n	800ab9c <_printf_i+0x1d4>
 800aaea:	9e04      	ldr	r6, [sp, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d064      	beq.n	800abba <_printf_i+0x1f2>
 800aaf0:	0026      	movs	r6, r4
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	3642      	adds	r6, #66	; 0x42
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	7033      	strb	r3, [r6, #0]
 800aafa:	e05e      	b.n	800abba <_printf_i+0x1f2>
 800aafc:	0648      	lsls	r0, r1, #25
 800aafe:	d5da      	bpl.n	800aab6 <_printf_i+0xee>
 800ab00:	b2ad      	uxth	r5, r5
 800ab02:	e7d8      	b.n	800aab6 <_printf_i+0xee>
 800ab04:	6809      	ldr	r1, [r1, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	0608      	lsls	r0, r1, #24
 800ab0a:	d505      	bpl.n	800ab18 <_printf_i+0x150>
 800ab0c:	1d11      	adds	r1, r2, #4
 800ab0e:	6019      	str	r1, [r3, #0]
 800ab10:	6813      	ldr	r3, [r2, #0]
 800ab12:	6962      	ldr	r2, [r4, #20]
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	e006      	b.n	800ab26 <_printf_i+0x15e>
 800ab18:	0649      	lsls	r1, r1, #25
 800ab1a:	d5f7      	bpl.n	800ab0c <_printf_i+0x144>
 800ab1c:	1d11      	adds	r1, r2, #4
 800ab1e:	6019      	str	r1, [r3, #0]
 800ab20:	6813      	ldr	r3, [r2, #0]
 800ab22:	8aa2      	ldrh	r2, [r4, #20]
 800ab24:	801a      	strh	r2, [r3, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	9e04      	ldr	r6, [sp, #16]
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	e054      	b.n	800abd8 <_printf_i+0x210>
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	1d11      	adds	r1, r2, #4
 800ab32:	6019      	str	r1, [r3, #0]
 800ab34:	6816      	ldr	r6, [r2, #0]
 800ab36:	2100      	movs	r1, #0
 800ab38:	6862      	ldr	r2, [r4, #4]
 800ab3a:	0030      	movs	r0, r6
 800ab3c:	f000 f85e 	bl	800abfc <memchr>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d001      	beq.n	800ab48 <_printf_i+0x180>
 800ab44:	1b80      	subs	r0, r0, r6
 800ab46:	6060      	str	r0, [r4, #4]
 800ab48:	6863      	ldr	r3, [r4, #4]
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9a04      	ldr	r2, [sp, #16]
 800ab50:	7013      	strb	r3, [r2, #0]
 800ab52:	e041      	b.n	800abd8 <_printf_i+0x210>
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	0032      	movs	r2, r6
 800ab58:	9906      	ldr	r1, [sp, #24]
 800ab5a:	9805      	ldr	r0, [sp, #20]
 800ab5c:	9d07      	ldr	r5, [sp, #28]
 800ab5e:	47a8      	blx	r5
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d043      	beq.n	800abec <_printf_i+0x224>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	2500      	movs	r5, #0
 800ab68:	079b      	lsls	r3, r3, #30
 800ab6a:	d40f      	bmi.n	800ab8c <_printf_i+0x1c4>
 800ab6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6e:	68e0      	ldr	r0, [r4, #12]
 800ab70:	4298      	cmp	r0, r3
 800ab72:	da3d      	bge.n	800abf0 <_printf_i+0x228>
 800ab74:	0018      	movs	r0, r3
 800ab76:	e03b      	b.n	800abf0 <_printf_i+0x228>
 800ab78:	0022      	movs	r2, r4
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	3219      	adds	r2, #25
 800ab7e:	9906      	ldr	r1, [sp, #24]
 800ab80:	9805      	ldr	r0, [sp, #20]
 800ab82:	9e07      	ldr	r6, [sp, #28]
 800ab84:	47b0      	blx	r6
 800ab86:	1c43      	adds	r3, r0, #1
 800ab88:	d030      	beq.n	800abec <_printf_i+0x224>
 800ab8a:	3501      	adds	r5, #1
 800ab8c:	68e3      	ldr	r3, [r4, #12]
 800ab8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab90:	1a9b      	subs	r3, r3, r2
 800ab92:	429d      	cmp	r5, r3
 800ab94:	dbf0      	blt.n	800ab78 <_printf_i+0x1b0>
 800ab96:	e7e9      	b.n	800ab6c <_printf_i+0x1a4>
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	d0a9      	beq.n	800aaf0 <_printf_i+0x128>
 800ab9c:	9e04      	ldr	r6, [sp, #16]
 800ab9e:	0028      	movs	r0, r5
 800aba0:	0039      	movs	r1, r7
 800aba2:	f7f5 fb37 	bl	8000214 <__aeabi_uidivmod>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	3e01      	subs	r6, #1
 800abaa:	5c5b      	ldrb	r3, [r3, r1]
 800abac:	0028      	movs	r0, r5
 800abae:	7033      	strb	r3, [r6, #0]
 800abb0:	0039      	movs	r1, r7
 800abb2:	f7f5 faa9 	bl	8000108 <__udivsi3>
 800abb6:	1e05      	subs	r5, r0, #0
 800abb8:	d1f1      	bne.n	800ab9e <_printf_i+0x1d6>
 800abba:	2f08      	cmp	r7, #8
 800abbc:	d109      	bne.n	800abd2 <_printf_i+0x20a>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	07db      	lsls	r3, r3, #31
 800abc2:	d506      	bpl.n	800abd2 <_printf_i+0x20a>
 800abc4:	6863      	ldr	r3, [r4, #4]
 800abc6:	6922      	ldr	r2, [r4, #16]
 800abc8:	4293      	cmp	r3, r2
 800abca:	dc02      	bgt.n	800abd2 <_printf_i+0x20a>
 800abcc:	2330      	movs	r3, #48	; 0x30
 800abce:	3e01      	subs	r6, #1
 800abd0:	7033      	strb	r3, [r6, #0]
 800abd2:	9b04      	ldr	r3, [sp, #16]
 800abd4:	1b9b      	subs	r3, r3, r6
 800abd6:	6123      	str	r3, [r4, #16]
 800abd8:	9b07      	ldr	r3, [sp, #28]
 800abda:	aa09      	add	r2, sp, #36	; 0x24
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	0021      	movs	r1, r4
 800abe0:	9b06      	ldr	r3, [sp, #24]
 800abe2:	9805      	ldr	r0, [sp, #20]
 800abe4:	f7ff fe82 	bl	800a8ec <_printf_common>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d1b3      	bne.n	800ab54 <_printf_i+0x18c>
 800abec:	2001      	movs	r0, #1
 800abee:	4240      	negs	r0, r0
 800abf0:	b00b      	add	sp, #44	; 0x2c
 800abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf4:	0800b386 	.word	0x0800b386
 800abf8:	0800b375 	.word	0x0800b375

0800abfc <memchr>:
 800abfc:	b2c9      	uxtb	r1, r1
 800abfe:	1882      	adds	r2, r0, r2
 800ac00:	4290      	cmp	r0, r2
 800ac02:	d101      	bne.n	800ac08 <memchr+0xc>
 800ac04:	2000      	movs	r0, #0
 800ac06:	4770      	bx	lr
 800ac08:	7803      	ldrb	r3, [r0, #0]
 800ac0a:	428b      	cmp	r3, r1
 800ac0c:	d0fb      	beq.n	800ac06 <memchr+0xa>
 800ac0e:	3001      	adds	r0, #1
 800ac10:	e7f6      	b.n	800ac00 <memchr+0x4>

0800ac12 <memmove>:
 800ac12:	b510      	push	{r4, lr}
 800ac14:	4288      	cmp	r0, r1
 800ac16:	d902      	bls.n	800ac1e <memmove+0xc>
 800ac18:	188b      	adds	r3, r1, r2
 800ac1a:	4298      	cmp	r0, r3
 800ac1c:	d308      	bcc.n	800ac30 <memmove+0x1e>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d007      	beq.n	800ac34 <memmove+0x22>
 800ac24:	5ccc      	ldrb	r4, [r1, r3]
 800ac26:	54c4      	strb	r4, [r0, r3]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e7f9      	b.n	800ac20 <memmove+0xe>
 800ac2c:	5c8b      	ldrb	r3, [r1, r2]
 800ac2e:	5483      	strb	r3, [r0, r2]
 800ac30:	3a01      	subs	r2, #1
 800ac32:	d2fb      	bcs.n	800ac2c <memmove+0x1a>
 800ac34:	bd10      	pop	{r4, pc}
	...

0800ac38 <_free_r>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	0005      	movs	r5, r0
 800ac3c:	2900      	cmp	r1, #0
 800ac3e:	d010      	beq.n	800ac62 <_free_r+0x2a>
 800ac40:	1f0c      	subs	r4, r1, #4
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	da00      	bge.n	800ac4a <_free_r+0x12>
 800ac48:	18e4      	adds	r4, r4, r3
 800ac4a:	0028      	movs	r0, r5
 800ac4c:	f000 f8d4 	bl	800adf8 <__malloc_lock>
 800ac50:	4a1d      	ldr	r2, [pc, #116]	; (800acc8 <_free_r+0x90>)
 800ac52:	6813      	ldr	r3, [r2, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d105      	bne.n	800ac64 <_free_r+0x2c>
 800ac58:	6063      	str	r3, [r4, #4]
 800ac5a:	6014      	str	r4, [r2, #0]
 800ac5c:	0028      	movs	r0, r5
 800ac5e:	f000 f8cc 	bl	800adfa <__malloc_unlock>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	d909      	bls.n	800ac7c <_free_r+0x44>
 800ac68:	6821      	ldr	r1, [r4, #0]
 800ac6a:	1860      	adds	r0, r4, r1
 800ac6c:	4283      	cmp	r3, r0
 800ac6e:	d1f3      	bne.n	800ac58 <_free_r+0x20>
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	1841      	adds	r1, r0, r1
 800ac76:	6021      	str	r1, [r4, #0]
 800ac78:	e7ee      	b.n	800ac58 <_free_r+0x20>
 800ac7a:	0013      	movs	r3, r2
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	d001      	beq.n	800ac86 <_free_r+0x4e>
 800ac82:	42a2      	cmp	r2, r4
 800ac84:	d9f9      	bls.n	800ac7a <_free_r+0x42>
 800ac86:	6819      	ldr	r1, [r3, #0]
 800ac88:	1858      	adds	r0, r3, r1
 800ac8a:	42a0      	cmp	r0, r4
 800ac8c:	d10b      	bne.n	800aca6 <_free_r+0x6e>
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	1809      	adds	r1, r1, r0
 800ac92:	1858      	adds	r0, r3, r1
 800ac94:	6019      	str	r1, [r3, #0]
 800ac96:	4282      	cmp	r2, r0
 800ac98:	d1e0      	bne.n	800ac5c <_free_r+0x24>
 800ac9a:	6810      	ldr	r0, [r2, #0]
 800ac9c:	6852      	ldr	r2, [r2, #4]
 800ac9e:	1841      	adds	r1, r0, r1
 800aca0:	6019      	str	r1, [r3, #0]
 800aca2:	605a      	str	r2, [r3, #4]
 800aca4:	e7da      	b.n	800ac5c <_free_r+0x24>
 800aca6:	42a0      	cmp	r0, r4
 800aca8:	d902      	bls.n	800acb0 <_free_r+0x78>
 800acaa:	230c      	movs	r3, #12
 800acac:	602b      	str	r3, [r5, #0]
 800acae:	e7d5      	b.n	800ac5c <_free_r+0x24>
 800acb0:	6821      	ldr	r1, [r4, #0]
 800acb2:	1860      	adds	r0, r4, r1
 800acb4:	4282      	cmp	r2, r0
 800acb6:	d103      	bne.n	800acc0 <_free_r+0x88>
 800acb8:	6810      	ldr	r0, [r2, #0]
 800acba:	6852      	ldr	r2, [r2, #4]
 800acbc:	1841      	adds	r1, r0, r1
 800acbe:	6021      	str	r1, [r4, #0]
 800acc0:	6062      	str	r2, [r4, #4]
 800acc2:	605c      	str	r4, [r3, #4]
 800acc4:	e7ca      	b.n	800ac5c <_free_r+0x24>
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	200004d0 	.word	0x200004d0

0800accc <_malloc_r>:
 800accc:	2303      	movs	r3, #3
 800acce:	b570      	push	{r4, r5, r6, lr}
 800acd0:	1ccd      	adds	r5, r1, #3
 800acd2:	439d      	bics	r5, r3
 800acd4:	3508      	adds	r5, #8
 800acd6:	0006      	movs	r6, r0
 800acd8:	2d0c      	cmp	r5, #12
 800acda:	d21e      	bcs.n	800ad1a <_malloc_r+0x4e>
 800acdc:	250c      	movs	r5, #12
 800acde:	42a9      	cmp	r1, r5
 800ace0:	d81d      	bhi.n	800ad1e <_malloc_r+0x52>
 800ace2:	0030      	movs	r0, r6
 800ace4:	f000 f888 	bl	800adf8 <__malloc_lock>
 800ace8:	4a25      	ldr	r2, [pc, #148]	; (800ad80 <_malloc_r+0xb4>)
 800acea:	6814      	ldr	r4, [r2, #0]
 800acec:	0021      	movs	r1, r4
 800acee:	2900      	cmp	r1, #0
 800acf0:	d119      	bne.n	800ad26 <_malloc_r+0x5a>
 800acf2:	4c24      	ldr	r4, [pc, #144]	; (800ad84 <_malloc_r+0xb8>)
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d103      	bne.n	800ad02 <_malloc_r+0x36>
 800acfa:	0030      	movs	r0, r6
 800acfc:	f000 f86a 	bl	800add4 <_sbrk_r>
 800ad00:	6020      	str	r0, [r4, #0]
 800ad02:	0029      	movs	r1, r5
 800ad04:	0030      	movs	r0, r6
 800ad06:	f000 f865 	bl	800add4 <_sbrk_r>
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	d12c      	bne.n	800ad68 <_malloc_r+0x9c>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	0030      	movs	r0, r6
 800ad12:	6033      	str	r3, [r6, #0]
 800ad14:	f000 f871 	bl	800adfa <__malloc_unlock>
 800ad18:	e003      	b.n	800ad22 <_malloc_r+0x56>
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	dadf      	bge.n	800acde <_malloc_r+0x12>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6033      	str	r3, [r6, #0]
 800ad22:	2000      	movs	r0, #0
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
 800ad26:	680b      	ldr	r3, [r1, #0]
 800ad28:	1b5b      	subs	r3, r3, r5
 800ad2a:	d41a      	bmi.n	800ad62 <_malloc_r+0x96>
 800ad2c:	2b0b      	cmp	r3, #11
 800ad2e:	d903      	bls.n	800ad38 <_malloc_r+0x6c>
 800ad30:	600b      	str	r3, [r1, #0]
 800ad32:	18cc      	adds	r4, r1, r3
 800ad34:	6025      	str	r5, [r4, #0]
 800ad36:	e003      	b.n	800ad40 <_malloc_r+0x74>
 800ad38:	428c      	cmp	r4, r1
 800ad3a:	d10e      	bne.n	800ad5a <_malloc_r+0x8e>
 800ad3c:	6863      	ldr	r3, [r4, #4]
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	0030      	movs	r0, r6
 800ad42:	f000 f85a 	bl	800adfa <__malloc_unlock>
 800ad46:	0020      	movs	r0, r4
 800ad48:	2207      	movs	r2, #7
 800ad4a:	300b      	adds	r0, #11
 800ad4c:	1d23      	adds	r3, r4, #4
 800ad4e:	4390      	bics	r0, r2
 800ad50:	1ac3      	subs	r3, r0, r3
 800ad52:	d0e7      	beq.n	800ad24 <_malloc_r+0x58>
 800ad54:	425a      	negs	r2, r3
 800ad56:	50e2      	str	r2, [r4, r3]
 800ad58:	e7e4      	b.n	800ad24 <_malloc_r+0x58>
 800ad5a:	684b      	ldr	r3, [r1, #4]
 800ad5c:	6063      	str	r3, [r4, #4]
 800ad5e:	000c      	movs	r4, r1
 800ad60:	e7ee      	b.n	800ad40 <_malloc_r+0x74>
 800ad62:	000c      	movs	r4, r1
 800ad64:	6849      	ldr	r1, [r1, #4]
 800ad66:	e7c2      	b.n	800acee <_malloc_r+0x22>
 800ad68:	2303      	movs	r3, #3
 800ad6a:	1cc4      	adds	r4, r0, #3
 800ad6c:	439c      	bics	r4, r3
 800ad6e:	42a0      	cmp	r0, r4
 800ad70:	d0e0      	beq.n	800ad34 <_malloc_r+0x68>
 800ad72:	1a21      	subs	r1, r4, r0
 800ad74:	0030      	movs	r0, r6
 800ad76:	f000 f82d 	bl	800add4 <_sbrk_r>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	d1da      	bne.n	800ad34 <_malloc_r+0x68>
 800ad7e:	e7c6      	b.n	800ad0e <_malloc_r+0x42>
 800ad80:	200004d0 	.word	0x200004d0
 800ad84:	200004d4 	.word	0x200004d4

0800ad88 <_realloc_r>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	0007      	movs	r7, r0
 800ad8c:	000d      	movs	r5, r1
 800ad8e:	0016      	movs	r6, r2
 800ad90:	2900      	cmp	r1, #0
 800ad92:	d105      	bne.n	800ada0 <_realloc_r+0x18>
 800ad94:	0011      	movs	r1, r2
 800ad96:	f7ff ff99 	bl	800accc <_malloc_r>
 800ad9a:	0004      	movs	r4, r0
 800ad9c:	0020      	movs	r0, r4
 800ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	d103      	bne.n	800adac <_realloc_r+0x24>
 800ada4:	f7ff ff48 	bl	800ac38 <_free_r>
 800ada8:	0034      	movs	r4, r6
 800adaa:	e7f7      	b.n	800ad9c <_realloc_r+0x14>
 800adac:	f000 f826 	bl	800adfc <_malloc_usable_size_r>
 800adb0:	002c      	movs	r4, r5
 800adb2:	4286      	cmp	r6, r0
 800adb4:	d9f2      	bls.n	800ad9c <_realloc_r+0x14>
 800adb6:	0031      	movs	r1, r6
 800adb8:	0038      	movs	r0, r7
 800adba:	f7ff ff87 	bl	800accc <_malloc_r>
 800adbe:	1e04      	subs	r4, r0, #0
 800adc0:	d0ec      	beq.n	800ad9c <_realloc_r+0x14>
 800adc2:	0029      	movs	r1, r5
 800adc4:	0032      	movs	r2, r6
 800adc6:	f7ff fbf5 	bl	800a5b4 <memcpy>
 800adca:	0029      	movs	r1, r5
 800adcc:	0038      	movs	r0, r7
 800adce:	f7ff ff33 	bl	800ac38 <_free_r>
 800add2:	e7e3      	b.n	800ad9c <_realloc_r+0x14>

0800add4 <_sbrk_r>:
 800add4:	2300      	movs	r3, #0
 800add6:	b570      	push	{r4, r5, r6, lr}
 800add8:	4c06      	ldr	r4, [pc, #24]	; (800adf4 <_sbrk_r+0x20>)
 800adda:	0005      	movs	r5, r0
 800addc:	0008      	movs	r0, r1
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	f7ff f9b2 	bl	800a148 <_sbrk>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d103      	bne.n	800adf0 <_sbrk_r+0x1c>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d000      	beq.n	800adf0 <_sbrk_r+0x1c>
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	bd70      	pop	{r4, r5, r6, pc}
 800adf2:	46c0      	nop			; (mov r8, r8)
 800adf4:	20000578 	.word	0x20000578

0800adf8 <__malloc_lock>:
 800adf8:	4770      	bx	lr

0800adfa <__malloc_unlock>:
 800adfa:	4770      	bx	lr

0800adfc <_malloc_usable_size_r>:
 800adfc:	1f0b      	subs	r3, r1, #4
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	1f18      	subs	r0, r3, #4
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da01      	bge.n	800ae0a <_malloc_usable_size_r+0xe>
 800ae06:	580b      	ldr	r3, [r1, r0]
 800ae08:	18c0      	adds	r0, r0, r3
 800ae0a:	4770      	bx	lr

0800ae0c <ceil>:
 800ae0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae0e:	004b      	lsls	r3, r1, #1
 800ae10:	4a39      	ldr	r2, [pc, #228]	; (800aef8 <ceil+0xec>)
 800ae12:	0d5b      	lsrs	r3, r3, #21
 800ae14:	b085      	sub	sp, #20
 800ae16:	189e      	adds	r6, r3, r2
 800ae18:	9003      	str	r0, [sp, #12]
 800ae1a:	000c      	movs	r4, r1
 800ae1c:	0005      	movs	r5, r0
 800ae1e:	2e13      	cmp	r6, #19
 800ae20:	dc32      	bgt.n	800ae88 <ceil+0x7c>
 800ae22:	2e00      	cmp	r6, #0
 800ae24:	da13      	bge.n	800ae4e <ceil+0x42>
 800ae26:	4a35      	ldr	r2, [pc, #212]	; (800aefc <ceil+0xf0>)
 800ae28:	4b35      	ldr	r3, [pc, #212]	; (800af00 <ceil+0xf4>)
 800ae2a:	f7f5 fc1f 	bl	800066c <__aeabi_dadd>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	f7f5 fb09 	bl	8000448 <__aeabi_dcmpgt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d006      	beq.n	800ae48 <ceil+0x3c>
 800ae3a:	2c00      	cmp	r4, #0
 800ae3c:	db57      	blt.n	800aeee <ceil+0xe2>
 800ae3e:	432c      	orrs	r4, r5
 800ae40:	2500      	movs	r5, #0
 800ae42:	42ac      	cmp	r4, r5
 800ae44:	d000      	beq.n	800ae48 <ceil+0x3c>
 800ae46:	4c2f      	ldr	r4, [pc, #188]	; (800af04 <ceil+0xf8>)
 800ae48:	0028      	movs	r0, r5
 800ae4a:	0021      	movs	r1, r4
 800ae4c:	e026      	b.n	800ae9c <ceil+0x90>
 800ae4e:	4f2e      	ldr	r7, [pc, #184]	; (800af08 <ceil+0xfc>)
 800ae50:	4137      	asrs	r7, r6
 800ae52:	003b      	movs	r3, r7
 800ae54:	400b      	ands	r3, r1
 800ae56:	4303      	orrs	r3, r0
 800ae58:	d020      	beq.n	800ae9c <ceil+0x90>
 800ae5a:	9000      	str	r0, [sp, #0]
 800ae5c:	9101      	str	r1, [sp, #4]
 800ae5e:	4a27      	ldr	r2, [pc, #156]	; (800aefc <ceil+0xf0>)
 800ae60:	4b27      	ldr	r3, [pc, #156]	; (800af00 <ceil+0xf4>)
 800ae62:	9800      	ldr	r0, [sp, #0]
 800ae64:	9901      	ldr	r1, [sp, #4]
 800ae66:	f7f5 fc01 	bl	800066c <__aeabi_dadd>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f7f5 faeb 	bl	8000448 <__aeabi_dcmpgt>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d0e8      	beq.n	800ae48 <ceil+0x3c>
 800ae76:	2c00      	cmp	r4, #0
 800ae78:	dd03      	ble.n	800ae82 <ceil+0x76>
 800ae7a:	2380      	movs	r3, #128	; 0x80
 800ae7c:	035b      	lsls	r3, r3, #13
 800ae7e:	4133      	asrs	r3, r6
 800ae80:	18e4      	adds	r4, r4, r3
 800ae82:	43bc      	bics	r4, r7
 800ae84:	2500      	movs	r5, #0
 800ae86:	e7df      	b.n	800ae48 <ceil+0x3c>
 800ae88:	2e33      	cmp	r6, #51	; 0x33
 800ae8a:	dd09      	ble.n	800aea0 <ceil+0x94>
 800ae8c:	2380      	movs	r3, #128	; 0x80
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	429e      	cmp	r6, r3
 800ae92:	d103      	bne.n	800ae9c <ceil+0x90>
 800ae94:	0002      	movs	r2, r0
 800ae96:	000b      	movs	r3, r1
 800ae98:	f7f5 fbe8 	bl	800066c <__aeabi_dadd>
 800ae9c:	b005      	add	sp, #20
 800ae9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aea0:	2701      	movs	r7, #1
 800aea2:	4a1a      	ldr	r2, [pc, #104]	; (800af0c <ceil+0x100>)
 800aea4:	427f      	negs	r7, r7
 800aea6:	189b      	adds	r3, r3, r2
 800aea8:	40df      	lsrs	r7, r3
 800aeaa:	4207      	tst	r7, r0
 800aeac:	d0f6      	beq.n	800ae9c <ceil+0x90>
 800aeae:	9000      	str	r0, [sp, #0]
 800aeb0:	9101      	str	r1, [sp, #4]
 800aeb2:	4a12      	ldr	r2, [pc, #72]	; (800aefc <ceil+0xf0>)
 800aeb4:	4b12      	ldr	r3, [pc, #72]	; (800af00 <ceil+0xf4>)
 800aeb6:	9800      	ldr	r0, [sp, #0]
 800aeb8:	9901      	ldr	r1, [sp, #4]
 800aeba:	f7f5 fbd7 	bl	800066c <__aeabi_dadd>
 800aebe:	2200      	movs	r2, #0
 800aec0:	2300      	movs	r3, #0
 800aec2:	f7f5 fac1 	bl	8000448 <__aeabi_dcmpgt>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d0be      	beq.n	800ae48 <ceil+0x3c>
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	dd02      	ble.n	800aed4 <ceil+0xc8>
 800aece:	2e14      	cmp	r6, #20
 800aed0:	d102      	bne.n	800aed8 <ceil+0xcc>
 800aed2:	3401      	adds	r4, #1
 800aed4:	43bd      	bics	r5, r7
 800aed6:	e7b7      	b.n	800ae48 <ceil+0x3c>
 800aed8:	2334      	movs	r3, #52	; 0x34
 800aeda:	1b9e      	subs	r6, r3, r6
 800aedc:	3b33      	subs	r3, #51	; 0x33
 800aede:	40b3      	lsls	r3, r6
 800aee0:	18ed      	adds	r5, r5, r3
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	429d      	cmp	r5, r3
 800aee6:	419b      	sbcs	r3, r3
 800aee8:	425b      	negs	r3, r3
 800aeea:	18e4      	adds	r4, r4, r3
 800aeec:	e7f2      	b.n	800aed4 <ceil+0xc8>
 800aeee:	2480      	movs	r4, #128	; 0x80
 800aef0:	2500      	movs	r5, #0
 800aef2:	0624      	lsls	r4, r4, #24
 800aef4:	e7a8      	b.n	800ae48 <ceil+0x3c>
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	fffffc01 	.word	0xfffffc01
 800aefc:	8800759c 	.word	0x8800759c
 800af00:	7e37e43c 	.word	0x7e37e43c
 800af04:	3ff00000 	.word	0x3ff00000
 800af08:	000fffff 	.word	0x000fffff
 800af0c:	fffffbed 	.word	0xfffffbed

0800af10 <floor>:
 800af10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af12:	004b      	lsls	r3, r1, #1
 800af14:	4a39      	ldr	r2, [pc, #228]	; (800affc <floor+0xec>)
 800af16:	0d5b      	lsrs	r3, r3, #21
 800af18:	b085      	sub	sp, #20
 800af1a:	189e      	adds	r6, r3, r2
 800af1c:	9003      	str	r0, [sp, #12]
 800af1e:	000c      	movs	r4, r1
 800af20:	0005      	movs	r5, r0
 800af22:	2e13      	cmp	r6, #19
 800af24:	dc34      	bgt.n	800af90 <floor+0x80>
 800af26:	2e00      	cmp	r6, #0
 800af28:	da15      	bge.n	800af56 <floor+0x46>
 800af2a:	4a35      	ldr	r2, [pc, #212]	; (800b000 <floor+0xf0>)
 800af2c:	4b35      	ldr	r3, [pc, #212]	; (800b004 <floor+0xf4>)
 800af2e:	f7f5 fb9d 	bl	800066c <__aeabi_dadd>
 800af32:	2200      	movs	r2, #0
 800af34:	2300      	movs	r3, #0
 800af36:	f7f5 fa87 	bl	8000448 <__aeabi_dcmpgt>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d008      	beq.n	800af50 <floor+0x40>
 800af3e:	2c00      	cmp	r4, #0
 800af40:	da59      	bge.n	800aff6 <floor+0xe6>
 800af42:	0063      	lsls	r3, r4, #1
 800af44:	085b      	lsrs	r3, r3, #1
 800af46:	432b      	orrs	r3, r5
 800af48:	2500      	movs	r5, #0
 800af4a:	42ab      	cmp	r3, r5
 800af4c:	d000      	beq.n	800af50 <floor+0x40>
 800af4e:	4c2e      	ldr	r4, [pc, #184]	; (800b008 <floor+0xf8>)
 800af50:	0028      	movs	r0, r5
 800af52:	0021      	movs	r1, r4
 800af54:	e026      	b.n	800afa4 <floor+0x94>
 800af56:	4f2d      	ldr	r7, [pc, #180]	; (800b00c <floor+0xfc>)
 800af58:	4137      	asrs	r7, r6
 800af5a:	003b      	movs	r3, r7
 800af5c:	400b      	ands	r3, r1
 800af5e:	4303      	orrs	r3, r0
 800af60:	d020      	beq.n	800afa4 <floor+0x94>
 800af62:	9000      	str	r0, [sp, #0]
 800af64:	9101      	str	r1, [sp, #4]
 800af66:	4a26      	ldr	r2, [pc, #152]	; (800b000 <floor+0xf0>)
 800af68:	4b26      	ldr	r3, [pc, #152]	; (800b004 <floor+0xf4>)
 800af6a:	9800      	ldr	r0, [sp, #0]
 800af6c:	9901      	ldr	r1, [sp, #4]
 800af6e:	f7f5 fb7d 	bl	800066c <__aeabi_dadd>
 800af72:	2200      	movs	r2, #0
 800af74:	2300      	movs	r3, #0
 800af76:	f7f5 fa67 	bl	8000448 <__aeabi_dcmpgt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0e8      	beq.n	800af50 <floor+0x40>
 800af7e:	2c00      	cmp	r4, #0
 800af80:	da03      	bge.n	800af8a <floor+0x7a>
 800af82:	2380      	movs	r3, #128	; 0x80
 800af84:	035b      	lsls	r3, r3, #13
 800af86:	4133      	asrs	r3, r6
 800af88:	18e4      	adds	r4, r4, r3
 800af8a:	43bc      	bics	r4, r7
 800af8c:	2500      	movs	r5, #0
 800af8e:	e7df      	b.n	800af50 <floor+0x40>
 800af90:	2e33      	cmp	r6, #51	; 0x33
 800af92:	dd09      	ble.n	800afa8 <floor+0x98>
 800af94:	2380      	movs	r3, #128	; 0x80
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	429e      	cmp	r6, r3
 800af9a:	d103      	bne.n	800afa4 <floor+0x94>
 800af9c:	0002      	movs	r2, r0
 800af9e:	000b      	movs	r3, r1
 800afa0:	f7f5 fb64 	bl	800066c <__aeabi_dadd>
 800afa4:	b005      	add	sp, #20
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	2701      	movs	r7, #1
 800afaa:	4a19      	ldr	r2, [pc, #100]	; (800b010 <floor+0x100>)
 800afac:	427f      	negs	r7, r7
 800afae:	189b      	adds	r3, r3, r2
 800afb0:	40df      	lsrs	r7, r3
 800afb2:	4207      	tst	r7, r0
 800afb4:	d0f6      	beq.n	800afa4 <floor+0x94>
 800afb6:	9000      	str	r0, [sp, #0]
 800afb8:	9101      	str	r1, [sp, #4]
 800afba:	4a11      	ldr	r2, [pc, #68]	; (800b000 <floor+0xf0>)
 800afbc:	4b11      	ldr	r3, [pc, #68]	; (800b004 <floor+0xf4>)
 800afbe:	9800      	ldr	r0, [sp, #0]
 800afc0:	9901      	ldr	r1, [sp, #4]
 800afc2:	f7f5 fb53 	bl	800066c <__aeabi_dadd>
 800afc6:	2200      	movs	r2, #0
 800afc8:	2300      	movs	r3, #0
 800afca:	f7f5 fa3d 	bl	8000448 <__aeabi_dcmpgt>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0be      	beq.n	800af50 <floor+0x40>
 800afd2:	2c00      	cmp	r4, #0
 800afd4:	da02      	bge.n	800afdc <floor+0xcc>
 800afd6:	2e14      	cmp	r6, #20
 800afd8:	d102      	bne.n	800afe0 <floor+0xd0>
 800afda:	3401      	adds	r4, #1
 800afdc:	43bd      	bics	r5, r7
 800afde:	e7b7      	b.n	800af50 <floor+0x40>
 800afe0:	2334      	movs	r3, #52	; 0x34
 800afe2:	1b9e      	subs	r6, r3, r6
 800afe4:	3b33      	subs	r3, #51	; 0x33
 800afe6:	40b3      	lsls	r3, r6
 800afe8:	18ed      	adds	r5, r5, r3
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	429d      	cmp	r5, r3
 800afee:	419b      	sbcs	r3, r3
 800aff0:	425b      	negs	r3, r3
 800aff2:	18e4      	adds	r4, r4, r3
 800aff4:	e7f2      	b.n	800afdc <floor+0xcc>
 800aff6:	2500      	movs	r5, #0
 800aff8:	002c      	movs	r4, r5
 800affa:	e7a9      	b.n	800af50 <floor+0x40>
 800affc:	fffffc01 	.word	0xfffffc01
 800b000:	8800759c 	.word	0x8800759c
 800b004:	7e37e43c 	.word	0x7e37e43c
 800b008:	bff00000 	.word	0xbff00000
 800b00c:	000fffff 	.word	0x000fffff
 800b010:	fffffbed 	.word	0xfffffbed

0800b014 <round>:
 800b014:	b570      	push	{r4, r5, r6, lr}
 800b016:	004a      	lsls	r2, r1, #1
 800b018:	4d1d      	ldr	r5, [pc, #116]	; (800b090 <round+0x7c>)
 800b01a:	0d52      	lsrs	r2, r2, #21
 800b01c:	1955      	adds	r5, r2, r5
 800b01e:	000e      	movs	r6, r1
 800b020:	2d13      	cmp	r5, #19
 800b022:	dc18      	bgt.n	800b056 <round+0x42>
 800b024:	2d00      	cmp	r5, #0
 800b026:	da09      	bge.n	800b03c <round+0x28>
 800b028:	0fcb      	lsrs	r3, r1, #31
 800b02a:	07db      	lsls	r3, r3, #31
 800b02c:	2200      	movs	r2, #0
 800b02e:	1c69      	adds	r1, r5, #1
 800b030:	d101      	bne.n	800b036 <round+0x22>
 800b032:	4918      	ldr	r1, [pc, #96]	; (800b094 <round+0x80>)
 800b034:	430b      	orrs	r3, r1
 800b036:	0019      	movs	r1, r3
 800b038:	0010      	movs	r0, r2
 800b03a:	e016      	b.n	800b06a <round+0x56>
 800b03c:	4a16      	ldr	r2, [pc, #88]	; (800b098 <round+0x84>)
 800b03e:	412a      	asrs	r2, r5
 800b040:	420a      	tst	r2, r1
 800b042:	d101      	bne.n	800b048 <round+0x34>
 800b044:	2800      	cmp	r0, #0
 800b046:	d010      	beq.n	800b06a <round+0x56>
 800b048:	2380      	movs	r3, #128	; 0x80
 800b04a:	031b      	lsls	r3, r3, #12
 800b04c:	412b      	asrs	r3, r5
 800b04e:	199b      	adds	r3, r3, r6
 800b050:	4393      	bics	r3, r2
 800b052:	2200      	movs	r2, #0
 800b054:	e7ef      	b.n	800b036 <round+0x22>
 800b056:	2d33      	cmp	r5, #51	; 0x33
 800b058:	dd08      	ble.n	800b06c <round+0x58>
 800b05a:	2380      	movs	r3, #128	; 0x80
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	429d      	cmp	r5, r3
 800b060:	d103      	bne.n	800b06a <round+0x56>
 800b062:	0002      	movs	r2, r0
 800b064:	000b      	movs	r3, r1
 800b066:	f7f5 fb01 	bl	800066c <__aeabi_dadd>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	4e0b      	ldr	r6, [pc, #44]	; (800b09c <round+0x88>)
 800b06e:	1992      	adds	r2, r2, r6
 800b070:	2601      	movs	r6, #1
 800b072:	4276      	negs	r6, r6
 800b074:	40d6      	lsrs	r6, r2
 800b076:	4206      	tst	r6, r0
 800b078:	d0f7      	beq.n	800b06a <round+0x56>
 800b07a:	2233      	movs	r2, #51	; 0x33
 800b07c:	1b55      	subs	r5, r2, r5
 800b07e:	3a32      	subs	r2, #50	; 0x32
 800b080:	40aa      	lsls	r2, r5
 800b082:	1812      	adds	r2, r2, r0
 800b084:	4282      	cmp	r2, r0
 800b086:	41a4      	sbcs	r4, r4
 800b088:	4264      	negs	r4, r4
 800b08a:	190b      	adds	r3, r1, r4
 800b08c:	43b2      	bics	r2, r6
 800b08e:	e7d2      	b.n	800b036 <round+0x22>
 800b090:	fffffc01 	.word	0xfffffc01
 800b094:	3ff00000 	.word	0x3ff00000
 800b098:	000fffff 	.word	0x000fffff
 800b09c:	fffffbed 	.word	0xfffffbed

0800b0a0 <_init>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	46c0      	nop			; (mov r8, r8)
 800b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a6:	bc08      	pop	{r3}
 800b0a8:	469e      	mov	lr, r3
 800b0aa:	4770      	bx	lr

0800b0ac <_fini>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	46c0      	nop			; (mov r8, r8)
 800b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b2:	bc08      	pop	{r3}
 800b0b4:	469e      	mov	lr, r3
 800b0b6:	4770      	bx	lr
